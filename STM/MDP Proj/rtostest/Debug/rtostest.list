
rtostest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0800e588  0800e588  0001e588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f54c  0800f54c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f54c  0800f54c  0001f54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f554  0800f554  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f554  0800f554  0001f554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f558  0800f558  0001f558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000051f0  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200053d0  200053d0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d400  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b51  00000000  00000000  0003d64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a38  00000000  00000000  000411a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001491  00000000  00000000  00042bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005111  00000000  00000000  00044069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e50c  00000000  00000000  0004917a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6d7f  00000000  00000000  00067686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000810c  00000000  00000000  0014e408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00156514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e56c 	.word	0x0800e56c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e56c 	.word	0x0800e56c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <__NVIC_SystemReset+0x24>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ef6:	4904      	ldr	r1, [pc, #16]	; (8000f08 <__NVIC_SystemReset+0x24>)
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_SystemReset+0x28>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efe:	f3bf 8f4f 	dsb	sy
}
 8000f02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <__NVIC_SystemReset+0x20>
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0004 	.word	0x05fa0004

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f14:	f003 f94c 	bl	80041b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f18:	f000 f890 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1c:	f000 fb88 	bl	8001630 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f20:	f000 f918 	bl	8001154 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f24:	f000 f9b4 	bl	8001290 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f28:	f000 fa06 	bl	8001338 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000f2c:	f000 faac 	bl	8001488 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000f30:	f000 fb54 	bl	80015dc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f34:	f000 f8e0 	bl	80010f8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000f38:	f000 fa52 	bl	80013e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f3c:	f003 f8ac 	bl	8004098 <OLED_Init>

  // for debug
  //HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 1);
  // for real task
    HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 5);
 8000f40:	2205      	movs	r2, #5
 8000f42:	4924      	ldr	r1, [pc, #144]	; (8000fd4 <main+0xc4>)
 8000f44:	4824      	ldr	r0, [pc, #144]	; (8000fd8 <main+0xc8>)
 8000f46:	f006 ff04 	bl	8007d52 <HAL_UART_Receive_IT>
//	encoderRightTasHandle = osThreadNew(StartEncoderRightTask, NULL, &encoderRightTas_attributes);
//
//  /* creation of encoderLeftTask */
//  encoderLeftTaskHandle = osThreadNew(StartEncoderLeftTask, NULL, &encoderLeftTask_attributes);

    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <main+0xcc>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <main+0xd0>)
 8000f50:	f007 ff16 	bl	8008d80 <osThreadNew>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a23      	ldr	r2, [pc, #140]	; (8000fe4 <main+0xd4>)
 8000f58:	6013      	str	r3, [r2, #0]

    /* creation of MotorTask */
    motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8000f5a:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <main+0xd8>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4823      	ldr	r0, [pc, #140]	; (8000fec <main+0xdc>)
 8000f60:	f007 ff0e 	bl	8008d80 <osThreadNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a22      	ldr	r2, [pc, #136]	; (8000ff0 <main+0xe0>)
 8000f68:	6013      	str	r3, [r2, #0]

    /* creation of oledTask */
    oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <main+0xe4>)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4822      	ldr	r0, [pc, #136]	; (8000ff8 <main+0xe8>)
 8000f70:	f007 ff06 	bl	8008d80 <osThreadNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <main+0xec>)
 8000f78:	6013      	str	r3, [r2, #0]

    /* creation of rpiTask */
    rpiTaskHandle = osThreadNew(StartRpiTask, NULL, &rpiTask_attributes);
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <main+0xf0>)
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4821      	ldr	r0, [pc, #132]	; (8001004 <main+0xf4>)
 8000f80:	f007 fefe 	bl	8008d80 <osThreadNew>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <main+0xf8>)
 8000f88:	6013      	str	r3, [r2, #0]

    /* creation of gyroTask */
    gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8000f8a:	4a20      	ldr	r2, [pc, #128]	; (800100c <main+0xfc>)
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4820      	ldr	r0, [pc, #128]	; (8001010 <main+0x100>)
 8000f90:	f007 fef6 	bl	8008d80 <osThreadNew>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <main+0x104>)
 8000f98:	6013      	str	r3, [r2, #0]

    /* creation of bulleyesTask */
    bulleyesTaskHandle = osThreadNew(StartBulleyesTask, NULL, &bulleyesTask_attributes);
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <main+0x108>)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	481f      	ldr	r0, [pc, #124]	; (800101c <main+0x10c>)
 8000fa0:	f007 feee 	bl	8008d80 <osThreadNew>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <main+0x110>)
 8000fa8:	6013      	str	r3, [r2, #0]

	/* creation of encoderRightTas */
	encoderRightTasHandle = osThreadNew(StartEncoderRightTask, NULL, &encoderRightTas_attributes);
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <main+0x114>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	481e      	ldr	r0, [pc, #120]	; (8001028 <main+0x118>)
 8000fb0:	f007 fee6 	bl	8008d80 <osThreadNew>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a1d      	ldr	r2, [pc, #116]	; (800102c <main+0x11c>)
 8000fb8:	6013      	str	r3, [r2, #0]

	/* creation of encoderLeftTask */
	encoderLeftTaskHandle = osThreadNew(StartEncoderLeftTask, NULL, &encoderLeftTask_attributes);
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <main+0x120>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	481d      	ldr	r0, [pc, #116]	; (8001034 <main+0x124>)
 8000fc0:	f007 fede 	bl	8008d80 <osThreadNew>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <main+0x128>)
 8000fc8:	6013      	str	r3, [r2, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fca:	f007 fe8f 	bl	8008cec <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000fce:	f007 feb1 	bl	8008d34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <main+0xc2>
 8000fd4:	2000041c 	.word	0x2000041c
 8000fd8:	200003b8 	.word	0x200003b8
 8000fdc:	0800e640 	.word	0x0800e640
 8000fe0:	080023cd 	.word	0x080023cd
 8000fe4:	200003fc 	.word	0x200003fc
 8000fe8:	0800e664 	.word	0x0800e664
 8000fec:	08002401 	.word	0x08002401
 8000ff0:	20000400 	.word	0x20000400
 8000ff4:	0800e688 	.word	0x0800e688
 8000ff8:	08002899 	.word	0x08002899
 8000ffc:	20000404 	.word	0x20000404
 8001000:	0800e6ac 	.word	0x0800e6ac
 8001004:	080029e1 	.word	0x080029e1
 8001008:	20000408 	.word	0x20000408
 800100c:	0800e6d0 	.word	0x0800e6d0
 8001010:	08003309 	.word	0x08003309
 8001014:	2000040c 	.word	0x2000040c
 8001018:	0800e6f4 	.word	0x0800e6f4
 800101c:	0800349d 	.word	0x0800349d
 8001020:	20000410 	.word	0x20000410
 8001024:	0800e718 	.word	0x0800e718
 8001028:	080034a9 	.word	0x080034a9
 800102c:	20000414 	.word	0x20000414
 8001030:	0800e73c 	.word	0x0800e73c
 8001034:	08003531 	.word	0x08003531
 8001038:	20000418 	.word	0x20000418

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f00b f93f 	bl	800c2ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <SystemClock_Config+0xb4>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <SystemClock_Config+0xb4>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <SystemClock_Config+0xb4>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <SystemClock_Config+0xb8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <SystemClock_Config+0xb8>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <SystemClock_Config+0xb8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a0:	2310      	movs	r3, #16
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fc47 	bl	8005940 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010b8:	f002 fa7e 	bl	80035b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 feaa 	bl	8005e30 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010e2:	f002 fa69 	bl	80035b8 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	; 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_I2C1_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_I2C1_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_I2C1_Init+0x50>)
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_I2C1_Init+0x58>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_I2C1_Init+0x50>)
 8001116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_I2C1_Init+0x50>)
 8001136:	f003 fc45 	bl	80049c4 <HAL_I2C_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001140:	f002 fa3a 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001fc 	.word	0x200001fc
 800114c:	40005400 	.word	0x40005400
 8001150:	000186a0 	.word	0x000186a0

08001154 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	; 0x58
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00b f89e 	bl	800c2ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <MX_TIM1_Init+0x134>)
 8001194:	4a3d      	ldr	r2, [pc, #244]	; (800128c <MX_TIM1_Init+0x138>)
 8001196:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001198:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <MX_TIM1_Init+0x134>)
 800119a:	22a0      	movs	r2, #160	; 0xa0
 800119c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <MX_TIM1_Init+0x134>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <MX_TIM1_Init+0x134>)
 80011a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <MX_TIM1_Init+0x134>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <MX_TIM1_Init+0x134>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b8:	4b33      	ldr	r3, [pc, #204]	; (8001288 <MX_TIM1_Init+0x134>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011be:	4832      	ldr	r0, [pc, #200]	; (8001288 <MX_TIM1_Init+0x134>)
 80011c0:	f005 f816 	bl	80061f0 <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011ca:	f002 f9f5 	bl	80035b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011d8:	4619      	mov	r1, r3
 80011da:	482b      	ldr	r0, [pc, #172]	; (8001288 <MX_TIM1_Init+0x134>)
 80011dc:	f005 fe8a 	bl	8006ef4 <HAL_TIM_ConfigClockSource>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011e6:	f002 f9e7 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ea:	4827      	ldr	r0, [pc, #156]	; (8001288 <MX_TIM1_Init+0x134>)
 80011ec:	f005 f84f 	bl	800628e <HAL_TIM_PWM_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011f6:	f002 f9df 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001202:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001206:	4619      	mov	r1, r3
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <MX_TIM1_Init+0x134>)
 800120a:	f006 fbe1 	bl	80079d0 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001214:	f002 f9d0 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	220c      	movs	r2, #12
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM1_Init+0x134>)
 800123a:	f005 fd99 	bl	8006d70 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001244:	f002 f9b8 	bl	80035b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <MX_TIM1_Init+0x134>)
 800126c:	f006 fc2c 	bl	8007ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001276:	f002 f99f 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800127a:	4803      	ldr	r0, [pc, #12]	; (8001288 <MX_TIM1_Init+0x134>)
 800127c:	f002 fb7e 	bl	800397c <HAL_TIM_MspPostInit>

}
 8001280:	bf00      	nop
 8001282:	3758      	adds	r7, #88	; 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000250 	.word	0x20000250
 800128c:	40010000 	.word	0x40010000

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f00b f815 	bl	800c2ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ac:	4b21      	ldr	r3, [pc, #132]	; (8001334 <MX_TIM2_Init+0xa4>)
 80012ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <MX_TIM2_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_TIM2_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <MX_TIM2_Init+0xa4>)
 80012c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM2_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <MX_TIM2_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012d4:	2303      	movs	r3, #3
 80012d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012e4:	230a      	movs	r3, #10
 80012e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ec:	2301      	movs	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012f4:	230a      	movs	r3, #10
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_TIM2_Init+0xa4>)
 8001300:	f005 fa5e 	bl	80067c0 <HAL_TIM_Encoder_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800130a:	f002 f955 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM2_Init+0xa4>)
 800131c:	f006 fb58 	bl	80079d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001326:	f002 f947 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3730      	adds	r7, #48	; 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000298 	.word	0x20000298

08001338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f00a ffc1 	bl	800c2ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <MX_TIM3_Init+0xa4>)
 8001358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800135a:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <MX_TIM3_Init+0xa0>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_TIM3_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800137a:	2303      	movs	r3, #3
 800137c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001382:	2301      	movs	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800138a:	230a      	movs	r3, #10
 800138c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800139a:	230a      	movs	r3, #10
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <MX_TIM3_Init+0xa0>)
 80013a6:	f005 fa0b 	bl	80067c0 <HAL_TIM_Encoder_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013b0:	f002 f902 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_TIM3_Init+0xa0>)
 80013c2:	f006 fb05 	bl	80079d0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013cc:	f002 f8f4 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200002e0 	.word	0x200002e0
 80013dc:	40000400 	.word	0x40000400

080013e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_TIM4_Init+0xa0>)
 80013fe:	4a21      	ldr	r2, [pc, #132]	; (8001484 <MX_TIM4_Init+0xa4>)
 8001400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_TIM4_Init+0xa0>)
 8001404:	220f      	movs	r2, #15
 8001406:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_TIM4_Init+0xa0>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_TIM4_Init+0xa0>)
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001414:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_TIM4_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_TIM4_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001422:	4817      	ldr	r0, [pc, #92]	; (8001480 <MX_TIM4_Init+0xa0>)
 8001424:	f005 f854 	bl	80064d0 <HAL_TIM_IC_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800142e:	f002 f8c3 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	480f      	ldr	r0, [pc, #60]	; (8001480 <MX_TIM4_Init+0xa0>)
 8001442:	f006 fac5 	bl	80079d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800144c:	f002 f8b4 	bl	80035b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001450:	2300      	movs	r3, #0
 8001452:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_TIM4_Init+0xa0>)
 8001468:	f005 fbe6 	bl	8006c38 <HAL_TIM_IC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001472:	f002 f8a1 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000328 	.word	0x20000328
 8001484:	40000800 	.word	0x40000800

08001488 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b096      	sub	sp, #88	; 0x58
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2220      	movs	r2, #32
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00a ff04 	bl	800c2ce <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014c6:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014c8:	4a43      	ldr	r2, [pc, #268]	; (80015d8 <MX_TIM8_Init+0x150>)
 80014ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80014d8:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014da:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014f2:	4838      	ldr	r0, [pc, #224]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80014f4:	f004 fe7c 	bl	80061f0 <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014fe:	f002 f85b 	bl	80035b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001508:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800150c:	4619      	mov	r1, r3
 800150e:	4831      	ldr	r0, [pc, #196]	; (80015d4 <MX_TIM8_Init+0x14c>)
 8001510:	f005 fcf0 	bl	8006ef4 <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800151a:	f002 f84d 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <MX_TIM8_Init+0x14c>)
 8001520:	f004 feb5 	bl	800628e <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800152a:	f002 f845 	bl	80035b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001536:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800153a:	4619      	mov	r1, r3
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <MX_TIM8_Init+0x14c>)
 800153e:	f006 fa47 	bl	80079d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001548:	f002 f836 	bl	80035b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	; 0x60
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	2200      	movs	r2, #0
 800156e:	4619      	mov	r1, r3
 8001570:	4818      	ldr	r0, [pc, #96]	; (80015d4 <MX_TIM8_Init+0x14c>)
 8001572:	f005 fbfd 	bl	8006d70 <HAL_TIM_PWM_ConfigChannel>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800157c:	f002 f81c 	bl	80035b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4812      	ldr	r0, [pc, #72]	; (80015d4 <MX_TIM8_Init+0x14c>)
 800158a:	f005 fbf1 	bl	8006d70 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001594:	f002 f810 	bl	80035b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_TIM8_Init+0x14c>)
 80015bc:	f006 fa84 	bl	8007ac8 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015c6:	f001 fff7 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3758      	adds	r7, #88	; 0x58
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000370 	.word	0x20000370
 80015d8:	40010400 	.word	0x40010400

080015dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_USART3_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART3_UART_Init+0x4c>)
 8001614:	f006 fabe 	bl	8007b94 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f001 ffcb 	bl	80035b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200003b8 	.word	0x200003b8
 800162c:	40004800 	.word	0x40004800

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b5b      	ldr	r3, [pc, #364]	; (80017b8 <MX_GPIO_Init+0x188>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a5a      	ldr	r2, [pc, #360]	; (80017b8 <MX_GPIO_Init+0x188>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b58      	ldr	r3, [pc, #352]	; (80017b8 <MX_GPIO_Init+0x188>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b54      	ldr	r3, [pc, #336]	; (80017b8 <MX_GPIO_Init+0x188>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a53      	ldr	r2, [pc, #332]	; (80017b8 <MX_GPIO_Init+0x188>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <MX_GPIO_Init+0x188>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <MX_GPIO_Init+0x188>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a4c      	ldr	r2, [pc, #304]	; (80017b8 <MX_GPIO_Init+0x188>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <MX_GPIO_Init+0x188>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a3e      	ldr	r2, [pc, #248]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a37      	ldr	r2, [pc, #220]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <MX_GPIO_Init+0x188>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80016f4:	4831      	ldr	r0, [pc, #196]	; (80017bc <MX_GPIO_Init+0x18c>)
 80016f6:	f003 f931 	bl	800495c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	213c      	movs	r1, #60	; 0x3c
 80016fe:	4830      	ldr	r0, [pc, #192]	; (80017c0 <MX_GPIO_Init+0x190>)
 8001700:	f003 f92c 	bl	800495c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170a:	482e      	ldr	r0, [pc, #184]	; (80017c4 <MX_GPIO_Init+0x194>)
 800170c:	f003 f926 	bl	800495c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001716:	482c      	ldr	r0, [pc, #176]	; (80017c8 <MX_GPIO_Init+0x198>)
 8001718:	f003 f920 	bl	800495c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800171c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001720:	61fb      	str	r3, [r7, #28]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4821      	ldr	r0, [pc, #132]	; (80017bc <MX_GPIO_Init+0x18c>)
 8001736:	f002 ff75 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800173a:	233c      	movs	r3, #60	; 0x3c
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001746:	2302      	movs	r3, #2
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	4619      	mov	r1, r3
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <MX_GPIO_Init+0x190>)
 8001752:	f002 ff67 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4815      	ldr	r0, [pc, #84]	; (80017c4 <MX_GPIO_Init+0x194>)
 8001770:	f002 ff58 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB_Pin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8001774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	480f      	ldr	r0, [pc, #60]	; (80017c8 <MX_GPIO_Init+0x198>)
 800178c:	f002 ff4a 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_GPIO_Init+0x198>)
 80017aa:	f002 ff3b 	bl	8004624 <HAL_GPIO_Init>

}
 80017ae:	bf00      	nop
 80017b0:	3730      	adds	r7, #48	; 0x30
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020c00 	.word	0x40020c00

080017cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	/* to prevent unused argument(s) compilation warning */
	UNUSED(huart);
	// for debug
	//HAL_UART_Receive_IT (&huart3, aRxBuffer, 1);
	// for real task
	HAL_UART_Receive_IT (&huart3, aRxBuffer, 5);
 80017d4:	2205      	movs	r2, #5
 80017d6:	4904      	ldr	r1, [pc, #16]	; (80017e8 <HAL_UART_RxCpltCallback+0x1c>)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <HAL_UART_RxCpltCallback+0x20>)
 80017da:	f006 faba 	bl	8007d52 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart3, aRxBuffer, 10);
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000041c 	.word	0x2000041c
 80017ec:	200003b8 	.word	0x200003b8

080017f0 <HAL_TIM_IC_CaptureCallback>:
			start = 0;
 	    }
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7f1b      	ldrb	r3, [r3, #28]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	f040 808a 	bne.w	8001916 <HAL_TIM_IC_CaptureCallback+0x126>
 {
  if (Is_First_Captured == 0)
 8001802:	4b49      	ldr	r3, [pc, #292]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d11b      	bne.n	8001842 <HAL_TIM_IC_CaptureCallback+0x52>
  {
   IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800180a:	2100      	movs	r1, #0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f005 fc39 	bl	8007084 <HAL_TIM_ReadCapturedValue>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b45      	ldr	r3, [pc, #276]	; (800192c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001818:	601a      	str	r2, [r3, #0]
   Is_First_Captured = 1;
 800181a:	4b43      	ldr	r3, [pc, #268]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x138>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 020a 	bic.w	r2, r2, #10
 800182e:	621a      	str	r2, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6a1a      	ldr	r2, [r3, #32]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0202 	orr.w	r2, r2, #2
 800183e:	621a      	str	r2, [r3, #32]

   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
  }
 }
}
 8001840:	e069      	b.n	8001916 <HAL_TIM_IC_CaptureCallback+0x126>
  else if (Is_First_Captured == 1)
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d165      	bne.n	8001916 <HAL_TIM_IC_CaptureCallback+0x126>
   IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800184a:	2100      	movs	r1, #0
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f005 fc19 	bl	8007084 <HAL_TIM_ReadCapturedValue>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001858:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_COUNTER(htim,0);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
   if (IC_Val2 > IC_Val1)
 8001862:	4b33      	ldr	r3, [pc, #204]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	dd0a      	ble.n	8001884 <HAL_TIM_IC_CaptureCallback+0x94>
    Difference = IC_Val2 - IC_Val1;
 800186e:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001880:	801a      	strh	r2, [r3, #0]
 8001882:	e011      	b.n	80018a8 <HAL_TIM_IC_CaptureCallback+0xb8>
   else if (IC_Val1 > IC_Val2)
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x140>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	dd0b      	ble.n	80018a8 <HAL_TIM_IC_CaptureCallback+0xb8>
    Difference = (65535 - IC_Val1) + IC_Val2;
 8001890:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x144>)
 80018a6:	801a      	strh	r2, [r3, #0]
   USdistance = Difference * .0343/2;
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_TIM_IC_CaptureCallback+0x144>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe39 	bl	8000524 <__aeabi_i2d>
 80018b2:	a31b      	add	r3, pc, #108	; (adr r3, 8001920 <HAL_TIM_IC_CaptureCallback+0x130>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fe9e 	bl	80005f8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018cc:	f7fe ffbe 	bl	800084c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f966 	bl	8000ba8 <__aeabi_d2uiz>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_TIM_IC_CaptureCallback+0x148>)
 80018e2:	801a      	strh	r2, [r3, #0]
   Is_First_Captured = 0;
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
   __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 020a 	bic.w	r2, r2, #10
 80018f8:	621a      	str	r2, [r3, #32]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6a12      	ldr	r2, [r2, #32]
 8001904:	621a      	str	r2, [r3, #32]
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	60da      	str	r2, [r3, #12]
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	04816f00 	.word	0x04816f00
 8001924:	3fa18fc5 	.word	0x3fa18fc5
 8001928:	20000484 	.word	0x20000484
 800192c:	20000488 	.word	0x20000488
 8001930:	2000048c 	.word	0x2000048c
 8001934:	20000490 	.word	0x20000490
 8001938:	20000492 	.word	0x20000492
 800193c:	20000328 	.word	0x20000328

08001940 <delay>:

void delay(uint16_t time)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
 __HAL_TIM_SET_COUNTER(&htim4, 0);
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <delay+0x30>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
 while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 8001952:	bf00      	nop
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <delay+0x30>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	429a      	cmp	r2, r3
 800195e:	d3f9      	bcc.n	8001954 <delay+0x14>
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000328 	.word	0x20000328

08001974 <HCSR04_Read>:


void HCSR04_Read (void) //Call when want to get reading from US
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197e:	480b      	ldr	r0, [pc, #44]	; (80019ac <HCSR04_Read+0x38>)
 8001980:	f002 ffec 	bl	800495c <HAL_GPIO_WritePin>
	 delay(20);
 8001984:	2014      	movs	r0, #20
 8001986:	f7ff ffdb 	bl	8001940 <delay>
	 HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001990:	4806      	ldr	r0, [pc, #24]	; (80019ac <HCSR04_Read+0x38>)
 8001992:	f002 ffe3 	bl	800495c <HAL_GPIO_WritePin>
	 __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HCSR04_Read+0x3c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HCSR04_Read+0x3c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0202 	orr.w	r2, r2, #2
 80019a4:	60da      	str	r2, [r3, #12]
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	20000328 	.word	0x20000328

080019b4 <buzzerBeep>:

void buzzerBeep()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer On
 80019b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019bc:	4806      	ldr	r0, [pc, #24]	; (80019d8 <buzzerBeep+0x24>)
 80019be:	f002 ffe6 	bl	800498e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80019c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c6:	f002 fc65 	bl	8004294 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10); //Buzzer Off
 80019ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <buzzerBeep+0x24>)
 80019d0:	f002 ffdd 	bl	800498e <HAL_GPIO_TogglePin>
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40020400 	.word	0x40020400

080019dc <remoteReset>:

void remoteReset()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 80019e0:	f7ff fa80 	bl	8000ee4 <__NVIC_SystemReset>
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <moveCarStraight>:
}

void moveCarStraight(double distance)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	ed87 0b00 	vstr	d0, [r7]
	distance = distance*75;
 80019f2:	a32d      	add	r3, pc, #180	; (adr r3, 8001aa8 <moveCarStraight+0xc0>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019fc:	f7fe fdfc 	bl	80005f8 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2300 	strd	r2, r3, [r7]
	//pwmVal_servo = 140;
	pwmVal_servo = 149;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <moveCarStraight+0xa0>)
 8001a0a:	2295      	movs	r2, #149	; 0x95
 8001a0c:	801a      	strh	r2, [r3, #0]
	//osDelay(50);
	e_brake = 0;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <moveCarStraight+0xa4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <moveCarStraight+0xa8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
	rightEncoderVal = 75000;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <moveCarStraight+0xac>)
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <moveCarStraight+0xb0>)
 8001a1e:	601a      	str	r2, [r3, #0]
	leftEncoderVal = 75000;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <moveCarStraight+0xb4>)
 8001a22:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <moveCarStraight+0xb0>)
 8001a24:	601a      	str	r2, [r3, #0]
	rightTarget = 75000;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <moveCarStraight+0xb8>)
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <moveCarStraight+0xb0>)
 8001a2a:	601a      	str	r2, [r3, #0]
	leftTarget = 75000;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <moveCarStraight+0xbc>)
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	; (8001a98 <moveCarStraight+0xb0>)
 8001a30:	601a      	str	r2, [r3, #0]
	rightTarget += distance;
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <moveCarStraight+0xb8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd74 	bl	8000524 <__aeabi_i2d>
 8001a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a40:	f7fe fc24 	bl	800028c <__adddf3>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f884 	bl	8000b58 <__aeabi_d2iz>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <moveCarStraight+0xb8>)
 8001a54:	6013      	str	r3, [r2, #0]
	leftTarget += distance;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <moveCarStraight+0xbc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd62 	bl	8000524 <__aeabi_i2d>
 8001a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a64:	f7fe fc12 	bl	800028c <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f872 	bl	8000b58 <__aeabi_d2iz>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <moveCarStraight+0xbc>)
 8001a78:	6013      	str	r3, [r2, #0]
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000444 	.word	0x20000444
 8001a90:	20000440 	.word	0x20000440
 8001a94:	20000448 	.word	0x20000448
 8001a98:	000124f8 	.word	0x000124f8
 8001a9c:	2000044c 	.word	0x2000044c
 8001aa0:	20000450 	.word	0x20000450
 8001aa4:	20000454 	.word	0x20000454
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	4052c000 	.word	0x4052c000

08001ab0 <moveCarRight>:
	pwmVal_servo = 149;
	osDelay(300);
}

void moveCarRight(double angle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	ed87 0b00 	vstr	d0, [r7]
	//pwmVal_servo = 205;//195
	pwmVal_servo = 230;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <moveCarRight+0x44>)
 8001abc:	22e6      	movs	r2, #230	; 0xe6
 8001abe:	801a      	strh	r2, [r3, #0]
	osDelay(50);
 8001ac0:	2032      	movs	r0, #50	; 0x32
 8001ac2:	f007 f9ef 	bl	8008ea4 <osDelay>
	e_brake = 0;
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <moveCarRight+0x48>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <moveCarRight+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <moveCarRight+0x50>)
 8001ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001adc:	f7fe fbd4 	bl	8000288 <__aeabi_dsub>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4906      	ldr	r1, [pc, #24]	; (8001b00 <moveCarRight+0x50>)
 8001ae6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000444 	.word	0x20000444
 8001afc:	20000440 	.word	0x20000440
 8001b00:	20000458 	.word	0x20000458

08001b04 <moveCarRight2>:

void moveCarRight2(double angle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	ed87 0b00 	vstr	d0, [r7]
	//pwmVal_servo = 205;//195
	pwmVal_servo = 215; //decrease to fit
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <moveCarRight2+0x44>)
 8001b10:	22d7      	movs	r2, #215	; 0xd7
 8001b12:	801a      	strh	r2, [r3, #0]
	osDelay(50);
 8001b14:	2032      	movs	r0, #50	; 0x32
 8001b16:	f007 f9c5 	bl	8008ea4 <osDelay>
	e_brake = 0;
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <moveCarRight2+0x48>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <moveCarRight2+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <moveCarRight2+0x50>)
 8001b28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b30:	f7fe fbaa 	bl	8000288 <__aeabi_dsub>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4906      	ldr	r1, [pc, #24]	; (8001b54 <moveCarRight2+0x50>)
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000444 	.word	0x20000444
 8001b50:	20000440 	.word	0x20000440
 8001b54:	20000458 	.word	0x20000458

08001b58 <moveCarRight3>:

void moveCarRight3(double angle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	ed87 0b00 	vstr	d0, [r7]
	//pwmVal_servo = 205;//195
	pwmVal_servo = 200; //decrease to fit
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <moveCarRight3+0x44>)
 8001b64:	22c8      	movs	r2, #200	; 0xc8
 8001b66:	801a      	strh	r2, [r3, #0]
	osDelay(50);
 8001b68:	2032      	movs	r0, #50	; 0x32
 8001b6a:	f007 f99b 	bl	8008ea4 <osDelay>
	e_brake = 0;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <moveCarRight3+0x48>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <moveCarRight3+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
	target_angle -= angle;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <moveCarRight3+0x50>)
 8001b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b84:	f7fe fb80 	bl	8000288 <__aeabi_dsub>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4906      	ldr	r1, [pc, #24]	; (8001ba8 <moveCarRight3+0x50>)
 8001b8e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000444 	.word	0x20000444
 8001ba4:	20000440 	.word	0x20000440
 8001ba8:	20000458 	.word	0x20000458

08001bac <moveCarLeft>:

void moveCarLeft(double angle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	ed87 0b00 	vstr	d0, [r7]
	//pwmVal_servo = 85; //85
	pwmVal_servo = 90;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <moveCarLeft+0x44>)
 8001bb8:	225a      	movs	r2, #90	; 0x5a
 8001bba:	801a      	strh	r2, [r3, #0]
	osDelay(50);
 8001bbc:	2032      	movs	r0, #50	; 0x32
 8001bbe:	f007 f971 	bl	8008ea4 <osDelay>
	e_brake = 0;
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <moveCarLeft+0x48>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <moveCarLeft+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <moveCarLeft+0x50>)
 8001bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bd8:	f7fe fb58 	bl	800028c <__adddf3>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4906      	ldr	r1, [pc, #24]	; (8001bfc <moveCarLeft+0x50>)
 8001be2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000444 	.word	0x20000444
 8001bf8:	20000440 	.word	0x20000440
 8001bfc:	20000458 	.word	0x20000458

08001c00 <moveCarLeft2>:

void moveCarLeft2(double angle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	ed87 0b00 	vstr	d0, [r7]
	//pwmVal_servo = 85; //85
	pwmVal_servo = 105; //increase to fit
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <moveCarLeft2+0x44>)
 8001c0c:	2269      	movs	r2, #105	; 0x69
 8001c0e:	801a      	strh	r2, [r3, #0]
	osDelay(50);
 8001c10:	2032      	movs	r0, #50	; 0x32
 8001c12:	f007 f947 	bl	8008ea4 <osDelay>
	e_brake = 0;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <moveCarLeft2+0x48>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <moveCarLeft2+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <moveCarLeft2+0x50>)
 8001c24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c2c:	f7fe fb2e 	bl	800028c <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4906      	ldr	r1, [pc, #24]	; (8001c50 <moveCarLeft2+0x50>)
 8001c36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000444 	.word	0x20000444
 8001c4c:	20000440 	.word	0x20000440
 8001c50:	20000458 	.word	0x20000458

08001c54 <moveCarLeft3>:

void moveCarLeft3(double angle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	ed87 0b00 	vstr	d0, [r7]
	//pwmVal_servo = 85; //85
	pwmVal_servo = 120; //increase to fit
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <moveCarLeft3+0x44>)
 8001c60:	2278      	movs	r2, #120	; 0x78
 8001c62:	801a      	strh	r2, [r3, #0]
	osDelay(50);
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f007 f91d 	bl	8008ea4 <osDelay>
	e_brake = 0;
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <moveCarLeft3+0x48>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
	times_acceptable=0;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <moveCarLeft3+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
	target_angle += angle;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <moveCarLeft3+0x50>)
 8001c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c80:	f7fe fb04 	bl	800028c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4906      	ldr	r1, [pc, #24]	; (8001ca4 <moveCarLeft3+0x50>)
 8001c8a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000444 	.word	0x20000444
 8001ca0:	20000440 	.word	0x20000440
 8001ca4:	20000458 	.word	0x20000458

08001ca8 <moveCarRight90>:
//	osDelay(50);
	//osDelay(500);
}

void moveCarRight90(double angle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	ed87 0b00 	vstr	d0, [r7]
	target_angle=0;
 8001cb2:	4921      	ldr	r1, [pc, #132]	; (8001d38 <moveCarRight90+0x90>)
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9c1 2300 	strd	r2, r3, [r1]
	total_angle=0;
 8001cc0:	491e      	ldr	r1, [pc, #120]	; (8001d3c <moveCarRight90+0x94>)
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c1 2300 	strd	r2, r3, [r1]
	error_angle=0;
 8001cce:	491c      	ldr	r1, [pc, #112]	; (8001d40 <moveCarRight90+0x98>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	e9c1 2300 	strd	r2, r3, [r1]

	e_brake = 0;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <moveCarRight90+0x9c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf2:	f7fe fef3 	bl	8000adc <__aeabi_dcmplt>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <moveCarRight90+0x5a>
		sign=-1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <moveCarRight90+0xa0>)
 8001d04:	2295      	movs	r2, #149	; 0x95
 8001d06:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001d08:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <moveCarRight90+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
	moveCarRight(angle);
 8001d0e:	ed97 0b00 	vldr	d0, [r7]
 8001d12:	f7ff fecd 	bl	8001ab0 <moveCarRight>
	while(finishCheck());
 8001d16:	bf00      	nop
 8001d18:	f000 fa90 	bl	800223c <finishCheck>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1fa      	bne.n	8001d18 <moveCarRight90+0x70>
	osDelay(50);
 8001d22:	2032      	movs	r0, #50	; 0x32
 8001d24:	f007 f8be 	bl	8008ea4 <osDelay>
	pwmVal_servo = 149;
 8001d28:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <moveCarRight90+0xa0>)
 8001d2a:	2295      	movs	r2, #149	; 0x95
 8001d2c:	801a      	strh	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000458 	.word	0x20000458
 8001d3c:	20000460 	.word	0x20000460
 8001d40:	20000468 	.word	0x20000468
 8001d44:	20000444 	.word	0x20000444
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000440 	.word	0x20000440

08001d50 <moveCarRight902>:

void moveCarRight902(double angle)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0b00 	vstr	d0, [r7]

	double target_angle=0;
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_angle=0;
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double error_angle=0;
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	e_brake = 0;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <moveCarRight902+0x88>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d94:	f7fe fea2 	bl	8000adc <__aeabi_dcmplt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <moveCarRight902+0x54>
		sign=-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <moveCarRight902+0x8c>)
 8001da6:	2295      	movs	r2, #149	; 0x95
 8001da8:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <moveCarRight902+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
	moveCarRight2(angle);
 8001db0:	ed97 0b00 	vldr	d0, [r7]
 8001db4:	f7ff fea6 	bl	8001b04 <moveCarRight2>
	while(finishCheck());
 8001db8:	bf00      	nop
 8001dba:	f000 fa3f 	bl	800223c <finishCheck>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1fa      	bne.n	8001dba <moveCarRight902+0x6a>
	osDelay(50);
 8001dc4:	2032      	movs	r0, #50	; 0x32
 8001dc6:	f007 f86d 	bl	8008ea4 <osDelay>
	pwmVal_servo = 149;
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <moveCarRight902+0x8c>)
 8001dcc:	2295      	movs	r2, #149	; 0x95
 8001dce:	801a      	strh	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000444 	.word	0x20000444
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000440 	.word	0x20000440

08001de4 <moveCarRight903>:

void moveCarRight903(double angle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	ed87 0b00 	vstr	d0, [r7]

	double target_angle=0;
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_angle=0;
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double error_angle=0;
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	e_brake = 0;
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <moveCarRight903+0x88>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e28:	f7fe fe58 	bl	8000adc <__aeabi_dcmplt>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <moveCarRight903+0x54>
		sign=-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <moveCarRight903+0x8c>)
 8001e3a:	2295      	movs	r2, #149	; 0x95
 8001e3c:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <moveCarRight903+0x90>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
	moveCarRight3(angle);
 8001e44:	ed97 0b00 	vldr	d0, [r7]
 8001e48:	f7ff fe86 	bl	8001b58 <moveCarRight3>
	while(finishCheck());
 8001e4c:	bf00      	nop
 8001e4e:	f000 f9f5 	bl	800223c <finishCheck>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1fa      	bne.n	8001e4e <moveCarRight903+0x6a>
	osDelay(50);
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f007 f823 	bl	8008ea4 <osDelay>
	pwmVal_servo = 149;
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <moveCarRight903+0x8c>)
 8001e60:	2295      	movs	r2, #149	; 0x95
 8001e62:	801a      	strh	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000444 	.word	0x20000444
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000440 	.word	0x20000440

08001e78 <moveCarLeft90>:


void moveCarLeft90(double angle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	ed87 0b00 	vstr	d0, [r7]

	double target_angle=0;
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_angle=0;
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double error_angle=0;
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	e_brake = 0;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <moveCarLeft90+0x88>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ebc:	f7fe fe0e 	bl	8000adc <__aeabi_dcmplt>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <moveCarLeft90+0x54>
		sign=-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <moveCarLeft90+0x8c>)
 8001ece:	2295      	movs	r2, #149	; 0x95
 8001ed0:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <moveCarLeft90+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
	moveCarLeft(angle);
 8001ed8:	ed97 0b00 	vldr	d0, [r7]
 8001edc:	f7ff fe66 	bl	8001bac <moveCarLeft>
	while(finishCheck());
 8001ee0:	bf00      	nop
 8001ee2:	f000 f9ab 	bl	800223c <finishCheck>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1fa      	bne.n	8001ee2 <moveCarLeft90+0x6a>
	osDelay(50);
 8001eec:	2032      	movs	r0, #50	; 0x32
 8001eee:	f006 ffd9 	bl	8008ea4 <osDelay>
	pwmVal_servo = 149;
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <moveCarLeft90+0x8c>)
 8001ef4:	2295      	movs	r2, #149	; 0x95
 8001ef6:	801a      	strh	r2, [r3, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000444 	.word	0x20000444
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000440 	.word	0x20000440

08001f0c <moveCarLeft902>:

void moveCarLeft902(double angle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	ed87 0b00 	vstr	d0, [r7]
	double target_angle=0;
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_angle=0;
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double error_angle=0;
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	e9c7 2304 	strd	r2, r3, [r7, #16]

	e_brake = 0;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <moveCarLeft902+0x88>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f50:	f7fe fdc4 	bl	8000adc <__aeabi_dcmplt>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <moveCarLeft902+0x54>
		sign=-1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5e:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <moveCarLeft902+0x8c>)
 8001f62:	2295      	movs	r2, #149	; 0x95
 8001f64:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <moveCarLeft902+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
	moveCarLeft2(angle);
 8001f6c:	ed97 0b00 	vldr	d0, [r7]
 8001f70:	f7ff fe46 	bl	8001c00 <moveCarLeft2>
	while(finishCheck());
 8001f74:	bf00      	nop
 8001f76:	f000 f961 	bl	800223c <finishCheck>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1fa      	bne.n	8001f76 <moveCarLeft902+0x6a>
	osDelay(50);
 8001f80:	2032      	movs	r0, #50	; 0x32
 8001f82:	f006 ff8f 	bl	8008ea4 <osDelay>
	pwmVal_servo = 149;
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <moveCarLeft902+0x8c>)
 8001f88:	2295      	movs	r2, #149	; 0x95
 8001f8a:	801a      	strh	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000444 	.word	0x20000444
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000440 	.word	0x20000440

08001fa0 <moveCarLeft903>:

void moveCarLeft903(double angle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
	double target_angle=0;
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double total_angle=0;
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double error_angle=0;
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9c7 2304 	strd	r2, r3, [r7, #16]

	e_brake = 0;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <moveCarLeft903+0x88>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
	int sign = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
	if(angle<0){
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fe4:	f7fe fd7a 	bl	8000adc <__aeabi_dcmplt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <moveCarLeft903+0x54>
		sign=-1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	60fb      	str	r3, [r7, #12]
	}
	pwmVal_servo = 149; //149
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <moveCarLeft903+0x8c>)
 8001ff6:	2295      	movs	r2, #149	; 0x95
 8001ff8:	801a      	strh	r2, [r3, #0]
	times_acceptable=0;
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <moveCarLeft903+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
	moveCarLeft3(angle);
 8002000:	ed97 0b00 	vldr	d0, [r7]
 8002004:	f7ff fe26 	bl	8001c54 <moveCarLeft3>
	while(finishCheck());
 8002008:	bf00      	nop
 800200a:	f000 f917 	bl	800223c <finishCheck>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1fa      	bne.n	800200a <moveCarLeft903+0x6a>
	osDelay(50);
 8002014:	2032      	movs	r0, #50	; 0x32
 8002016:	f006 ff45 	bl	8008ea4 <osDelay>
	pwmVal_servo = 149;
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <moveCarLeft903+0x8c>)
 800201c:	2295      	movs	r2, #149	; 0x95
 800201e:	801a      	strh	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000444 	.word	0x20000444
 800202c:	20000000 	.word	0x20000000
 8002030:	20000440 	.word	0x20000440

08002034 <PID_Control>:

int PID_Control(int error, int right)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
	if(right){//rightMotor
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d018      	beq.n	8002076 <PID_Control+0x42>
		if(error>0){//go forward
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	dd0a      	ble.n	8002060 <PID_Control+0x2c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 800204a:	2201      	movs	r2, #1
 800204c:	2110      	movs	r1, #16
 800204e:	4835      	ldr	r0, [pc, #212]	; (8002124 <PID_Control+0xf0>)
 8002050:	f002 fc84 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	2120      	movs	r1, #32
 8002058:	4832      	ldr	r0, [pc, #200]	; (8002124 <PID_Control+0xf0>)
 800205a:	f002 fc7f 	bl	800495c <HAL_GPIO_WritePin>
 800205e:	e022      	b.n	80020a6 <PID_Control+0x72>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	482f      	ldr	r0, [pc, #188]	; (8002124 <PID_Control+0xf0>)
 8002066:	f002 fc79 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800206a:	2201      	movs	r2, #1
 800206c:	2120      	movs	r1, #32
 800206e:	482d      	ldr	r0, [pc, #180]	; (8002124 <PID_Control+0xf0>)
 8002070:	f002 fc74 	bl	800495c <HAL_GPIO_WritePin>
 8002074:	e017      	b.n	80020a6 <PID_Control+0x72>
		}
	}else{//leftMotor
		if(error>0){//go forward
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	dd0a      	ble.n	8002092 <PID_Control+0x5e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 800207c:	2201      	movs	r2, #1
 800207e:	2108      	movs	r1, #8
 8002080:	4828      	ldr	r0, [pc, #160]	; (8002124 <PID_Control+0xf0>)
 8002082:	f002 fc6b 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	2104      	movs	r1, #4
 800208a:	4826      	ldr	r0, [pc, #152]	; (8002124 <PID_Control+0xf0>)
 800208c:	f002 fc66 	bl	800495c <HAL_GPIO_WritePin>
 8002090:	e009      	b.n	80020a6 <PID_Control+0x72>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8002092:	2200      	movs	r2, #0
 8002094:	2108      	movs	r1, #8
 8002096:	4823      	ldr	r0, [pc, #140]	; (8002124 <PID_Control+0xf0>)
 8002098:	f002 fc60 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	2104      	movs	r1, #4
 80020a0:	4820      	ldr	r0, [pc, #128]	; (8002124 <PID_Control+0xf0>)
 80020a2:	f002 fc5b 	bl	800495c <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bfb8      	it	lt
 80020ac:	425b      	neglt	r3, r3
 80020ae:	607b      	str	r3, [r7, #4]
	if(error > 2000){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020b6:	dd02      	ble.n	80020be <PID_Control+0x8a>
		return 3000;
 80020b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80020bc:	e02d      	b.n	800211a <PID_Control+0xe6>
	}else if(error > 500){
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020c4:	dd02      	ble.n	80020cc <PID_Control+0x98>
		return 2000;
 80020c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020ca:	e026      	b.n	800211a <PID_Control+0xe6>
	}else if(error > 200){
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2bc8      	cmp	r3, #200	; 0xc8
 80020d0:	dd02      	ble.n	80020d8 <PID_Control+0xa4>
		return 1400;
 80020d2:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80020d6:	e020      	b.n	800211a <PID_Control+0xe6>
	}else if(error > 100){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	dd02      	ble.n	80020e4 <PID_Control+0xb0>
		return 1000;
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	e01a      	b.n	800211a <PID_Control+0xe6>
	}else if(error > 2){
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	dd07      	ble.n	80020fa <PID_Control+0xc6>
		times_acceptable++;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <PID_Control+0xf4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <PID_Control+0xf4>)
 80020f2:	6013      	str	r3, [r2, #0]
		return 500;
 80020f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020f8:	e00f      	b.n	800211a <PID_Control+0xe6>
	}else if(error >=1){
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	dd06      	ble.n	800210e <PID_Control+0xda>
		times_acceptable++;
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <PID_Control+0xf4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <PID_Control+0xf4>)
 8002108:	6013      	str	r3, [r2, #0]
		return 0;
 800210a:	2300      	movs	r3, #0
 800210c:	e005      	b.n	800211a <PID_Control+0xe6>
	}else{
		times_acceptable++;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <PID_Control+0xf4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <PID_Control+0xf4>)
 8002116:	6013      	str	r3, [r2, #0]
		return 0;
 8002118:	2300      	movs	r3, #0
	}
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020000 	.word	0x40020000
 8002128:	20000440 	.word	0x20000440

0800212c <PID_Angle>:

int PID_Angle(double errord, int right)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	ed87 0b02 	vstr	d0, [r7, #8]
 8002136:	6078      	str	r0, [r7, #4]
	int error = (int)(errord*10);
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <PID_Angle+0x104>)
 800213e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002142:	f7fe fa59 	bl	80005f8 <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fd03 	bl	8000b58 <__aeabi_d2iz>
 8002152:	4603      	mov	r3, r0
 8002154:	617b      	str	r3, [r7, #20]
	if(right){//rightMotor
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d018      	beq.n	800218e <PID_Angle+0x62>
		if(error>0){//go forward
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	dd0a      	ble.n	8002178 <PID_Angle+0x4c>
			HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8002162:	2201      	movs	r2, #1
 8002164:	2110      	movs	r1, #16
 8002166:	4833      	ldr	r0, [pc, #204]	; (8002234 <PID_Angle+0x108>)
 8002168:	f002 fbf8 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	2120      	movs	r1, #32
 8002170:	4830      	ldr	r0, [pc, #192]	; (8002234 <PID_Angle+0x108>)
 8002172:	f002 fbf3 	bl	800495c <HAL_GPIO_WritePin>
 8002176:	e022      	b.n	80021be <PID_Angle+0x92>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 8002178:	2200      	movs	r2, #0
 800217a:	2110      	movs	r1, #16
 800217c:	482d      	ldr	r0, [pc, #180]	; (8002234 <PID_Angle+0x108>)
 800217e:	f002 fbed 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	2120      	movs	r1, #32
 8002186:	482b      	ldr	r0, [pc, #172]	; (8002234 <PID_Angle+0x108>)
 8002188:	f002 fbe8 	bl	800495c <HAL_GPIO_WritePin>
 800218c:	e017      	b.n	80021be <PID_Angle+0x92>
		}
	}else{//leftMotor
		if(error<0){//go forward
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da0a      	bge.n	80021aa <PID_Angle+0x7e>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 8002194:	2201      	movs	r2, #1
 8002196:	2108      	movs	r1, #8
 8002198:	4826      	ldr	r0, [pc, #152]	; (8002234 <PID_Angle+0x108>)
 800219a:	f002 fbdf 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	2104      	movs	r1, #4
 80021a2:	4824      	ldr	r0, [pc, #144]	; (8002234 <PID_Angle+0x108>)
 80021a4:	f002 fbda 	bl	800495c <HAL_GPIO_WritePin>
 80021a8:	e009      	b.n	80021be <PID_Angle+0x92>
		}else{//go backward
		    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 80021aa:	2200      	movs	r2, #0
 80021ac:	2108      	movs	r1, #8
 80021ae:	4821      	ldr	r0, [pc, #132]	; (8002234 <PID_Angle+0x108>)
 80021b0:	f002 fbd4 	bl	800495c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2104      	movs	r1, #4
 80021b8:	481e      	ldr	r0, [pc, #120]	; (8002234 <PID_Angle+0x108>)
 80021ba:	f002 fbcf 	bl	800495c <HAL_GPIO_WritePin>
		}
	}

	error = abs(error);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bfb8      	it	lt
 80021c4:	425b      	neglt	r3, r3
 80021c6:	617b      	str	r3, [r7, #20]
	if(error > 300){
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80021ce:	dd02      	ble.n	80021d6 <PID_Angle+0xaa>
		return 3000;
 80021d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021d4:	e028      	b.n	8002228 <PID_Angle+0xfc>
	}else if(error > 200){
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2bc8      	cmp	r3, #200	; 0xc8
 80021da:	dd02      	ble.n	80021e2 <PID_Angle+0xb6>
		return 2000;
 80021dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021e0:	e022      	b.n	8002228 <PID_Angle+0xfc>
	}else if(error > 150){
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b96      	cmp	r3, #150	; 0x96
 80021e6:	dd02      	ble.n	80021ee <PID_Angle+0xc2>
		return 1600;
 80021e8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80021ec:	e01c      	b.n	8002228 <PID_Angle+0xfc>
	}else if(error > 100){
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b64      	cmp	r3, #100	; 0x64
 80021f2:	dd02      	ble.n	80021fa <PID_Angle+0xce>
		return 1400;
 80021f4:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80021f8:	e016      	b.n	8002228 <PID_Angle+0xfc>
	}else if(error >10){
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b0a      	cmp	r3, #10
 80021fe:	dd02      	ble.n	8002206 <PID_Angle+0xda>
		return 1000;
 8002200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002204:	e010      	b.n	8002228 <PID_Angle+0xfc>
	}else if(error >=2){
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b01      	cmp	r3, #1
 800220a:	dd07      	ble.n	800221c <PID_Angle+0xf0>
		times_acceptable++;
 800220c:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <PID_Angle+0x10c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <PID_Angle+0x10c>)
 8002214:	6013      	str	r3, [r2, #0]
		return 600;
 8002216:	f44f 7316 	mov.w	r3, #600	; 0x258
 800221a:	e005      	b.n	8002228 <PID_Angle+0xfc>
	}else{
		times_acceptable++;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <PID_Angle+0x10c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <PID_Angle+0x10c>)
 8002224:	6013      	str	r3, [r2, #0]
		return 0;
 8002226:	2300      	movs	r3, #0
	}
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40240000 	.word	0x40240000
 8002234:	40020000 	.word	0x40020000
 8002238:	20000440 	.word	0x20000440

0800223c <finishCheck>:

int finishCheck(){
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	if (times_acceptable > 20){
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <finishCheck+0x48>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b14      	cmp	r3, #20
 8002246:	dd1a      	ble.n	800227e <finishCheck+0x42>
		e_brake = 1;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <finishCheck+0x4c>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]
		pwmVal_L = pwmVal_R = 0;
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <finishCheck+0x50>)
 8002250:	2200      	movs	r2, #0
 8002252:	801a      	strh	r2, [r3, #0]
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <finishCheck+0x50>)
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <finishCheck+0x54>)
 800225a:	801a      	strh	r2, [r3, #0]
		leftTarget = leftEncoderVal;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <finishCheck+0x58>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <finishCheck+0x5c>)
 8002262:	6013      	str	r3, [r2, #0]
		rightTarget = rightEncoderVal;
 8002264:	4b0d      	ldr	r3, [pc, #52]	; (800229c <finishCheck+0x60>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <finishCheck+0x64>)
 800226a:	6013      	str	r3, [r2, #0]
		times_acceptable = 0;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <finishCheck+0x48>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
	    osDelay(300);
 8002272:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002276:	f006 fe15 	bl	8008ea4 <osDelay>

		return 0;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <finishCheck+0x44>
	}
	return 1;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000440 	.word	0x20000440
 8002288:	20000444 	.word	0x20000444
 800228c:	2000043c 	.word	0x2000043c
 8002290:	2000043e 	.word	0x2000043e
 8002294:	2000044c 	.word	0x2000044c
 8002298:	20000454 	.word	0x20000454
 800229c:	20000448 	.word	0x20000448
 80022a0:	20000450 	.word	0x20000450

080022a4 <readByte>:


void readByte(uint8_t addr, uint8_t* data){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
	gyroBuffer[0] = addr;
 80022b0:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <readByte+0x4c>)
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress<<1, gyroBuffer, 1, 10);
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <readByte+0x50>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	b299      	uxth	r1, r3
 80022c0:	230a      	movs	r3, #10
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2301      	movs	r3, #1
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <readByte+0x4c>)
 80022c8:	480b      	ldr	r0, [pc, #44]	; (80022f8 <readByte+0x54>)
 80022ca:	f002 fcbf 	bl	8004c4c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddress<<1, data, 2, 20);
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <readByte+0x50>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	b299      	uxth	r1, r3
 80022d8:	2314      	movs	r3, #20
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2302      	movs	r3, #2
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <readByte+0x54>)
 80022e2:	f002 fdb1 	bl	8004e48 <HAL_I2C_Master_Receive>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000470 	.word	0x20000470
 80022f4:	20000002 	.word	0x20000002
 80022f8:	200001fc 	.word	0x200001fc

080022fc <writeByte>:

void writeByte(uint8_t addr, uint8_t data){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af02      	add	r7, sp, #8
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
	gyroBuffer[0] = addr;
 800230c:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <writeByte+0x3c>)
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	7013      	strb	r3, [r2, #0]
	gyroBuffer[1] = data;
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <writeByte+0x3c>)
 8002314:	79bb      	ldrb	r3, [r7, #6]
 8002316:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <writeByte+0x40>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	b299      	uxth	r1, r3
 8002322:	2314      	movs	r3, #20
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2302      	movs	r3, #2
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <writeByte+0x3c>)
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <writeByte+0x44>)
 800232c:	f002 fc8e 	bl	8004c4c <HAL_I2C_Master_Transmit>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000470 	.word	0x20000470
 800233c:	20000002 	.word	0x20000002
 8002340:	200001fc 	.word	0x200001fc

08002344 <gyroInit>:

void gyroInit(){
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8002348:	2100      	movs	r1, #0
 800234a:	2006      	movs	r0, #6
 800234c:	f7ff ffd6 	bl	80022fc <writeByte>
	osDelay(10);
 8002350:	200a      	movs	r0, #10
 8002352:	f006 fda7 	bl	8008ea4 <osDelay>
	writeByte(0x03, 0x80);
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	2003      	movs	r0, #3
 800235a:	f7ff ffcf 	bl	80022fc <writeByte>
	osDelay(10);
 800235e:	200a      	movs	r0, #10
 8002360:	f006 fda0 	bl	8008ea4 <osDelay>
	writeByte(0x07, 0x07);
 8002364:	2107      	movs	r1, #7
 8002366:	2007      	movs	r0, #7
 8002368:	f7ff ffc8 	bl	80022fc <writeByte>
	osDelay(10);
 800236c:	200a      	movs	r0, #10
 800236e:	f006 fd99 	bl	8008ea4 <osDelay>
	writeByte(0x06, 0x01);
 8002372:	2101      	movs	r1, #1
 8002374:	2006      	movs	r0, #6
 8002376:	f7ff ffc1 	bl	80022fc <writeByte>
	osDelay(10);
 800237a:	200a      	movs	r0, #10
 800237c:	f006 fd92 	bl	8008ea4 <osDelay>
	writeByte(0x7F, 0x20);
 8002380:	2120      	movs	r1, #32
 8002382:	207f      	movs	r0, #127	; 0x7f
 8002384:	f7ff ffba 	bl	80022fc <writeByte>
	osDelay(10);
 8002388:	200a      	movs	r0, #10
 800238a:	f006 fd8b 	bl	8008ea4 <osDelay>
	writeByte(0x01, 0x2F);
 800238e:	212f      	movs	r1, #47	; 0x2f
 8002390:	2001      	movs	r0, #1
 8002392:	f7ff ffb3 	bl	80022fc <writeByte>
	osDelay(10);
 8002396:	200a      	movs	r0, #10
 8002398:	f006 fd84 	bl	8008ea4 <osDelay>
	writeByte(0x0, 0x00);
 800239c:	2100      	movs	r1, #0
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff ffac 	bl	80022fc <writeByte>
	osDelay(10);
 80023a4:	200a      	movs	r0, #10
 80023a6:	f006 fd7d 	bl	8008ea4 <osDelay>
	writeByte(0x7F, 0x00);
 80023aa:	2100      	movs	r1, #0
 80023ac:	207f      	movs	r0, #127	; 0x7f
 80023ae:	f7ff ffa5 	bl	80022fc <writeByte>
	osDelay(10);
 80023b2:	200a      	movs	r0, #10
 80023b4:	f006 fd76 	bl	8008ea4 <osDelay>
	writeByte(0x07, 0x00);
 80023b8:	2100      	movs	r1, #0
 80023ba:	2007      	movs	r0, #7
 80023bc:	f7ff ff9e 	bl	80022fc <writeByte>
	osDelay(10);
 80023c0:	200a      	movs	r0, #10
 80023c2:	f006 fd6f 	bl	8008ea4 <osDelay>
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t msg [20];
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_1);  // HC-SR04 Sensor
 80023d4:	2100      	movs	r1, #0
 80023d6:	4807      	ldr	r0, [pc, #28]	; (80023f4 <StartDefaultTask+0x28>)
 80023d8:	f004 f8ca 	bl	8006570 <HAL_TIM_IC_Start_IT>


  /* Infinite loop */
  uint8_t ch = 'A';
 80023dc:	2341      	movs	r3, #65	; 0x41
 80023de:	77fb      	strb	r3, [r7, #31]
//	    if (ch <'F'){
//	    	ch++;
//	    }else{
//	    	ch = 'A';
//	    }
	    osDelay(2000);
 80023e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023e4:	f006 fd5e 	bl	8008ea4 <osDelay>

		HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 80023e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <StartDefaultTask+0x2c>)
 80023ee:	f002 face 	bl	800498e <HAL_GPIO_TogglePin>
	    osDelay(2000);
 80023f2:	e7f5      	b.n	80023e0 <StartDefaultTask+0x14>
 80023f4:	20000328 	.word	0x20000328
 80023f8:	40021000 	.word	0x40021000
 80023fc:	00000000 	.word	0x00000000

08002400 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
	pwmVal_R = 0;
 8002408:	4bab      	ldr	r3, [pc, #684]	; (80026b8 <StartMotorTask+0x2b8>)
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
	pwmVal_L = 0;
 800240e:	4bab      	ldr	r3, [pc, #684]	; (80026bc <StartMotorTask+0x2bc>)
 8002410:	2200      	movs	r2, #0
 8002412:	801a      	strh	r2, [r3, #0]
	int straightCorrection=0;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002418:	2100      	movs	r1, #0
 800241a:	48a9      	ldr	r0, [pc, #676]	; (80026c0 <StartMotorTask+0x2c0>)
 800241c:	f003 ff90 	bl	8006340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002420:	2104      	movs	r1, #4
 8002422:	48a7      	ldr	r0, [pc, #668]	; (80026c0 <StartMotorTask+0x2c0>)
 8002424:	f003 ff8c 	bl	8006340 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002428:	210c      	movs	r1, #12
 800242a:	48a6      	ldr	r0, [pc, #664]	; (80026c4 <StartMotorTask+0x2c4>)
 800242c:	f003 ff88 	bl	8006340 <HAL_TIM_PWM_Start>
	htim1.Instance->CCR4 = 149; //Centre
 8002430:	4ba4      	ldr	r3, [pc, #656]	; (80026c4 <StartMotorTask+0x2c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2295      	movs	r2, #149	; 0x95
 8002436:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8002438:	2201      	movs	r2, #1
 800243a:	2110      	movs	r1, #16
 800243c:	48a2      	ldr	r0, [pc, #648]	; (80026c8 <StartMotorTask+0x2c8>)
 800243e:	f002 fa8d 	bl	800495c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2120      	movs	r1, #32
 8002446:	48a0      	ldr	r0, [pc, #640]	; (80026c8 <StartMotorTask+0x2c8>)
 8002448:	f002 fa88 	bl	800495c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A - forward
 800244c:	2201      	movs	r2, #1
 800244e:	2108      	movs	r1, #8
 8002450:	489d      	ldr	r0, [pc, #628]	; (80026c8 <StartMotorTask+0x2c8>)
 8002452:	f002 fa83 	bl	800495c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	2104      	movs	r1, #4
 800245a:	489b      	ldr	r0, [pc, #620]	; (80026c8 <StartMotorTask+0x2c8>)
 800245c:	f002 fa7e 	bl	800495c <HAL_GPIO_WritePin>
	osDelay(1000);
 8002460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002464:	f006 fd1e 	bl	8008ea4 <osDelay>


  /* Infinite loop */
  for(;;)
  {
		htim1.Instance->CCR4 = pwmVal_servo;
 8002468:	4b98      	ldr	r3, [pc, #608]	; (80026cc <StartMotorTask+0x2cc>)
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	4b95      	ldr	r3, [pc, #596]	; (80026c4 <StartMotorTask+0x2c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
		double error_angle = target_angle - total_angle;
 8002472:	4b97      	ldr	r3, [pc, #604]	; (80026d0 <StartMotorTask+0x2d0>)
 8002474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002478:	4b96      	ldr	r3, [pc, #600]	; (80026d4 <StartMotorTask+0x2d4>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fd ff03 	bl	8000288 <__aeabi_dsub>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	e9c7 2302 	strd	r2, r3, [r7, #8]
//		if(aRxBuffer[0] = ' '){
//			pwmVal_L = pwmVal_R = 0;
//
//		}else
			if (pwmVal_servo < 127){ //106 //TURN LEFT
 800248a:	4b90      	ldr	r3, [pc, #576]	; (80026cc <StartMotorTask+0x2cc>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	2b7e      	cmp	r3, #126	; 0x7e
 8002490:	d84c      	bhi.n	800252c <StartMotorTask+0x12c>
			pwmVal_R = PID_Angle(error_angle, 1)*1.072;  //right is master
 8002492:	2001      	movs	r0, #1
 8002494:	ed97 0b02 	vldr	d0, [r7, #8]
 8002498:	f7ff fe48 	bl	800212c <PID_Angle>
 800249c:	4603      	mov	r3, r0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe f840 	bl	8000524 <__aeabi_i2d>
 80024a4:	a380      	add	r3, pc, #512	; (adr r3, 80026a8 <StartMotorTask+0x2a8>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fe f8a5 	bl	80005f8 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe fb77 	bl	8000ba8 <__aeabi_d2uiz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b7e      	ldr	r3, [pc, #504]	; (80026b8 <StartMotorTask+0x2b8>)
 80024c0:	801a      	strh	r2, [r3, #0]
			pwmVal_L = pwmVal_R*(0.59); //left is slave
 80024c2:	4b7d      	ldr	r3, [pc, #500]	; (80026b8 <StartMotorTask+0x2b8>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f82c 	bl	8000524 <__aeabi_i2d>
 80024cc:	a378      	add	r3, pc, #480	; (adr r3, 80026b0 <StartMotorTask+0x2b0>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fe f891 	bl	80005f8 <__aeabi_dmul>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe fb63 	bl	8000ba8 <__aeabi_d2uiz>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b75      	ldr	r3, [pc, #468]	; (80026bc <StartMotorTask+0x2bc>)
 80024e8:	801a      	strh	r2, [r3, #0]

			if(error_angle>0){
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024f6:	f7fe fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <StartMotorTask+0x116>
				//go forward
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel A- forward
 8002500:	2201      	movs	r2, #1
 8002502:	2108      	movs	r1, #8
 8002504:	4870      	ldr	r0, [pc, #448]	; (80026c8 <StartMotorTask+0x2c8>)
 8002506:	f002 fa29 	bl	800495c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2104      	movs	r1, #4
 800250e:	486e      	ldr	r0, [pc, #440]	; (80026c8 <StartMotorTask+0x2c8>)
 8002510:	f002 fa24 	bl	800495c <HAL_GPIO_WritePin>
 8002514:	e14f      	b.n	80027b6 <StartMotorTask+0x3b6>
			}
			else{
				//go backward
			    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel A - reverse
 8002516:	2200      	movs	r2, #0
 8002518:	2108      	movs	r1, #8
 800251a:	486b      	ldr	r0, [pc, #428]	; (80026c8 <StartMotorTask+0x2c8>)
 800251c:	f002 fa1e 	bl	800495c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002520:	2201      	movs	r2, #1
 8002522:	2104      	movs	r1, #4
 8002524:	4868      	ldr	r0, [pc, #416]	; (80026c8 <StartMotorTask+0x2c8>)
 8002526:	f002 fa19 	bl	800495c <HAL_GPIO_WritePin>
 800252a:	e144      	b.n	80027b6 <StartMotorTask+0x3b6>
			}
		}

		else if (pwmVal_servo > 189){ //230 //TURN RIGHT
 800252c:	4b67      	ldr	r3, [pc, #412]	; (80026cc <StartMotorTask+0x2cc>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	2bbd      	cmp	r3, #189	; 0xbd
 8002532:	d93d      	bls.n	80025b0 <StartMotorTask+0x1b0>
			pwmVal_L = PID_Angle(error_angle, 0);
 8002534:	2000      	movs	r0, #0
 8002536:	ed97 0b02 	vldr	d0, [r7, #8]
 800253a:	f7ff fdf7 	bl	800212c <PID_Angle>
 800253e:	4603      	mov	r3, r0
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <StartMotorTask+0x2bc>)
 8002544:	801a      	strh	r2, [r3, #0]
			pwmVal_R = pwmVal_L*(0.59); //right is slave
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <StartMotorTask+0x2bc>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd ffea 	bl	8000524 <__aeabi_i2d>
 8002550:	a357      	add	r3, pc, #348	; (adr r3, 80026b0 <StartMotorTask+0x2b0>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f84f 	bl	80005f8 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	f7fe fb21 	bl	8000ba8 <__aeabi_d2uiz>
 8002566:	4603      	mov	r3, r0
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <StartMotorTask+0x2b8>)
 800256c:	801a      	strh	r2, [r3, #0]

			if(error_angle<0){
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257a:	f7fe faaf 	bl	8000adc <__aeabi_dcmplt>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <StartMotorTask+0x19a>
				//go forward
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET); // set direction of rotation for wheel B- forward
 8002584:	2201      	movs	r2, #1
 8002586:	2110      	movs	r1, #16
 8002588:	484f      	ldr	r0, [pc, #316]	; (80026c8 <StartMotorTask+0x2c8>)
 800258a:	f002 f9e7 	bl	800495c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	2120      	movs	r1, #32
 8002592:	484d      	ldr	r0, [pc, #308]	; (80026c8 <StartMotorTask+0x2c8>)
 8002594:	f002 f9e2 	bl	800495c <HAL_GPIO_WritePin>
 8002598:	e10d      	b.n	80027b6 <StartMotorTask+0x3b6>
			}
			else{
				//go backward
			    HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET); // set direction of rotation for wheel B - reverse
 800259a:	2200      	movs	r2, #0
 800259c:	2110      	movs	r1, #16
 800259e:	484a      	ldr	r0, [pc, #296]	; (80026c8 <StartMotorTask+0x2c8>)
 80025a0:	f002 f9dc 	bl	800495c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80025a4:	2201      	movs	r2, #1
 80025a6:	2120      	movs	r1, #32
 80025a8:	4847      	ldr	r0, [pc, #284]	; (80026c8 <StartMotorTask+0x2c8>)
 80025aa:	f002 f9d7 	bl	800495c <HAL_GPIO_WritePin>
 80025ae:	e102      	b.n	80027b6 <StartMotorTask+0x3b6>
		}

		else {


			pwmVal_R = PID_Control(leftTarget - leftEncoderVal, 0)*1.072;
 80025b0:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <StartMotorTask+0x2d8>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b49      	ldr	r3, [pc, #292]	; (80026dc <StartMotorTask+0x2dc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd39 	bl	8002034 <PID_Control>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ffad 	bl	8000524 <__aeabi_i2d>
 80025ca:	a337      	add	r3, pc, #220	; (adr r3, 80026a8 <StartMotorTask+0x2a8>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f812 	bl	80005f8 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fae4 	bl	8000ba8 <__aeabi_d2uiz>
 80025e0:	4603      	mov	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <StartMotorTask+0x2b8>)
 80025e6:	801a      	strh	r2, [r3, #0]
			if (abs(leftTarget - leftEncoderVal)>abs(rightTarget - rightEncoderVal)){
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <StartMotorTask+0x2d8>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <StartMotorTask+0x2dc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80025f6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <StartMotorTask+0x2e0>)
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <StartMotorTask+0x2e4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1acb      	subs	r3, r1, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	bfb8      	it	lt
 8002608:	425b      	neglt	r3, r3
 800260a:	429a      	cmp	r2, r3
 800260c:	dd03      	ble.n	8002616 <StartMotorTask+0x216>
				straightCorrection++;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e002      	b.n	800261c <StartMotorTask+0x21c>
			}else{ straightCorrection--;}
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3b01      	subs	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
			if (abs(leftTarget - leftEncoderVal)<100){
 800261c:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <StartMotorTask+0x2d8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <StartMotorTask+0x2dc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800262a:	db08      	blt.n	800263e <StartMotorTask+0x23e>
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <StartMotorTask+0x2d8>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <StartMotorTask+0x2dc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b63      	cmp	r3, #99	; 0x63
 8002638:	dc01      	bgt.n	800263e <StartMotorTask+0x23e>
				straightCorrection=0;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
			}
			pwmVal_L = PID_Control(rightTarget - rightEncoderVal, 1)+straightCorrection;
 800263e:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <StartMotorTask+0x2e0>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <StartMotorTask+0x2e4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fcf2 	bl	8002034 <PID_Control>
 8002650:	4603      	mov	r3, r0
 8002652:	b29a      	uxth	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	b29b      	uxth	r3, r3
 8002658:	4413      	add	r3, r2
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <StartMotorTask+0x2bc>)
 800265e:	801a      	strh	r2, [r3, #0]


			if ((leftTarget - leftEncoderVal)<0){
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <StartMotorTask+0x2d8>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <StartMotorTask+0x2dc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	da64      	bge.n	8002738 <StartMotorTask+0x338>
				if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <StartMotorTask+0x2e8>)
 8002674:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002678:	f7fe fa4e 	bl	8000b18 <__aeabi_dcmpgt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <StartMotorTask+0x28a>
							pwmVal_servo=((19*5)/5 + 149);
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <StartMotorTask+0x2cc>)
 8002684:	22a8      	movs	r2, #168	; 0xa8
 8002686:	801a      	strh	r2, [r3, #0]
 8002688:	e095      	b.n	80027b6 <StartMotorTask+0x3b6>
						}
						else if(error_angle<-5){
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <StartMotorTask+0x2ec>)
 8002690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002694:	f7fe fa22 	bl	8000adc <__aeabi_dcmplt>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d028      	beq.n	80026f0 <StartMotorTask+0x2f0>
							pwmVal_servo=((-19*5)/5 + 149);
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <StartMotorTask+0x2cc>)
 80026a0:	2282      	movs	r2, #130	; 0x82
 80026a2:	801a      	strh	r2, [r3, #0]
 80026a4:	e087      	b.n	80027b6 <StartMotorTask+0x3b6>
 80026a6:	bf00      	nop
 80026a8:	78d4fdf4 	.word	0x78d4fdf4
 80026ac:	3ff126e9 	.word	0x3ff126e9
 80026b0:	ae147ae1 	.word	0xae147ae1
 80026b4:	3fe2e147 	.word	0x3fe2e147
 80026b8:	2000043c 	.word	0x2000043c
 80026bc:	2000043e 	.word	0x2000043e
 80026c0:	20000370 	.word	0x20000370
 80026c4:	20000250 	.word	0x20000250
 80026c8:	40020000 	.word	0x40020000
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000458 	.word	0x20000458
 80026d4:	20000460 	.word	0x20000460
 80026d8:	20000454 	.word	0x20000454
 80026dc:	2000044c 	.word	0x2000044c
 80026e0:	20000450 	.word	0x20000450
 80026e4:	20000448 	.word	0x20000448
 80026e8:	40140000 	.word	0x40140000
 80026ec:	c0140000 	.word	0xc0140000
						}else{
							pwmVal_servo=((19*error_angle)/5 + 149);
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	4b5a      	ldr	r3, [pc, #360]	; (8002860 <StartMotorTask+0x460>)
 80026f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026fa:	f7fd ff7d 	bl	80005f8 <__aeabi_dmul>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	4b56      	ldr	r3, [pc, #344]	; (8002864 <StartMotorTask+0x464>)
 800270c:	f7fe f89e 	bl	800084c <__aeabi_ddiv>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	a34d      	add	r3, pc, #308	; (adr r3, 8002850 <StartMotorTask+0x450>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd fdb5 	bl	800028c <__adddf3>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe fa3d 	bl	8000ba8 <__aeabi_d2uiz>
 800272e:	4603      	mov	r3, r0
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <StartMotorTask+0x468>)
 8002734:	801a      	strh	r2, [r3, #0]
 8002736:	e03e      	b.n	80027b6 <StartMotorTask+0x3b6>
						}

			}else{
				if (error_angle>5){ // if turn left, 106. right 230. left +. right -.
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	4b49      	ldr	r3, [pc, #292]	; (8002864 <StartMotorTask+0x464>)
 800273e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002742:	f7fe f9e9 	bl	8000b18 <__aeabi_dcmpgt>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <StartMotorTask+0x354>
							pwmVal_servo=((-19*5)/5 + 149);
 800274c:	4b46      	ldr	r3, [pc, #280]	; (8002868 <StartMotorTask+0x468>)
 800274e:	2282      	movs	r2, #130	; 0x82
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	e030      	b.n	80027b6 <StartMotorTask+0x3b6>
						}
						else if(error_angle<-5){
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	4b44      	ldr	r3, [pc, #272]	; (800286c <StartMotorTask+0x46c>)
 800275a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800275e:	f7fe f9bd 	bl	8000adc <__aeabi_dcmplt>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <StartMotorTask+0x370>
							pwmVal_servo=((19*5)/5 + 149);
 8002768:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <StartMotorTask+0x468>)
 800276a:	22a8      	movs	r2, #168	; 0xa8
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	e022      	b.n	80027b6 <StartMotorTask+0x3b6>
						}else{
							pwmVal_servo=((-19*error_angle)/5 + 149);
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <StartMotorTask+0x470>)
 8002776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277a:	f7fd ff3d 	bl	80005f8 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <StartMotorTask+0x464>)
 800278c:	f7fe f85e 	bl	800084c <__aeabi_ddiv>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	a32d      	add	r3, pc, #180	; (adr r3, 8002850 <StartMotorTask+0x450>)
 800279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279e:	f7fd fd75 	bl	800028c <__adddf3>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 80027ae:	4603      	mov	r3, r0
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <StartMotorTask+0x468>)
 80027b4:	801a      	strh	r2, [r3, #0]


			//line correction equation is pwmVal = (19*error)/5 + 149
		}

		if(e_brake){
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <StartMotorTask+0x474>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00e      	beq.n	80027dc <StartMotorTask+0x3dc>
			pwmVal_L = pwmVal_R = 0;
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <StartMotorTask+0x478>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	801a      	strh	r2, [r3, #0]
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <StartMotorTask+0x478>)
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	4b2c      	ldr	r3, [pc, #176]	; (800287c <StartMotorTask+0x47c>)
 80027ca:	801a      	strh	r2, [r3, #0]
			leftTarget = leftEncoderVal;
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <StartMotorTask+0x480>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <StartMotorTask+0x484>)
 80027d2:	6013      	str	r3, [r2, #0]
			rightTarget = rightEncoderVal;
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <StartMotorTask+0x488>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a2c      	ldr	r2, [pc, #176]	; (800288c <StartMotorTask+0x48c>)
 80027da:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal_L*1.4);
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <StartMotorTask+0x47c>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fe9f 	bl	8000524 <__aeabi_i2d>
 80027e6:	a31c      	add	r3, pc, #112	; (adr r3, 8002858 <StartMotorTask+0x458>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd ff04 	bl	80005f8 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4926      	ldr	r1, [pc, #152]	; (8002890 <StartMotorTask+0x490>)
 80027f6:	680c      	ldr	r4, [r1, #0]
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7fe f9d4 	bl	8000ba8 <__aeabi_d2uiz>
 8002800:	4603      	mov	r3, r0
 8002802:	6363      	str	r3, [r4, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal_R*1.4);
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <StartMotorTask+0x478>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe8b 	bl	8000524 <__aeabi_i2d>
 800280e:	a312      	add	r3, pc, #72	; (adr r3, 8002858 <StartMotorTask+0x458>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd fef0 	bl	80005f8 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	491c      	ldr	r1, [pc, #112]	; (8002890 <StartMotorTask+0x490>)
 800281e:	680c      	ldr	r4, [r1, #0]
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe f9c0 	bl	8000ba8 <__aeabi_d2uiz>
 8002828:	4603      	mov	r3, r0
 800282a:	63a3      	str	r3, [r4, #56]	; 0x38
		osDelay(1);
 800282c:	2001      	movs	r0, #1
 800282e:	f006 fb39 	bl	8008ea4 <osDelay>

		if (times_acceptable>1000){
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <StartMotorTask+0x494>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800283a:	dd03      	ble.n	8002844 <StartMotorTask+0x444>
			times_acceptable=1001;
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <StartMotorTask+0x494>)
 800283e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002842:	601a      	str	r2, [r3, #0]
		}
		osDelay(10);
 8002844:	200a      	movs	r0, #10
 8002846:	f006 fb2d 	bl	8008ea4 <osDelay>
  {
 800284a:	e60d      	b.n	8002468 <StartMotorTask+0x68>
 800284c:	f3af 8000 	nop.w
 8002850:	00000000 	.word	0x00000000
 8002854:	4062a000 	.word	0x4062a000
 8002858:	66666666 	.word	0x66666666
 800285c:	3ff66666 	.word	0x3ff66666
 8002860:	40330000 	.word	0x40330000
 8002864:	40140000 	.word	0x40140000
 8002868:	20000000 	.word	0x20000000
 800286c:	c0140000 	.word	0xc0140000
 8002870:	c0330000 	.word	0xc0330000
 8002874:	20000444 	.word	0x20000444
 8002878:	2000043c 	.word	0x2000043c
 800287c:	2000043e 	.word	0x2000043e
 8002880:	2000044c 	.word	0x2000044c
 8002884:	20000454 	.word	0x20000454
 8002888:	20000448 	.word	0x20000448
 800288c:	20000450 	.word	0x20000450
 8002890:	20000370 	.word	0x20000370
 8002894:	20000440 	.word	0x20000440

08002898 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b096      	sub	sp, #88	; 0x58
 800289c:	af04      	add	r7, sp, #16
 800289e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	//uint8_t hello [20] = {0};
	uint8_t clear[20] = {0};
 80028a0:	2300      	movs	r3, #0
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
 80028a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
//	uint8_t lefty[20] = {0};
	uint8_t righty[20] = {0};
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
//	uint8_t motorD[20] = {0};
	uint8_t check[20] = {0};
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
	//uint8_t debugMsg[20] = "hello\0";

  /* Infinite loop */
  for(;;)
  {
	HCSR04_Read();
 80028d6:	f7ff f84d 	bl	8001974 <HCSR04_Read>
	osDelay(20);
 80028da:	2014      	movs	r0, #20
 80028dc:	f006 fae2 	bl	8008ea4 <osDelay>
	sprintf(clear, "Distance:%d \0  ",(int)USdistance);
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <StartOledTask+0x12c>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ea:	4937      	ldr	r1, [pc, #220]	; (80029c8 <StartOledTask+0x130>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f009 fc8b 	bl	800c208 <siprintf>
	OLED_ShowString(0,10,clear);
 80028f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028f6:	461a      	mov	r2, r3
 80028f8:	210a      	movs	r1, #10
 80028fa:	2000      	movs	r0, #0
 80028fc:	f001 fb9a 	bl	8004034 <OLED_ShowString>

	int decimals = abs((int)((total_angle-(int)(total_angle))*1000));
 8002900:	4b32      	ldr	r3, [pc, #200]	; (80029cc <StartOledTask+0x134>)
 8002902:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002906:	4b31      	ldr	r3, [pc, #196]	; (80029cc <StartOledTask+0x134>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
 8002910:	f7fe f922 	bl	8000b58 <__aeabi_d2iz>
 8002914:	4603      	mov	r3, r0
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe04 	bl	8000524 <__aeabi_i2d>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fcb0 	bl	8000288 <__aeabi_dsub>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <StartOledTask+0x138>)
 8002936:	f7fd fe5f 	bl	80005f8 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f7fe f909 	bl	8000b58 <__aeabi_d2iz>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	bfb8      	it	lt
 800294c:	425b      	neglt	r3, r3
 800294e:	647b      	str	r3, [r7, #68]	; 0x44
	sprintf(righty,"Gyro: %d.%d \0", (int)total_angle, decimals);
 8002950:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <StartOledTask+0x134>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f8fd 	bl	8000b58 <__aeabi_d2iz>
 800295e:	4602      	mov	r2, r0
 8002960:	f107 001c 	add.w	r0, r7, #28
 8002964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002966:	491b      	ldr	r1, [pc, #108]	; (80029d4 <StartOledTask+0x13c>)
 8002968:	f009 fc4e 	bl	800c208 <siprintf>
	OLED_ShowString(0, 20, righty);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	461a      	mov	r2, r3
 8002972:	2114      	movs	r1, #20
 8002974:	2000      	movs	r0, #0
 8002976:	f001 fb5d 	bl	8004034 <OLED_ShowString>
//	OLED_ShowString(0, 30, lefty);
//
//	sprintf(motorD, "O: %c %c %c%c%c \0", old_Buff[0], old_Buff[1], old_Buff[2], old_Buff[3], old_Buff[4]);
//	OLED_ShowString(0, 40, motorD);

	sprintf(check, "K: %c %c %c%c%c \0", aRxBuffer[0], aRxBuffer[1], aRxBuffer[2], aRxBuffer[3], aRxBuffer[4]);
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <StartOledTask+0x140>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461c      	mov	r4, r3
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <StartOledTask+0x140>)
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	461d      	mov	r5, r3
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <StartOledTask+0x140>)
 8002988:	789b      	ldrb	r3, [r3, #2]
 800298a:	461a      	mov	r2, r3
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <StartOledTask+0x140>)
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	4619      	mov	r1, r3
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <StartOledTask+0x140>)
 8002994:	791b      	ldrb	r3, [r3, #4]
 8002996:	f107 0008 	add.w	r0, r7, #8
 800299a:	9302      	str	r3, [sp, #8]
 800299c:	9101      	str	r1, [sp, #4]
 800299e:	9200      	str	r2, [sp, #0]
 80029a0:	462b      	mov	r3, r5
 80029a2:	4622      	mov	r2, r4
 80029a4:	490d      	ldr	r1, [pc, #52]	; (80029dc <StartOledTask+0x144>)
 80029a6:	f009 fc2f 	bl	800c208 <siprintf>
	OLED_ShowString(0, 30, check);
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	461a      	mov	r2, r3
 80029b0:	211e      	movs	r1, #30
 80029b2:	2000      	movs	r0, #0
 80029b4:	f001 fb3e 	bl	8004034 <OLED_ShowString>

	//memset(clear, 0, 20*sizeof(uint8_t));

	OLED_Refresh_Gram();
 80029b8:	f001 f9c8 	bl	8003d4c <OLED_Refresh_Gram>
	osDelay(10);
 80029bc:	200a      	movs	r0, #10
 80029be:	f006 fa71 	bl	8008ea4 <osDelay>
  {
 80029c2:	e788      	b.n	80028d6 <StartOledTask+0x3e>
 80029c4:	20000492 	.word	0x20000492
 80029c8:	0800e5f0 	.word	0x0800e5f0
 80029cc:	20000460 	.word	0x20000460
 80029d0:	408f4000 	.word	0x408f4000
 80029d4:	0800e600 	.word	0x0800e600
 80029d8:	2000041c 	.word	0x2000041c
 80029dc:	0800e610 	.word	0x0800e610

080029e0 <StartRpiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRpiTask */
void StartRpiTask(void *argument)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRpiTask */
	char ch[11];
	char old = ')';
 80029e8:	2329      	movs	r3, #41	; 0x29
 80029ea:	77fb      	strb	r3, [r7, #31]
	int num = 1;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	  aRxBuffer[0] = '-';
 80029f0:	4bb9      	ldr	r3, [pc, #740]	; (8002cd8 <StartRpiTask+0x2f8>)
 80029f2:	222d      	movs	r2, #45	; 0x2d
 80029f4:	701a      	strb	r2, [r3, #0]
	  aRxBuffer[1] = 'W';
 80029f6:	4bb8      	ldr	r3, [pc, #736]	; (8002cd8 <StartRpiTask+0x2f8>)
 80029f8:	2257      	movs	r2, #87	; 0x57
 80029fa:	705a      	strb	r2, [r3, #1]
	  aRxBuffer[2] = 'A';
 80029fc:	4bb6      	ldr	r3, [pc, #728]	; (8002cd8 <StartRpiTask+0x2f8>)
 80029fe:	2241      	movs	r2, #65	; 0x41
 8002a00:	709a      	strb	r2, [r3, #2]
	  aRxBuffer[3] = 'I';
 8002a02:	4bb5      	ldr	r3, [pc, #724]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a04:	2249      	movs	r2, #73	; 0x49
 8002a06:	70da      	strb	r2, [r3, #3]
	  aRxBuffer[4] = 'T';
 8002a08:	4bb3      	ldr	r3, [pc, #716]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a0a:	2254      	movs	r2, #84	; 0x54
 8002a0c:	711a      	strb	r2, [r3, #4]

  int first = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  int second =1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	623b      	str	r3, [r7, #32]

  for(;;)
  {
	  magnitude = 0;
 8002a16:	4bb1      	ldr	r3, [pc, #708]	; (8002cdc <StartRpiTask+0x2fc>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
	  key = aRxBuffer[0];
 8002a1c:	4bae      	ldr	r3, [pc, #696]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	4baf      	ldr	r3, [pc, #700]	; (8002ce0 <StartRpiTask+0x300>)
 8002a22:	701a      	strb	r2, [r3, #0]
	  direction = aRxBuffer[1];
 8002a24:	4bac      	ldr	r3, [pc, #688]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a26:	785a      	ldrb	r2, [r3, #1]
 8002a28:	4bae      	ldr	r3, [pc, #696]	; (8002ce4 <StartRpiTask+0x304>)
 8002a2a:	701a      	strb	r2, [r3, #0]
	  magnitude = ((int)(aRxBuffer[2])-48)*100 + ((int)(aRxBuffer[3])-48)*10 + ((int)(aRxBuffer[4])-48);
 8002a2c:	4baa      	ldr	r3, [pc, #680]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a2e:	789b      	ldrb	r3, [r3, #2]
 8002a30:	3b30      	subs	r3, #48	; 0x30
 8002a32:	2264      	movs	r2, #100	; 0x64
 8002a34:	fb02 f103 	mul.w	r1, r2, r3
 8002a38:	4ba7      	ldr	r3, [pc, #668]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a3a:	78db      	ldrb	r3, [r3, #3]
 8002a3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	18ca      	adds	r2, r1, r3
 8002a4a:	4ba3      	ldr	r3, [pc, #652]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a4c:	791b      	ldrb	r3, [r3, #4]
 8002a4e:	3b30      	subs	r3, #48	; 0x30
 8002a50:	4413      	add	r3, r2
 8002a52:	4aa2      	ldr	r2, [pc, #648]	; (8002cdc <StartRpiTask+0x2fc>)
 8002a54:	6013      	str	r3, [r2, #0]
	  num = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
//	  if(direction == 'B'){
//		  magnitude *= -1;
//		  num = -1;
//	  }

	  if(aRxBuffer[0] != old){
 8002a5a:	4b9f      	ldr	r3, [pc, #636]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	7ffa      	ldrb	r2, [r7, #31]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f000 83ff 	beq.w	8003264 <StartRpiTask+0x884>
//		old_Buff[3] = aRxBuffer[3];
//		old_Buff[4] = aRxBuffer[4];
//
//		}

		 osDelay(500);
 8002a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a6a:	f006 fa1b 	bl	8008ea4 <osDelay>
		  switch (key){
 8002a6e:	4b9c      	ldr	r3, [pc, #624]	; (8002ce0 <StartRpiTask+0x300>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3b41      	subs	r3, #65	; 0x41
 8002a74:	2b19      	cmp	r3, #25
 8002a76:	f200 83f4 	bhi.w	8003262 <StartRpiTask+0x882>
 8002a7a:	a201      	add	r2, pc, #4	; (adr r2, 8002a80 <StartRpiTask+0xa0>)
 8002a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a80:	08002aed 	.word	0x08002aed
 8002a84:	08003263 	.word	0x08003263
 8002a88:	08003263 	.word	0x08003263
 8002a8c:	08003263 	.word	0x08003263
 8002a90:	08003263 	.word	0x08003263
 8002a94:	08003263 	.word	0x08003263
 8002a98:	08003263 	.word	0x08003263
 8002a9c:	08003263 	.word	0x08003263
 8002aa0:	08003263 	.word	0x08003263
 8002aa4:	08003263 	.word	0x08003263
 8002aa8:	08003263 	.word	0x08003263
 8002aac:	08002b4f 	.word	0x08002b4f
 8002ab0:	08002d35 	.word	0x08002d35
 8002ab4:	08002e5b 	.word	0x08002e5b
 8002ab8:	08002fe1 	.word	0x08002fe1
 8002abc:	08003107 	.word	0x08003107
 8002ac0:	08003263 	.word	0x08003263
 8002ac4:	08002c21 	.word	0x08002c21
 8002ac8:	08003263 	.word	0x08003263
 8002acc:	08002ae9 	.word	0x08002ae9
 8002ad0:	08003263 	.word	0x08003263
 8002ad4:	08003263 	.word	0x08003263
 8002ad8:	08003263 	.word	0x08003263
 8002adc:	08003263 	.word	0x08003263
 8002ae0:	08003263 	.word	0x08003263
 8002ae4:	0800322d 	.word	0x0800322d

		  	  case 'T':
		  		  remoteReset();
 8002ae8:	f7fe ff78 	bl	80019dc <remoteReset>
//				  aRxBuffer[4] = '!';
//				  osDelay(100);
//				  break;

			  case 'A':
				  if(USdistance <= 20)
 8002aec:	4b7e      	ldr	r3, [pc, #504]	; (8002ce8 <StartRpiTask+0x308>)
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	2b14      	cmp	r3, #20
 8002af2:	d810      	bhi.n	8002b16 <StartRpiTask+0x136>
				  {
					  times_acceptable=0;
 8002af4:	4b7d      	ldr	r3, [pc, #500]	; (8002cec <StartRpiTask+0x30c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
					  moveCarStraight(20-USdistance);
 8002afa:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <StartRpiTask+0x308>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	f1c3 0314 	rsb	r3, r3, #20
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fd0e 	bl	8000524 <__aeabi_i2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	ec43 2b10 	vmov	d0, r2, r3
 8002b10:	f7fe ff6a 	bl	80019e8 <moveCarStraight>
 8002b14:	e017      	b.n	8002b46 <StartRpiTask+0x166>
				  }
				  else
				  {
					  times_acceptable=0;
 8002b16:	4b75      	ldr	r3, [pc, #468]	; (8002cec <StartRpiTask+0x30c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
					  e_brake=1;
 8002b1c:	4b74      	ldr	r3, [pc, #464]	; (8002cf0 <StartRpiTask+0x310>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
					  flagDone=1;
 8002b22:	4b74      	ldr	r3, [pc, #464]	; (8002cf4 <StartRpiTask+0x314>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
					  aRxBuffer[0] = 'D';
 8002b28:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002b2a:	2244      	movs	r2, #68	; 0x44
 8002b2c:	701a      	strb	r2, [r3, #0]
					  aRxBuffer[1] = 'O';
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002b30:	224f      	movs	r2, #79	; 0x4f
 8002b32:	705a      	strb	r2, [r3, #1]
					  aRxBuffer[2] = 'N';
 8002b34:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002b36:	224e      	movs	r2, #78	; 0x4e
 8002b38:	709a      	strb	r2, [r3, #2]
					  aRxBuffer[3] = 'E';
 8002b3a:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002b3c:	2245      	movs	r2, #69	; 0x45
 8002b3e:	70da      	strb	r2, [r3, #3]
					  aRxBuffer[4] = '!';
 8002b40:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002b42:	2221      	movs	r2, #33	; 0x21
 8002b44:	711a      	strb	r2, [r3, #4]
				  }
				  osDelay(10);
 8002b46:	200a      	movs	r0, #10
 8002b48:	f006 f9ac 	bl	8008ea4 <osDelay>
				  break;
 8002b4c:	e38a      	b.n	8003264 <StartRpiTask+0x884>

			  case 'L': //From Carpark Left
				  if(first)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d034      	beq.n	8002bbe <StartRpiTask+0x1de>
				  {
					  moveCarLeft903(46);//set a flag to not recall this 100000 times
 8002b54:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8002cc0 <StartRpiTask+0x2e0>
 8002b58:	f7ff fa22 	bl	8001fa0 <moveCarLeft903>
					  osDelay(50);
 8002b5c:	2032      	movs	r0, #50	; 0x32
 8002b5e:	f006 f9a1 	bl	8008ea4 <osDelay>
					  moveCarRight903(46);
 8002b62:	ed9f 0b57 	vldr	d0, [pc, #348]	; 8002cc0 <StartRpiTask+0x2e0>
 8002b66:	f7ff f93d 	bl	8001de4 <moveCarRight903>
					  osDelay(50);
 8002b6a:	2032      	movs	r0, #50	; 0x32
 8002b6c:	f006 f99a 	bl	8008ea4 <osDelay>
					  moveCarStraight(4);
 8002b70:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8002cc8 <StartRpiTask+0x2e8>
 8002b74:	f7fe ff38 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 8002b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b7c:	f006 f992 	bl	8008ea4 <osDelay>
					  moveCarRight903(46);
 8002b80:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8002cc0 <StartRpiTask+0x2e0>
 8002b84:	f7ff f92e 	bl	8001de4 <moveCarRight903>
					  osDelay(50);
 8002b88:	2032      	movs	r0, #50	; 0x32
 8002b8a:	f006 f98b 	bl	8008ea4 <osDelay>
					  moveCarLeft903(46);
 8002b8e:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8002cc0 <StartRpiTask+0x2e0>
 8002b92:	f7ff fa05 	bl	8001fa0 <moveCarLeft903>
					  osDelay(50);
 8002b96:	2032      	movs	r0, #50	; 0x32
 8002b98:	f006 f984 	bl	8008ea4 <osDelay>
					  moveCarStraight(-23);
 8002b9c:	ed9f 0b4c 	vldr	d0, [pc, #304]	; 8002cd0 <StartRpiTask+0x2f0>
 8002ba0:	f7fe ff22 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 8002ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ba8:	f006 f97c 	bl	8008ea4 <osDelay>
					  htim1.Instance->CCR4 = 149;
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <StartRpiTask+0x318>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2295      	movs	r2, #149	; 0x95
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
					  osDelay(50);
 8002bb4:	2032      	movs	r0, #50	; 0x32
 8002bb6:	f006 f975 	bl	8008ea4 <osDelay>
					  first = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
				  }

				  if(USdistance <=20)
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <StartRpiTask+0x308>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	2b14      	cmp	r3, #20
 8002bc4:	d810      	bhi.n	8002be8 <StartRpiTask+0x208>
				  {
					  times_acceptable=0;
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <StartRpiTask+0x30c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
					  moveCarStraight(20-USdistance);
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <StartRpiTask+0x308>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	f1c3 0314 	rsb	r3, r3, #20
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fca5 	bl	8000524 <__aeabi_i2d>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	ec43 2b10 	vmov	d0, r2, r3
 8002be2:	f7fe ff01 	bl	80019e8 <moveCarStraight>
 8002be6:	e017      	b.n	8002c18 <StartRpiTask+0x238>
				  }
				  else
				  {
					  times_acceptable=0;
 8002be8:	4b40      	ldr	r3, [pc, #256]	; (8002cec <StartRpiTask+0x30c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
					  e_brake=1;
 8002bee:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <StartRpiTask+0x310>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
					  flagDone=1;
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <StartRpiTask+0x314>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
					  aRxBuffer[0] = 'D';
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002bfc:	2244      	movs	r2, #68	; 0x44
 8002bfe:	701a      	strb	r2, [r3, #0]
					  aRxBuffer[1] = 'O';
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002c02:	224f      	movs	r2, #79	; 0x4f
 8002c04:	705a      	strb	r2, [r3, #1]
					  aRxBuffer[2] = 'N';
 8002c06:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002c08:	224e      	movs	r2, #78	; 0x4e
 8002c0a:	709a      	strb	r2, [r3, #2]
					  aRxBuffer[3] = 'E';
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002c0e:	2245      	movs	r2, #69	; 0x45
 8002c10:	70da      	strb	r2, [r3, #3]
					  aRxBuffer[4] = '!';
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <StartRpiTask+0x2f8>)
 8002c14:	2221      	movs	r2, #33	; 0x21
 8002c16:	711a      	strb	r2, [r3, #4]
				  }

				  osDelay(10);
 8002c18:	200a      	movs	r0, #10
 8002c1a:	f006 f943 	bl	8008ea4 <osDelay>
				  break;
 8002c1e:	e321      	b.n	8003264 <StartRpiTask+0x884>

			  case 'R': //From Carpark Right
				  if(first)
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d034      	beq.n	8002c90 <StartRpiTask+0x2b0>
				  {
					  moveCarRight903(46);
 8002c26:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8002cc0 <StartRpiTask+0x2e0>
 8002c2a:	f7ff f8db 	bl	8001de4 <moveCarRight903>
					  osDelay(50);
 8002c2e:	2032      	movs	r0, #50	; 0x32
 8002c30:	f006 f938 	bl	8008ea4 <osDelay>
					  moveCarLeft903(46);
 8002c34:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8002cc0 <StartRpiTask+0x2e0>
 8002c38:	f7ff f9b2 	bl	8001fa0 <moveCarLeft903>
					  osDelay(50);
 8002c3c:	2032      	movs	r0, #50	; 0x32
 8002c3e:	f006 f931 	bl	8008ea4 <osDelay>
					  moveCarStraight(4);
 8002c42:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8002cc8 <StartRpiTask+0x2e8>
 8002c46:	f7fe fecf 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 8002c4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c4e:	f006 f929 	bl	8008ea4 <osDelay>
					  moveCarLeft903(46);
 8002c52:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8002cc0 <StartRpiTask+0x2e0>
 8002c56:	f7ff f9a3 	bl	8001fa0 <moveCarLeft903>
					  osDelay(50);
 8002c5a:	2032      	movs	r0, #50	; 0x32
 8002c5c:	f006 f922 	bl	8008ea4 <osDelay>
					  moveCarRight903(46);
 8002c60:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002cc0 <StartRpiTask+0x2e0>
 8002c64:	f7ff f8be 	bl	8001de4 <moveCarRight903>
					  osDelay(50);
 8002c68:	2032      	movs	r0, #50	; 0x32
 8002c6a:	f006 f91b 	bl	8008ea4 <osDelay>
					  moveCarStraight(-23);
 8002c6e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8002cd0 <StartRpiTask+0x2f0>
 8002c72:	f7fe feb9 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 8002c76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c7a:	f006 f913 	bl	8008ea4 <osDelay>
					  htim1.Instance->CCR4 = 149;
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <StartRpiTask+0x318>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2295      	movs	r2, #149	; 0x95
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
					  osDelay(50);
 8002c86:	2032      	movs	r0, #50	; 0x32
 8002c88:	f006 f90c 	bl	8008ea4 <osDelay>
					  first = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
				  }

				  if(USdistance <=20)
 8002c90:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <StartRpiTask+0x308>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	2b14      	cmp	r3, #20
 8002c96:	d831      	bhi.n	8002cfc <StartRpiTask+0x31c>
				  {
					  times_acceptable=0;
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <StartRpiTask+0x30c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
					  moveCarStraight(20-USdistance);
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <StartRpiTask+0x308>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	f1c3 0314 	rsb	r3, r3, #20
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc3c 	bl	8000524 <__aeabi_i2d>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	ec43 2b10 	vmov	d0, r2, r3
 8002cb4:	f7fe fe98 	bl	80019e8 <moveCarStraight>
 8002cb8:	e038      	b.n	8002d2c <StartRpiTask+0x34c>
 8002cba:	bf00      	nop
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	00000000 	.word	0x00000000
 8002cc4:	40470000 	.word	0x40470000
 8002cc8:	00000000 	.word	0x00000000
 8002ccc:	40100000 	.word	0x40100000
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	c0370000 	.word	0xc0370000
 8002cd8:	2000041c 	.word	0x2000041c
 8002cdc:	20000438 	.word	0x20000438
 8002ce0:	20000434 	.word	0x20000434
 8002ce4:	20000435 	.word	0x20000435
 8002ce8:	20000492 	.word	0x20000492
 8002cec:	20000440 	.word	0x20000440
 8002cf0:	20000444 	.word	0x20000444
 8002cf4:	20000430 	.word	0x20000430
 8002cf8:	20000250 	.word	0x20000250
				  }
				  else
				  {
					  times_acceptable=0;
 8002cfc:	4bb2      	ldr	r3, [pc, #712]	; (8002fc8 <StartRpiTask+0x5e8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
					  e_brake=1;
 8002d02:	4bb2      	ldr	r3, [pc, #712]	; (8002fcc <StartRpiTask+0x5ec>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
					  flagDone=1;
 8002d08:	4bb1      	ldr	r3, [pc, #708]	; (8002fd0 <StartRpiTask+0x5f0>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
					  aRxBuffer[0] = 'D';
 8002d0e:	4bb1      	ldr	r3, [pc, #708]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002d10:	2244      	movs	r2, #68	; 0x44
 8002d12:	701a      	strb	r2, [r3, #0]
					  aRxBuffer[1] = 'O';
 8002d14:	4baf      	ldr	r3, [pc, #700]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002d16:	224f      	movs	r2, #79	; 0x4f
 8002d18:	705a      	strb	r2, [r3, #1]
					  aRxBuffer[2] = 'N';
 8002d1a:	4bae      	ldr	r3, [pc, #696]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002d1c:	224e      	movs	r2, #78	; 0x4e
 8002d1e:	709a      	strb	r2, [r3, #2]
					  aRxBuffer[3] = 'E';
 8002d20:	4bac      	ldr	r3, [pc, #688]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002d22:	2245      	movs	r2, #69	; 0x45
 8002d24:	70da      	strb	r2, [r3, #3]
					  aRxBuffer[4] = '!';
 8002d26:	4bab      	ldr	r3, [pc, #684]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002d28:	2221      	movs	r2, #33	; 0x21
 8002d2a:	711a      	strb	r2, [r3, #4]
				  }

				  osDelay(10);
 8002d2c:	200a      	movs	r0, #10
 8002d2e:	f006 f8b9 	bl	8008ea4 <osDelay>
				  break;
 8002d32:	e297      	b.n	8003264 <StartRpiTask+0x884>

			  case 'M': //After L, L again
				  if(second)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d044      	beq.n	8002dc4 <StartRpiTask+0x3e4>
				  {
					  moveCarLeft90(90);
 8002d3a:	ed9f 0b91 	vldr	d0, [pc, #580]	; 8002f80 <StartRpiTask+0x5a0>
 8002d3e:	f7ff f89b 	bl	8001e78 <moveCarLeft90>
					  htim1.Instance->CCR4 = 149;
 8002d42:	4ba5      	ldr	r3, [pc, #660]	; (8002fd8 <StartRpiTask+0x5f8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2295      	movs	r2, #149	; 0x95
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
					  osDelay(50);
 8002d4a:	2032      	movs	r0, #50	; 0x32
 8002d4c:	f006 f8aa 	bl	8008ea4 <osDelay>
					  moveCarStraight(25);
 8002d50:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8002f88 <StartRpiTask+0x5a8>
 8002d54:	f7fe fe48 	bl	80019e8 <moveCarStraight>
					  osDelay(1000);
 8002d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d5c:	f006 f8a2 	bl	8008ea4 <osDelay>
					  moveCarRight902(180);
 8002d60:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8002f90 <StartRpiTask+0x5b0>
 8002d64:	f7fe fff4 	bl	8001d50 <moveCarRight902>
					  osDelay(500);
 8002d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d6c:	f006 f89a 	bl	8008ea4 <osDelay>
					  moveCarStraight(95);
 8002d70:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8002f98 <StartRpiTask+0x5b8>
 8002d74:	f7fe fe38 	bl	80019e8 <moveCarStraight>
					  osDelay(2000);
 8002d78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d7c:	f006 f892 	bl	8008ea4 <osDelay>
					  moveCarRight902(180);
 8002d80:	ed9f 0b83 	vldr	d0, [pc, #524]	; 8002f90 <StartRpiTask+0x5b0>
 8002d84:	f7fe ffe4 	bl	8001d50 <moveCarRight902>
					  osDelay(500);
 8002d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d8c:	f006 f88a 	bl	8008ea4 <osDelay>
//					  moveCarStraight(40);
//					  osDelay(500);
					  moveCarLeft(110);
 8002d90:	ed9f 0b83 	vldr	d0, [pc, #524]	; 8002fa0 <StartRpiTask+0x5c0>
 8002d94:	f7fe ff0a 	bl	8001bac <moveCarLeft>
					  osDelay(500);
 8002d98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d9c:	f006 f882 	bl	8008ea4 <osDelay>
					  moveCarStraight(10);
 8002da0:	ed9f 0b81 	vldr	d0, [pc, #516]	; 8002fa8 <StartRpiTask+0x5c8>
 8002da4:	f7fe fe20 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 8002da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dac:	f006 f87a 	bl	8008ea4 <osDelay>
					  moveCarRight(20);
 8002db0:	ed9f 0b7f 	vldr	d0, [pc, #508]	; 8002fb0 <StartRpiTask+0x5d0>
 8002db4:	f7fe fe7c 	bl	8001ab0 <moveCarRight>
					  osDelay(500);
 8002db8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dbc:	f006 f872 	bl	8008ea4 <osDelay>
					  second =0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
				  }

				  if(USdistance >= 50)
 8002dc4:	4b85      	ldr	r3, [pc, #532]	; (8002fdc <StartRpiTask+0x5fc>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	2b31      	cmp	r3, #49	; 0x31
 8002dca:	d90f      	bls.n	8002dec <StartRpiTask+0x40c>
				  {
					  times_acceptable=0;
 8002dcc:	4b7e      	ldr	r3, [pc, #504]	; (8002fc8 <StartRpiTask+0x5e8>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
					  moveCarStraight(USdistance-50);
 8002dd2:	4b82      	ldr	r3, [pc, #520]	; (8002fdc <StartRpiTask+0x5fc>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	3b32      	subs	r3, #50	; 0x32
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fba3 	bl	8000524 <__aeabi_i2d>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	ec43 2b10 	vmov	d0, r2, r3
 8002de6:	f7fe fdff 	bl	80019e8 <moveCarStraight>
 8002dea:	e032      	b.n	8002e52 <StartRpiTask+0x472>
				  }
				  else
				  {
					  times_acceptable=0;
 8002dec:	4b76      	ldr	r3, [pc, #472]	; (8002fc8 <StartRpiTask+0x5e8>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
					  moveCarRight903(45);
 8002df2:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8002fb8 <StartRpiTask+0x5d8>
 8002df6:	f7fe fff5 	bl	8001de4 <moveCarRight903>
					  moveCarLeft903(45);
 8002dfa:	ed9f 0b6f 	vldr	d0, [pc, #444]	; 8002fb8 <StartRpiTask+0x5d8>
 8002dfe:	f7ff f8cf 	bl	8001fa0 <moveCarLeft903>
					  osDelay(50);
 8002e02:	2032      	movs	r0, #50	; 0x32
 8002e04:	f006 f84e 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 8002e08:	e00a      	b.n	8002e20 <StartRpiTask+0x440>
					  {
						  times_acceptable=0;
 8002e0a:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <StartRpiTask+0x5e8>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
						  moveCarStraight(10);
 8002e10:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8002fa8 <StartRpiTask+0x5c8>
 8002e14:	f7fe fde8 	bl	80019e8 <moveCarStraight>
						  osDelay(500);
 8002e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e1c:	f006 f842 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 8002e20:	4b6e      	ldr	r3, [pc, #440]	; (8002fdc <StartRpiTask+0x5fc>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	2b13      	cmp	r3, #19
 8002e26:	d8f0      	bhi.n	8002e0a <StartRpiTask+0x42a>

					  }

						  e_brake=1;
 8002e28:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <StartRpiTask+0x5ec>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
						  flagDone=1;
 8002e2e:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <StartRpiTask+0x5f0>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
						  aRxBuffer[0] = 'D';
 8002e34:	4b67      	ldr	r3, [pc, #412]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002e36:	2244      	movs	r2, #68	; 0x44
 8002e38:	701a      	strb	r2, [r3, #0]
						  aRxBuffer[1] = 'O';
 8002e3a:	4b66      	ldr	r3, [pc, #408]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002e3c:	224f      	movs	r2, #79	; 0x4f
 8002e3e:	705a      	strb	r2, [r3, #1]
						  aRxBuffer[2] = 'N';
 8002e40:	4b64      	ldr	r3, [pc, #400]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002e42:	224e      	movs	r2, #78	; 0x4e
 8002e44:	709a      	strb	r2, [r3, #2]
						  aRxBuffer[3] = 'E';
 8002e46:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002e48:	2245      	movs	r2, #69	; 0x45
 8002e4a:	70da      	strb	r2, [r3, #3]
						  aRxBuffer[4] = '!';
 8002e4c:	4b61      	ldr	r3, [pc, #388]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002e4e:	2221      	movs	r2, #33	; 0x21
 8002e50:	711a      	strb	r2, [r3, #4]
				  }

				  osDelay(10);
 8002e52:	200a      	movs	r0, #10
 8002e54:	f006 f826 	bl	8008ea4 <osDelay>
				  break;
 8002e58:	e204      	b.n	8003264 <StartRpiTask+0x884>

			  case 'N': //After L, R
				  if(second)
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d044      	beq.n	8002eea <StartRpiTask+0x50a>
				  {
					  moveCarRight90(90);
 8002e60:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8002f80 <StartRpiTask+0x5a0>
 8002e64:	f7fe ff20 	bl	8001ca8 <moveCarRight90>
					  htim1.Instance->CCR4 = 149;
 8002e68:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <StartRpiTask+0x5f8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2295      	movs	r2, #149	; 0x95
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40
					  osDelay(50);
 8002e70:	2032      	movs	r0, #50	; 0x32
 8002e72:	f006 f817 	bl	8008ea4 <osDelay>
					  moveCarStraight(20);
 8002e76:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002fb0 <StartRpiTask+0x5d0>
 8002e7a:	f7fe fdb5 	bl	80019e8 <moveCarStraight>
					  osDelay(1000);
 8002e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e82:	f006 f80f 	bl	8008ea4 <osDelay>
					  moveCarLeft902(180);
 8002e86:	ed9f 0b42 	vldr	d0, [pc, #264]	; 8002f90 <StartRpiTask+0x5b0>
 8002e8a:	f7ff f83f 	bl	8001f0c <moveCarLeft902>
					  osDelay(500);
 8002e8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e92:	f006 f807 	bl	8008ea4 <osDelay>
					  moveCarStraight(100);
 8002e96:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8002fc0 <StartRpiTask+0x5e0>
 8002e9a:	f7fe fda5 	bl	80019e8 <moveCarStraight>
					  osDelay(2000);
 8002e9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ea2:	f005 ffff 	bl	8008ea4 <osDelay>
					  moveCarLeft902(180);
 8002ea6:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8002f90 <StartRpiTask+0x5b0>
 8002eaa:	f7ff f82f 	bl	8001f0c <moveCarLeft902>
					  osDelay(500);
 8002eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eb2:	f005 fff7 	bl	8008ea4 <osDelay>
//					  moveCarStraight(40);
//					  osDelay(500);
					  moveCarRight(110);
 8002eb6:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8002fa0 <StartRpiTask+0x5c0>
 8002eba:	f7fe fdf9 	bl	8001ab0 <moveCarRight>
					  osDelay(500);
 8002ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ec2:	f005 ffef 	bl	8008ea4 <osDelay>
					  moveCarStraight(10);
 8002ec6:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8002fa8 <StartRpiTask+0x5c8>
 8002eca:	f7fe fd8d 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 8002ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ed2:	f005 ffe7 	bl	8008ea4 <osDelay>
					  moveCarLeft(20);
 8002ed6:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8002fb0 <StartRpiTask+0x5d0>
 8002eda:	f7fe fe67 	bl	8001bac <moveCarLeft>
					  osDelay(500);
 8002ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ee2:	f005 ffdf 	bl	8008ea4 <osDelay>
					  second =0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
				  }

				  if(USdistance >= 50)
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <StartRpiTask+0x5fc>)
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	2b31      	cmp	r3, #49	; 0x31
 8002ef0:	d90f      	bls.n	8002f12 <StartRpiTask+0x532>
				  {
					  times_acceptable=0;
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <StartRpiTask+0x5e8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
					  moveCarStraight(USdistance-50);
 8002ef8:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <StartRpiTask+0x5fc>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	3b32      	subs	r3, #50	; 0x32
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb10 	bl	8000524 <__aeabi_i2d>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	ec43 2b10 	vmov	d0, r2, r3
 8002f0c:	f7fe fd6c 	bl	80019e8 <moveCarStraight>
 8002f10:	e032      	b.n	8002f78 <StartRpiTask+0x598>
				  }
				  else
				  {
					  times_acceptable=0;
 8002f12:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <StartRpiTask+0x5e8>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
					  moveCarLeft903(45);
 8002f18:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8002fb8 <StartRpiTask+0x5d8>
 8002f1c:	f7ff f840 	bl	8001fa0 <moveCarLeft903>
					  moveCarRight903(45);
 8002f20:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8002fb8 <StartRpiTask+0x5d8>
 8002f24:	f7fe ff5e 	bl	8001de4 <moveCarRight903>
					  osDelay(50);
 8002f28:	2032      	movs	r0, #50	; 0x32
 8002f2a:	f005 ffbb 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 8002f2e:	e00a      	b.n	8002f46 <StartRpiTask+0x566>
					  {
						  times_acceptable=0;
 8002f30:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <StartRpiTask+0x5e8>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
						  moveCarStraight(10);
 8002f36:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002fa8 <StartRpiTask+0x5c8>
 8002f3a:	f7fe fd55 	bl	80019e8 <moveCarStraight>
						  osDelay(500);
 8002f3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f42:	f005 ffaf 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 8002f46:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <StartRpiTask+0x5fc>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	2b13      	cmp	r3, #19
 8002f4c:	d8f0      	bhi.n	8002f30 <StartRpiTask+0x550>

					  }

						  e_brake=1;
 8002f4e:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <StartRpiTask+0x5ec>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
						  flagDone=1;
 8002f54:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <StartRpiTask+0x5f0>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
						  aRxBuffer[0] = 'D';
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002f5c:	2244      	movs	r2, #68	; 0x44
 8002f5e:	701a      	strb	r2, [r3, #0]
						  aRxBuffer[1] = 'O';
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002f62:	224f      	movs	r2, #79	; 0x4f
 8002f64:	705a      	strb	r2, [r3, #1]
						  aRxBuffer[2] = 'N';
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002f68:	224e      	movs	r2, #78	; 0x4e
 8002f6a:	709a      	strb	r2, [r3, #2]
						  aRxBuffer[3] = 'E';
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002f6e:	2245      	movs	r2, #69	; 0x45
 8002f70:	70da      	strb	r2, [r3, #3]
						  aRxBuffer[4] = '!';
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <StartRpiTask+0x5f4>)
 8002f74:	2221      	movs	r2, #33	; 0x21
 8002f76:	711a      	strb	r2, [r3, #4]

				  }
				  osDelay(10);
 8002f78:	200a      	movs	r0, #10
 8002f7a:	f005 ff93 	bl	8008ea4 <osDelay>
				  break;
 8002f7e:	e171      	b.n	8003264 <StartRpiTask+0x884>
 8002f80:	00000000 	.word	0x00000000
 8002f84:	40568000 	.word	0x40568000
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	40390000 	.word	0x40390000
 8002f90:	00000000 	.word	0x00000000
 8002f94:	40668000 	.word	0x40668000
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	4057c000 	.word	0x4057c000
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	405b8000 	.word	0x405b8000
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	40240000 	.word	0x40240000
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	40340000 	.word	0x40340000
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	40468000 	.word	0x40468000
 8002fc0:	00000000 	.word	0x00000000
 8002fc4:	40590000 	.word	0x40590000
 8002fc8:	20000440 	.word	0x20000440
 8002fcc:	20000444 	.word	0x20000444
 8002fd0:	20000430 	.word	0x20000430
 8002fd4:	2000041c 	.word	0x2000041c
 8002fd8:	20000250 	.word	0x20000250
 8002fdc:	20000492 	.word	0x20000492

			  case 'O': //After R, R again
				  if(second)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d044      	beq.n	8003070 <StartRpiTask+0x690>
				  {
					  moveCarRight90(90);
 8002fe6:	ed9f 0bae 	vldr	d0, [pc, #696]	; 80032a0 <StartRpiTask+0x8c0>
 8002fea:	f7fe fe5d 	bl	8001ca8 <moveCarRight90>
					  htim1.Instance->CCR4 = 149;
 8002fee:	4bbe      	ldr	r3, [pc, #760]	; (80032e8 <StartRpiTask+0x908>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2295      	movs	r2, #149	; 0x95
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
					  osDelay(50);
 8002ff6:	2032      	movs	r0, #50	; 0x32
 8002ff8:	f005 ff54 	bl	8008ea4 <osDelay>
					  moveCarStraight(20);
 8002ffc:	ed9f 0baa 	vldr	d0, [pc, #680]	; 80032a8 <StartRpiTask+0x8c8>
 8003000:	f7fe fcf2 	bl	80019e8 <moveCarStraight>
					  osDelay(1000);
 8003004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003008:	f005 ff4c 	bl	8008ea4 <osDelay>
					  moveCarLeft902(180);
 800300c:	ed9f 0ba8 	vldr	d0, [pc, #672]	; 80032b0 <StartRpiTask+0x8d0>
 8003010:	f7fe ff7c 	bl	8001f0c <moveCarLeft902>
					  osDelay(500);
 8003014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003018:	f005 ff44 	bl	8008ea4 <osDelay>
					  moveCarStraight(100);
 800301c:	ed9f 0ba6 	vldr	d0, [pc, #664]	; 80032b8 <StartRpiTask+0x8d8>
 8003020:	f7fe fce2 	bl	80019e8 <moveCarStraight>
					  osDelay(2000);
 8003024:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003028:	f005 ff3c 	bl	8008ea4 <osDelay>
					  moveCarLeft902(180);
 800302c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 80032b0 <StartRpiTask+0x8d0>
 8003030:	f7fe ff6c 	bl	8001f0c <moveCarLeft902>
					  osDelay(500);
 8003034:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003038:	f005 ff34 	bl	8008ea4 <osDelay>
//					  moveCarStraight(40);
//					  osDelay(500);
					  moveCarRight(110);
 800303c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 80032c0 <StartRpiTask+0x8e0>
 8003040:	f7fe fd36 	bl	8001ab0 <moveCarRight>
					  osDelay(500);
 8003044:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003048:	f005 ff2c 	bl	8008ea4 <osDelay>
					  moveCarStraight(10);
 800304c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; 80032c8 <StartRpiTask+0x8e8>
 8003050:	f7fe fcca 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 8003054:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003058:	f005 ff24 	bl	8008ea4 <osDelay>
					  moveCarLeft(20);
 800305c:	ed9f 0b92 	vldr	d0, [pc, #584]	; 80032a8 <StartRpiTask+0x8c8>
 8003060:	f7fe fda4 	bl	8001bac <moveCarLeft>
					  osDelay(500);
 8003064:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003068:	f005 ff1c 	bl	8008ea4 <osDelay>
					  second =0;
 800306c:	2300      	movs	r3, #0
 800306e:	623b      	str	r3, [r7, #32]
				  }

				  if(USdistance >= 50)
 8003070:	4b9e      	ldr	r3, [pc, #632]	; (80032ec <StartRpiTask+0x90c>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	2b31      	cmp	r3, #49	; 0x31
 8003076:	d90f      	bls.n	8003098 <StartRpiTask+0x6b8>
				  {
					  times_acceptable=0;
 8003078:	4b9d      	ldr	r3, [pc, #628]	; (80032f0 <StartRpiTask+0x910>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
					  moveCarStraight(USdistance-50);
 800307e:	4b9b      	ldr	r3, [pc, #620]	; (80032ec <StartRpiTask+0x90c>)
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	3b32      	subs	r3, #50	; 0x32
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fa4d 	bl	8000524 <__aeabi_i2d>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	ec43 2b10 	vmov	d0, r2, r3
 8003092:	f7fe fca9 	bl	80019e8 <moveCarStraight>
 8003096:	e032      	b.n	80030fe <StartRpiTask+0x71e>
				  }
				  else
				  {
					  times_acceptable=0;
 8003098:	4b95      	ldr	r3, [pc, #596]	; (80032f0 <StartRpiTask+0x910>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
					  moveCarLeft903(45);
 800309e:	ed9f 0b8c 	vldr	d0, [pc, #560]	; 80032d0 <StartRpiTask+0x8f0>
 80030a2:	f7fe ff7d 	bl	8001fa0 <moveCarLeft903>
					  moveCarRight903(45);
 80030a6:	ed9f 0b8a 	vldr	d0, [pc, #552]	; 80032d0 <StartRpiTask+0x8f0>
 80030aa:	f7fe fe9b 	bl	8001de4 <moveCarRight903>
					  osDelay(50);
 80030ae:	2032      	movs	r0, #50	; 0x32
 80030b0:	f005 fef8 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 80030b4:	e00a      	b.n	80030cc <StartRpiTask+0x6ec>
					  {
						  times_acceptable=0;
 80030b6:	4b8e      	ldr	r3, [pc, #568]	; (80032f0 <StartRpiTask+0x910>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
						  moveCarStraight(10);
 80030bc:	ed9f 0b82 	vldr	d0, [pc, #520]	; 80032c8 <StartRpiTask+0x8e8>
 80030c0:	f7fe fc92 	bl	80019e8 <moveCarStraight>
						  osDelay(500);
 80030c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030c8:	f005 feec 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 80030cc:	4b87      	ldr	r3, [pc, #540]	; (80032ec <StartRpiTask+0x90c>)
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2b13      	cmp	r3, #19
 80030d2:	d8f0      	bhi.n	80030b6 <StartRpiTask+0x6d6>

					  }

						  e_brake=1;
 80030d4:	4b87      	ldr	r3, [pc, #540]	; (80032f4 <StartRpiTask+0x914>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
						  flagDone=1;
 80030da:	4b87      	ldr	r3, [pc, #540]	; (80032f8 <StartRpiTask+0x918>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]
						  aRxBuffer[0] = 'D';
 80030e0:	4b86      	ldr	r3, [pc, #536]	; (80032fc <StartRpiTask+0x91c>)
 80030e2:	2244      	movs	r2, #68	; 0x44
 80030e4:	701a      	strb	r2, [r3, #0]
						  aRxBuffer[1] = 'O';
 80030e6:	4b85      	ldr	r3, [pc, #532]	; (80032fc <StartRpiTask+0x91c>)
 80030e8:	224f      	movs	r2, #79	; 0x4f
 80030ea:	705a      	strb	r2, [r3, #1]
						  aRxBuffer[2] = 'N';
 80030ec:	4b83      	ldr	r3, [pc, #524]	; (80032fc <StartRpiTask+0x91c>)
 80030ee:	224e      	movs	r2, #78	; 0x4e
 80030f0:	709a      	strb	r2, [r3, #2]
						  aRxBuffer[3] = 'E';
 80030f2:	4b82      	ldr	r3, [pc, #520]	; (80032fc <StartRpiTask+0x91c>)
 80030f4:	2245      	movs	r2, #69	; 0x45
 80030f6:	70da      	strb	r2, [r3, #3]
						  aRxBuffer[4] = '!';
 80030f8:	4b80      	ldr	r3, [pc, #512]	; (80032fc <StartRpiTask+0x91c>)
 80030fa:	2221      	movs	r2, #33	; 0x21
 80030fc:	711a      	strb	r2, [r3, #4]
				  }
				  osDelay(10);
 80030fe:	200a      	movs	r0, #10
 8003100:	f005 fed0 	bl	8008ea4 <osDelay>
				  break;
 8003104:	e0ae      	b.n	8003264 <StartRpiTask+0x884>

			  case 'P': //After R, L
				  if(second)
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d044      	beq.n	8003196 <StartRpiTask+0x7b6>
				  {
					  moveCarLeft90(90);
 800310c:	ed9f 0b64 	vldr	d0, [pc, #400]	; 80032a0 <StartRpiTask+0x8c0>
 8003110:	f7fe feb2 	bl	8001e78 <moveCarLeft90>
					  htim1.Instance->CCR4 = 149;
 8003114:	4b74      	ldr	r3, [pc, #464]	; (80032e8 <StartRpiTask+0x908>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2295      	movs	r2, #149	; 0x95
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
					  osDelay(50);
 800311c:	2032      	movs	r0, #50	; 0x32
 800311e:	f005 fec1 	bl	8008ea4 <osDelay>
					  moveCarStraight(25);
 8003122:	ed9f 0b6d 	vldr	d0, [pc, #436]	; 80032d8 <StartRpiTask+0x8f8>
 8003126:	f7fe fc5f 	bl	80019e8 <moveCarStraight>
					  osDelay(1000);
 800312a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800312e:	f005 feb9 	bl	8008ea4 <osDelay>
					  moveCarRight902(180);
 8003132:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80032b0 <StartRpiTask+0x8d0>
 8003136:	f7fe fe0b 	bl	8001d50 <moveCarRight902>
					  osDelay(500);
 800313a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800313e:	f005 feb1 	bl	8008ea4 <osDelay>
					  moveCarStraight(95);
 8003142:	ed9f 0b67 	vldr	d0, [pc, #412]	; 80032e0 <StartRpiTask+0x900>
 8003146:	f7fe fc4f 	bl	80019e8 <moveCarStraight>
					  osDelay(2000);
 800314a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800314e:	f005 fea9 	bl	8008ea4 <osDelay>
					  moveCarRight902(180);
 8003152:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80032b0 <StartRpiTask+0x8d0>
 8003156:	f7fe fdfb 	bl	8001d50 <moveCarRight902>
					  osDelay(500);
 800315a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800315e:	f005 fea1 	bl	8008ea4 <osDelay>
					  //moveCarStraight(40);
					  //osDelay(500);
					  moveCarLeft(110);
 8003162:	ed9f 0b57 	vldr	d0, [pc, #348]	; 80032c0 <StartRpiTask+0x8e0>
 8003166:	f7fe fd21 	bl	8001bac <moveCarLeft>
					  osDelay(500);
 800316a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800316e:	f005 fe99 	bl	8008ea4 <osDelay>
					  moveCarStraight(10);
 8003172:	ed9f 0b55 	vldr	d0, [pc, #340]	; 80032c8 <StartRpiTask+0x8e8>
 8003176:	f7fe fc37 	bl	80019e8 <moveCarStraight>
					  osDelay(500);
 800317a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800317e:	f005 fe91 	bl	8008ea4 <osDelay>
					  moveCarRight(20);
 8003182:	ed9f 0b49 	vldr	d0, [pc, #292]	; 80032a8 <StartRpiTask+0x8c8>
 8003186:	f7fe fc93 	bl	8001ab0 <moveCarRight>
					  osDelay(500);
 800318a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800318e:	f005 fe89 	bl	8008ea4 <osDelay>
					  second =0;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
				  }


				  if(USdistance >= 50)
 8003196:	4b55      	ldr	r3, [pc, #340]	; (80032ec <StartRpiTask+0x90c>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	2b31      	cmp	r3, #49	; 0x31
 800319c:	d90f      	bls.n	80031be <StartRpiTask+0x7de>
				  {
					  times_acceptable=0;
 800319e:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <StartRpiTask+0x910>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
					  moveCarStraight(USdistance-50);
 80031a4:	4b51      	ldr	r3, [pc, #324]	; (80032ec <StartRpiTask+0x90c>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	3b32      	subs	r3, #50	; 0x32
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f9ba 	bl	8000524 <__aeabi_i2d>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	ec43 2b10 	vmov	d0, r2, r3
 80031b8:	f7fe fc16 	bl	80019e8 <moveCarStraight>
 80031bc:	e032      	b.n	8003224 <StartRpiTask+0x844>
				  }
				  else
				  {
					  times_acceptable=0;
 80031be:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <StartRpiTask+0x910>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
					  moveCarRight903(45);
 80031c4:	ed9f 0b42 	vldr	d0, [pc, #264]	; 80032d0 <StartRpiTask+0x8f0>
 80031c8:	f7fe fe0c 	bl	8001de4 <moveCarRight903>
					  moveCarLeft903(45);
 80031cc:	ed9f 0b40 	vldr	d0, [pc, #256]	; 80032d0 <StartRpiTask+0x8f0>
 80031d0:	f7fe fee6 	bl	8001fa0 <moveCarLeft903>
					  osDelay(50);
 80031d4:	2032      	movs	r0, #50	; 0x32
 80031d6:	f005 fe65 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 80031da:	e00a      	b.n	80031f2 <StartRpiTask+0x812>
					  {
						  times_acceptable=0;
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <StartRpiTask+0x910>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
						  moveCarStraight(10);
 80031e2:	ed9f 0b39 	vldr	d0, [pc, #228]	; 80032c8 <StartRpiTask+0x8e8>
 80031e6:	f7fe fbff 	bl	80019e8 <moveCarStraight>
						  osDelay(500);
 80031ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031ee:	f005 fe59 	bl	8008ea4 <osDelay>
					  while(USdistance >=20)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <StartRpiTask+0x90c>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	2b13      	cmp	r3, #19
 80031f8:	d8f0      	bhi.n	80031dc <StartRpiTask+0x7fc>

					  }

						  e_brake=1;
 80031fa:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <StartRpiTask+0x914>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
						  flagDone=1;
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <StartRpiTask+0x918>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
						  aRxBuffer[0] = 'D';
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <StartRpiTask+0x91c>)
 8003208:	2244      	movs	r2, #68	; 0x44
 800320a:	701a      	strb	r2, [r3, #0]
						  aRxBuffer[1] = 'O';
 800320c:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <StartRpiTask+0x91c>)
 800320e:	224f      	movs	r2, #79	; 0x4f
 8003210:	705a      	strb	r2, [r3, #1]
						  aRxBuffer[2] = 'N';
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <StartRpiTask+0x91c>)
 8003214:	224e      	movs	r2, #78	; 0x4e
 8003216:	709a      	strb	r2, [r3, #2]
						  aRxBuffer[3] = 'E';
 8003218:	4b38      	ldr	r3, [pc, #224]	; (80032fc <StartRpiTask+0x91c>)
 800321a:	2245      	movs	r2, #69	; 0x45
 800321c:	70da      	strb	r2, [r3, #3]
						  aRxBuffer[4] = '!';
 800321e:	4b37      	ldr	r3, [pc, #220]	; (80032fc <StartRpiTask+0x91c>)
 8003220:	2221      	movs	r2, #33	; 0x21
 8003222:	711a      	strb	r2, [r3, #4]
				  }
				  osDelay(10);
 8003224:	200a      	movs	r0, #10
 8003226:	f005 fe3d 	bl	8008ea4 <osDelay>
				  break;
 800322a:	e01b      	b.n	8003264 <StartRpiTask+0x884>
//				  aRxBuffer[4] = '!';
//				  osDelay(100);

//				  break;
		  	  case 'Z':
		  		  buzzerBeep();
 800322c:	f7fe fbc2 	bl	80019b4 <buzzerBeep>
		  		  flagDone=1;
 8003230:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <StartRpiTask+0x918>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
		  		  times_acceptable=0;
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <StartRpiTask+0x910>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0] = 'D';
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <StartRpiTask+0x91c>)
 800323e:	2244      	movs	r2, #68	; 0x44
 8003240:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1] = 'O';
 8003242:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <StartRpiTask+0x91c>)
 8003244:	224f      	movs	r2, #79	; 0x4f
 8003246:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2] = 'N';
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <StartRpiTask+0x91c>)
 800324a:	224e      	movs	r2, #78	; 0x4e
 800324c:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3] = 'E';
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <StartRpiTask+0x91c>)
 8003250:	2245      	movs	r2, #69	; 0x45
 8003252:	70da      	strb	r2, [r3, #3]
				  aRxBuffer[4] = '!';
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <StartRpiTask+0x91c>)
 8003256:	2221      	movs	r2, #33	; 0x21
 8003258:	711a      	strb	r2, [r3, #4]
				  osDelay(100);
 800325a:	2064      	movs	r0, #100	; 0x64
 800325c:	f005 fe22 	bl	8008ea4 <osDelay>
				  break;
 8003260:	e000      	b.n	8003264 <StartRpiTask+0x884>
			  default:
				  break;
 8003262:	bf00      	nop
	  }



	  // send ack back to rpi and ready for next instruction
		if(flagDone==1){
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <StartRpiTask+0x918>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d113      	bne.n	8003294 <StartRpiTask+0x8b4>
			osDelay(50);
 800326c:	2032      	movs	r0, #50	; 0x32
 800326e:	f005 fe19 	bl	8008ea4 <osDelay>
			sprintf(ch,"ACK");
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4922      	ldr	r1, [pc, #136]	; (8003300 <StartRpiTask+0x920>)
 8003278:	4618      	mov	r0, r3
 800327a:	f008 ffc5 	bl	800c208 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 10,0xFFFF);
 800327e:	f107 010c 	add.w	r1, r7, #12
 8003282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003286:	220a      	movs	r2, #10
 8003288:	481e      	ldr	r0, [pc, #120]	; (8003304 <StartRpiTask+0x924>)
 800328a:	f004 fcd0 	bl	8007c2e <HAL_UART_Transmit>
			flagDone = 0;
 800328e:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <StartRpiTask+0x918>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
		}
		osDelay(10);
 8003294:	200a      	movs	r0, #10
 8003296:	f005 fe05 	bl	8008ea4 <osDelay>
	  magnitude = 0;
 800329a:	f7ff bbbc 	b.w	8002a16 <StartRpiTask+0x36>
 800329e:	bf00      	nop
 80032a0:	00000000 	.word	0x00000000
 80032a4:	40568000 	.word	0x40568000
 80032a8:	00000000 	.word	0x00000000
 80032ac:	40340000 	.word	0x40340000
 80032b0:	00000000 	.word	0x00000000
 80032b4:	40668000 	.word	0x40668000
 80032b8:	00000000 	.word	0x00000000
 80032bc:	40590000 	.word	0x40590000
 80032c0:	00000000 	.word	0x00000000
 80032c4:	405b8000 	.word	0x405b8000
 80032c8:	00000000 	.word	0x00000000
 80032cc:	40240000 	.word	0x40240000
 80032d0:	00000000 	.word	0x00000000
 80032d4:	40468000 	.word	0x40468000
 80032d8:	00000000 	.word	0x00000000
 80032dc:	40390000 	.word	0x40390000
 80032e0:	00000000 	.word	0x00000000
 80032e4:	4057c000 	.word	0x4057c000
 80032e8:	20000250 	.word	0x20000250
 80032ec:	20000492 	.word	0x20000492
 80032f0:	20000440 	.word	0x20000440
 80032f4:	20000444 	.word	0x20000444
 80032f8:	20000430 	.word	0x20000430
 80032fc:	2000041c 	.word	0x2000041c
 8003300:	0800e624 	.word	0x0800e624
 8003304:	200003b8 	.word	0x200003b8

08003308 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */
	gyroInit();
 8003310:	f7ff f818 	bl	8002344 <gyroInit>
	uint8_t val[2] = {0,0};
 8003314:	2300      	movs	r3, #0
 8003316:	813b      	strh	r3, [r7, #8]

	int16_t angular_speed = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	817b      	strh	r3, [r7, #10]

	uint32_t tick = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
	double offset = 0;
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double trash= 0;
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int i=0;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
	while(i<100){
 800333c:	e048      	b.n	80033d0 <StartGyroTask+0xc8>
		osDelay(50);
 800333e:	2032      	movs	r0, #50	; 0x32
 8003340:	f005 fdb0 	bl	8008ea4 <osDelay>
		readByte(0x37, val);
 8003344:	f107 0308 	add.w	r3, r7, #8
 8003348:	4619      	mov	r1, r3
 800334a:	2037      	movs	r0, #55	; 0x37
 800334c:	f7fe ffaa 	bl	80022a4 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 8003350:	7a3b      	ldrb	r3, [r7, #8]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	b21a      	sxth	r2, r3
 8003356:	7a7b      	ldrb	r3, [r7, #9]
 8003358:	b21b      	sxth	r3, r3
 800335a:	4313      	orrs	r3, r2
 800335c:	817b      	strh	r3, [r7, #10]
		trash +=(double)((double)angular_speed)*((HAL_GetTick() - tick)/16400.0);
 800335e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f8de 	bl	8000524 <__aeabi_i2d>
 8003368:	4604      	mov	r4, r0
 800336a:	460d      	mov	r5, r1
 800336c:	f000 ff86 	bl	800427c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f8c4 	bl	8000504 <__aeabi_ui2d>
 800337c:	a345      	add	r3, pc, #276	; (adr r3, 8003494 <StartGyroTask+0x18c>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f7fd fa63 	bl	800084c <__aeabi_ddiv>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f7fd f933 	bl	80005f8 <__aeabi_dmul>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800339a:	f7fc ff77 	bl	800028c <__adddf3>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		offset += angular_speed;
 80033a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f8ba 	bl	8000524 <__aeabi_i2d>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033b8:	f7fc ff68 	bl	800028c <__adddf3>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		tick = HAL_GetTick();
 80033c4:	f000 ff5a 	bl	800427c <HAL_GetTick>
 80033c8:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3301      	adds	r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
	while(i<100){
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b63      	cmp	r3, #99	; 0x63
 80033d4:	ddb3      	ble.n	800333e <StartGyroTask+0x36>
	}
	offset = offset/i;
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7fd f8a4 	bl	8000524 <__aeabi_i2d>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033e4:	f7fd fa32 	bl	800084c <__aeabi_ddiv>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	buzzerBeep();
 80033f0:	f7fe fae0 	bl	80019b4 <buzzerBeep>
	tick = HAL_GetTick();
 80033f4:	f000 ff42 	bl	800427c <HAL_GetTick>
 80033f8:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
		osDelay(50);
 80033fa:	2032      	movs	r0, #50	; 0x32
 80033fc:	f005 fd52 	bl	8008ea4 <osDelay>
		readByte(0x37, val);
 8003400:	f107 0308 	add.w	r3, r7, #8
 8003404:	4619      	mov	r1, r3
 8003406:	2037      	movs	r0, #55	; 0x37
 8003408:	f7fe ff4c 	bl	80022a4 <readByte>
		angular_speed = (val[0] << 8) | val[1];
 800340c:	7a3b      	ldrb	r3, [r7, #8]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	b21a      	sxth	r2, r3
 8003412:	7a7b      	ldrb	r3, [r7, #9]
 8003414:	b21b      	sxth	r3, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	817b      	strh	r3, [r7, #10]
		total_angle +=(double)((double)angular_speed - offset)*((HAL_GetTick() - tick)/16400.0);
 800341a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd f880 	bl	8000524 <__aeabi_i2d>
 8003424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003428:	f7fc ff2e 	bl	8000288 <__aeabi_dsub>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4614      	mov	r4, r2
 8003432:	461d      	mov	r5, r3
 8003434:	f000 ff22 	bl	800427c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f860 	bl	8000504 <__aeabi_ui2d>
 8003444:	a313      	add	r3, pc, #76	; (adr r3, 8003494 <StartGyroTask+0x18c>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fd f9ff 	bl	800084c <__aeabi_ddiv>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4620      	mov	r0, r4
 8003454:	4629      	mov	r1, r5
 8003456:	f7fd f8cf 	bl	80005f8 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <StartGyroTask+0x188>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fc ff10 	bl	800028c <__adddf3>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <StartGyroTask+0x188>)
 8003472:	e9c1 2300 	strd	r2, r3, [r1]
		i -= angular_speed;
 8003476:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	60fb      	str	r3, [r7, #12]
		tick = HAL_GetTick();
 8003480:	f000 fefc 	bl	800427c <HAL_GetTick>
 8003484:	6278      	str	r0, [r7, #36]	; 0x24
		i++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3301      	adds	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
		osDelay(50);
 800348c:	e7b5      	b.n	80033fa <StartGyroTask+0xf2>
 800348e:	bf00      	nop
 8003490:	20000460 	.word	0x20000460
 8003494:	00000000 	.word	0x00000000
 8003498:	40d00400 	.word	0x40d00400

0800349c <StartBulleyesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBulleyesTask */
void StartBulleyesTask(void *argument)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
//	strncpy(instructBuffer[29],"P___2"  , 5);



  /* Infinite loop */
  for(;;)
 80034a4:	e7fe      	b.n	80034a4 <StartBulleyesTask+0x8>
	...

080034a8 <StartEncoderRightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderRightTask */
void StartEncoderRightTask(void *argument)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderRightTask */
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80034b0:	213c      	movs	r1, #60	; 0x3c
 80034b2:	481d      	ldr	r0, [pc, #116]	; (8003528 <StartEncoderRightTask+0x80>)
 80034b4:	f003 fa2a 	bl	800690c <HAL_TIM_Encoder_Start>
	int cnt1;
	int dirR = 1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 80034bc:	f000 fede 	bl	800427c <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 80034c2:	f000 fedb 	bl	800427c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b0a      	cmp	r3, #10
 80034ce:	d9f8      	bls.n	80034c2 <StartEncoderRightTask+0x1a>
		{
			cnt1 = __HAL_TIM_GET_COUNTER(&htim3);
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <StartEncoderRightTask+0x80>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	60bb      	str	r3, [r7, #8]
			if(cnt1 > 32000){
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80034de:	dd06      	ble.n	80034ee <StartEncoderRightTask+0x46>
				dirR = 1;
 80034e0:	2301      	movs	r3, #1
 80034e2:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt1);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	e004      	b.n	80034f8 <StartEncoderRightTask+0x50>
			} else {
				dirR = -1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	617b      	str	r3, [r7, #20]
				diff = cnt1;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	613b      	str	r3, [r7, #16]

			}

			if(dirR == 1){
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d106      	bne.n	800350c <StartEncoderRightTask+0x64>
				rightEncoderVal -= diff;
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <StartEncoderRightTask+0x84>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <StartEncoderRightTask+0x84>)
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e005      	b.n	8003518 <StartEncoderRightTask+0x70>
			} else {
				rightEncoderVal += diff;
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <StartEncoderRightTask+0x84>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	4a05      	ldr	r2, [pc, #20]	; (800352c <StartEncoderRightTask+0x84>)
 8003516:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <StartEncoderRightTask+0x80>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2200      	movs	r2, #0
 800351e:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8003520:	f000 feac 	bl	800427c <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 8003526:	e7cc      	b.n	80034c2 <StartEncoderRightTask+0x1a>
 8003528:	200002e0 	.word	0x200002e0
 800352c:	20000448 	.word	0x20000448

08003530 <StartEncoderLeftTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderLeftTask */
void StartEncoderLeftTask(void *argument)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderLeftTask */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8003538:	213c      	movs	r1, #60	; 0x3c
 800353a:	481d      	ldr	r0, [pc, #116]	; (80035b0 <StartEncoderLeftTask+0x80>)
 800353c:	f003 f9e6 	bl	800690c <HAL_TIM_Encoder_Start>
	int cnt2;
	int dirL = 1;
 8003540:	2301      	movs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
	int diff;
	uint32_t tick = HAL_GetTick();
 8003544:	f000 fe9a 	bl	800427c <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		if(HAL_GetTick()-tick > 10L)
 800354a:	f000 fe97 	bl	800427c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b0a      	cmp	r3, #10
 8003556:	d9f8      	bls.n	800354a <StartEncoderLeftTask+0x1a>
		{
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <StartEncoderLeftTask+0x80>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	60bb      	str	r3, [r7, #8]

			if(cnt2 > 32000){
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003566:	dd06      	ble.n	8003576 <StartEncoderLeftTask+0x46>
				dirL = 1;
 8003568:	2301      	movs	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
				diff = (65536 - cnt2);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e004      	b.n	8003580 <StartEncoderLeftTask+0x50>
			} else {
				dirL = -1;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295
 800357a:	617b      	str	r3, [r7, #20]
				diff = cnt2;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	613b      	str	r3, [r7, #16]
			}
			if(dirL == 1){
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d106      	bne.n	8003594 <StartEncoderLeftTask+0x64>
				leftEncoderVal += diff;
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <StartEncoderLeftTask+0x84>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <StartEncoderLeftTask+0x84>)
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e005      	b.n	80035a0 <StartEncoderLeftTask+0x70>
			} else {
				leftEncoderVal -= diff;
 8003594:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <StartEncoderLeftTask+0x84>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <StartEncoderLeftTask+0x84>)
 800359e:	6013      	str	r3, [r2, #0]
			}

			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80035a0:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <StartEncoderLeftTask+0x80>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 80035a8:	f000 fe68 	bl	800427c <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]
		if(HAL_GetTick()-tick > 10L)
 80035ae:	e7cc      	b.n	800354a <StartEncoderLeftTask+0x1a>
 80035b0:	20000298 	.word	0x20000298
 80035b4:	2000044c 	.word	0x2000044c

080035b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035bc:	b672      	cpsid	i
}
 80035be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035c0:	e7fe      	b.n	80035c0 <Error_Handler+0x8>
	...

080035c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <HAL_MspInit+0x64>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_MspInit+0x64>)
 80035d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d8:	6453      	str	r3, [r2, #68]	; 0x44
 80035da:	4b13      	ldr	r3, [pc, #76]	; (8003628 <HAL_MspInit+0x64>)
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	4b0f      	ldr	r3, [pc, #60]	; (8003628 <HAL_MspInit+0x64>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <HAL_MspInit+0x64>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6413      	str	r3, [r2, #64]	; 0x40
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <HAL_MspInit+0x64>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	210f      	movs	r1, #15
 8003606:	f06f 0001 	mvn.w	r0, #1
 800360a:	f000 ff42 	bl	8004492 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2105      	movs	r1, #5
 8003612:	2005      	movs	r0, #5
 8003614:	f000 ff3d 	bl	8004492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003618:	2005      	movs	r0, #5
 800361a:	f000 ff56 	bl	80044ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800

0800362c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_I2C_MspInit+0x84>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12c      	bne.n	80036a8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_I2C_MspInit+0x88>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_I2C_MspInit+0x88>)
 8003658:	f043 0302 	orr.w	r3, r3, #2
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_I2C_MspInit+0x88>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800366a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800366e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003670:	2312      	movs	r3, #18
 8003672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003678:	2303      	movs	r3, #3
 800367a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800367c:	2304      	movs	r3, #4
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	4619      	mov	r1, r3
 8003686:	480c      	ldr	r0, [pc, #48]	; (80036b8 <HAL_I2C_MspInit+0x8c>)
 8003688:	f000 ffcc 	bl	8004624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_I2C_MspInit+0x88>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <HAL_I2C_MspInit+0x88>)
 8003696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_I2C_MspInit+0x88>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036a8:	bf00      	nop
 80036aa:	3728      	adds	r7, #40	; 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40005400 	.word	0x40005400
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020400 	.word	0x40020400

080036bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2f      	ldr	r2, [pc, #188]	; (8003798 <HAL_TIM_Base_MspInit+0xdc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11e      	bne.n	800371c <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4a2d      	ldr	r2, [pc, #180]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44
 80036ee:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80036fa:	2200      	movs	r2, #0
 80036fc:	2105      	movs	r1, #5
 80036fe:	2018      	movs	r0, #24
 8003700:	f000 fec7 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003704:	2018      	movs	r0, #24
 8003706:	f000 fee0 	bl	80044ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800370a:	2200      	movs	r2, #0
 800370c:	2105      	movs	r1, #5
 800370e:	2019      	movs	r0, #25
 8003710:	f000 febf 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003714:	2019      	movs	r0, #25
 8003716:	f000 fed8 	bl	80044ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800371a:	e038      	b.n	800378e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_TIM_Base_MspInit+0xe4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d133      	bne.n	800378e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a1b      	ldr	r2, [pc, #108]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	6313      	str	r3, [r2, #48]	; 0x30
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_TIM_Base_MspInit+0xe0>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800375e:	23c0      	movs	r3, #192	; 0xc0
 8003760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	2302      	movs	r3, #2
 8003764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376a:	2300      	movs	r3, #0
 800376c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800376e:	2303      	movs	r3, #3
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	4619      	mov	r1, r3
 8003778:	480a      	ldr	r0, [pc, #40]	; (80037a4 <HAL_TIM_Base_MspInit+0xe8>)
 800377a:	f000 ff53 	bl	8004624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2105      	movs	r1, #5
 8003782:	202d      	movs	r0, #45	; 0x2d
 8003784:	f000 fe85 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003788:	202d      	movs	r0, #45	; 0x2d
 800378a:	f000 fe9e 	bl	80044ca <HAL_NVIC_EnableIRQ>
}
 800378e:	bf00      	nop
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40010000 	.word	0x40010000
 800379c:	40023800 	.word	0x40023800
 80037a0:	40010400 	.word	0x40010400
 80037a4:	40020800 	.word	0x40020800

080037a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08c      	sub	sp, #48	; 0x30
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 031c 	add.w	r3, r7, #28
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d14b      	bne.n	8003862 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a3e      	ldr	r2, [pc, #248]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b3c      	ldr	r3, [pc, #240]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	4b38      	ldr	r3, [pc, #224]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a37      	ldr	r2, [pc, #220]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b35      	ldr	r3, [pc, #212]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_CH1_Pin;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003830:	2301      	movs	r3, #1
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH1_GPIO_Port, &GPIO_InitStruct);
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	4619      	mov	r1, r3
 800383a:	4825      	ldr	r0, [pc, #148]	; (80038d0 <HAL_TIM_Encoder_MspInit+0x128>)
 800383c:	f000 fef2 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderA_CH2_Pin;
 8003840:	2308      	movs	r3, #8
 8003842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	2300      	movs	r3, #0
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003850:	2301      	movs	r3, #1
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EncoderA_CH2_GPIO_Port, &GPIO_InitStruct);
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	4619      	mov	r1, r3
 800385a:	481e      	ldr	r0, [pc, #120]	; (80038d4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800385c:	f000 fee2 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003860:	e030      	b.n	80038c4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_TIM_Encoder_MspInit+0x130>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d12b      	bne.n	80038c4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 8003876:	f043 0302 	orr.w	r3, r3, #2
 800387a:	6413      	str	r3, [r2, #64]	; 0x40
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4a0e      	ldr	r2, [pc, #56]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	6313      	str	r3, [r2, #48]	; 0x30
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_TIM_Encoder_MspInit+0x124>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderB_CH1_Pin|EncoderB_CH2_Pin;
 80038a4:	23c0      	movs	r3, #192	; 0xc0
 80038a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a8:	2302      	movs	r3, #2
 80038aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	2300      	movs	r3, #0
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038b4:	2302      	movs	r3, #2
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	f107 031c 	add.w	r3, r7, #28
 80038bc:	4619      	mov	r1, r3
 80038be:	4804      	ldr	r0, [pc, #16]	; (80038d0 <HAL_TIM_Encoder_MspInit+0x128>)
 80038c0:	f000 feb0 	bl	8004624 <HAL_GPIO_Init>
}
 80038c4:	bf00      	nop
 80038c6:	3730      	adds	r7, #48	; 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40020400 	.word	0x40020400
 80038d8:	40000400 	.word	0x40000400

080038dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_TIM_IC_MspInit+0x94>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d134      	bne.n	8003968 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_TIM_IC_MspInit+0x98>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_TIM_IC_MspInit+0x98>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_TIM_IC_MspInit+0x98>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_TIM_IC_MspInit+0x98>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <HAL_TIM_IC_MspInit+0x98>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_TIM_IC_MspInit+0x98>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8003936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003944:	2300      	movs	r3, #0
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003948:	2302      	movs	r3, #2
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4619      	mov	r1, r3
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <HAL_TIM_IC_MspInit+0x9c>)
 8003954:	f000 fe66 	bl	8004624 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003958:	2200      	movs	r2, #0
 800395a:	2105      	movs	r1, #5
 800395c:	201e      	movs	r0, #30
 800395e:	f000 fd98 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003962:	201e      	movs	r0, #30
 8003964:	f000 fdb1 	bl	80044ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003968:	bf00      	nop
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40000800 	.word	0x40000800
 8003974:	40023800 	.word	0x40023800
 8003978:	40020c00 	.word	0x40020c00

0800397c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <HAL_TIM_MspPostInit+0x68>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d11e      	bne.n	80039dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_TIM_MspPostInit+0x6c>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <HAL_TIM_MspPostInit+0x6c>)
 80039a8:	f043 0310 	orr.w	r3, r3, #16
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <HAL_TIM_MspPostInit+0x6c>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80039ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039cc:	2301      	movs	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	4619      	mov	r1, r3
 80039d6:	4805      	ldr	r0, [pc, #20]	; (80039ec <HAL_TIM_MspPostInit+0x70>)
 80039d8:	f000 fe24 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80039dc:	bf00      	nop
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40021000 	.word	0x40021000

080039f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <HAL_UART_MspInit+0x94>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d134      	bne.n	8003a7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <HAL_UART_MspInit+0x98>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_UART_MspInit+0x98>)
 8003a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_UART_MspInit+0x98>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_UART_MspInit+0x98>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <HAL_UART_MspInit+0x98>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_UART_MspInit+0x98>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a5c:	2307      	movs	r3, #7
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a60:	f107 0314 	add.w	r3, r7, #20
 8003a64:	4619      	mov	r1, r3
 8003a66:	4809      	ldr	r0, [pc, #36]	; (8003a8c <HAL_UART_MspInit+0x9c>)
 8003a68:	f000 fddc 	bl	8004624 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2105      	movs	r1, #5
 8003a70:	2027      	movs	r0, #39	; 0x27
 8003a72:	f000 fd0e 	bl	8004492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a76:	2027      	movs	r0, #39	; 0x27
 8003a78:	f000 fd27 	bl	80044ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a7c:	bf00      	nop
 8003a7e:	3728      	adds	r7, #40	; 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40004800 	.word	0x40004800
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020800 	.word	0x40020800

08003a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <NMI_Handler+0x4>

08003a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <HardFault_Handler+0x4>

08003a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <MemManage_Handler+0x4>

08003aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa6:	e7fe      	b.n	8003aa6 <BusFault_Handler+0x4>

08003aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aac:	e7fe      	b.n	8003aac <UsageFault_Handler+0x4>

08003aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac0:	f000 fbc8 	bl	8004254 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003ac4:	f006 fe26 	bl	800a714 <xTaskGetSchedulerState>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d001      	beq.n	8003ad2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003ace:	f007 fc0b 	bl	800b2e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003aea:	f002 ff9d 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000250 	.word	0x20000250

08003af8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003afe:	f002 ff93 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000250 	.word	0x20000250

08003b0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <TIM4_IRQHandler+0x10>)
 8003b12:	f002 ff89 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000328 	.word	0x20000328

08003b20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <USART3_IRQHandler+0x10>)
 8003b26:	f004 f945 	bl	8007db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200003b8 	.word	0x200003b8

08003b34 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003b3a:	f002 ff75 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000370 	.word	0x20000370

08003b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return 1;
 8003b4c:	2301      	movs	r3, #1
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_kill>:

int _kill(int pid, int sig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b62:	f008 fc5d 	bl	800c420 <__errno>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2216      	movs	r2, #22
 8003b6a:	601a      	str	r2, [r3, #0]
  return -1;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_exit>:

void _exit (int status)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffe7 	bl	8003b58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b8a:	e7fe      	b.n	8003b8a <_exit+0x12>

08003b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e00a      	b.n	8003bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b9e:	f3af 8000 	nop.w
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	60ba      	str	r2, [r7, #8]
 8003baa:	b2ca      	uxtb	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	dbf0      	blt.n	8003b9e <_read+0x12>
  }

  return len;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e009      	b.n	8003bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60ba      	str	r2, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dbf1      	blt.n	8003bd8 <_write+0x12>
  }
  return len;
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_close>:

int _close(int file)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c26:	605a      	str	r2, [r3, #4]
  return 0;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_isatty>:

int _isatty(int file)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c3e:	2301      	movs	r3, #1
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <_sbrk+0x5c>)
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <_sbrk+0x60>)
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <_sbrk+0x64>)
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <_sbrk+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <_sbrk+0x64>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d207      	bcs.n	8003ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c98:	f008 fbc2 	bl	800c420 <__errno>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	e009      	b.n	8003cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <_sbrk+0x64>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <_sbrk+0x64>)
 8003cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20020000 	.word	0x20020000
 8003cc8:	00000400 	.word	0x00000400
 8003ccc:	20000494 	.word	0x20000494
 8003cd0:	200053d0 	.word	0x200053d0

08003cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <SystemInit+0x20>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	4a05      	ldr	r2, [pc, #20]	; (8003cf4 <SystemInit+0x20>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cfc:	480d      	ldr	r0, [pc, #52]	; (8003d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cfe:	490e      	ldr	r1, [pc, #56]	; (8003d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d04:	e002      	b.n	8003d0c <LoopCopyDataInit>

08003d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0a:	3304      	adds	r3, #4

08003d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d10:	d3f9      	bcc.n	8003d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d14:	4c0b      	ldr	r4, [pc, #44]	; (8003d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d18:	e001      	b.n	8003d1e <LoopFillZerobss>

08003d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d1c:	3204      	adds	r2, #4

08003d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d20:	d3fb      	bcc.n	8003d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d22:	f7ff ffd7 	bl	8003cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d26:	f008 fb81 	bl	800c42c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2a:	f7fd f8f1 	bl	8000f10 <main>
  bx  lr    
 8003d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d38:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003d3c:	0800f55c 	.word	0x0800f55c
  ldr r2, =_sbss
 8003d40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003d44:	200053d0 	.word	0x200053d0

08003d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d48:	e7fe      	b.n	8003d48 <ADC_IRQHandler>
	...

08003d4c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003d52:	2300      	movs	r3, #0
 8003d54:	71fb      	strb	r3, [r7, #7]
 8003d56:	e026      	b.n	8003da6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	3b50      	subs	r3, #80	; 0x50
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f82b 	bl	8003dbc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003d66:	2100      	movs	r1, #0
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f000 f827 	bl	8003dbc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003d6e:	2100      	movs	r1, #0
 8003d70:	2010      	movs	r0, #16
 8003d72:	f000 f823 	bl	8003dbc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003d76:	2300      	movs	r3, #0
 8003d78:	71bb      	strb	r3, [r7, #6]
 8003d7a:	e00d      	b.n	8003d98 <OLED_Refresh_Gram+0x4c>
 8003d7c:	79ba      	ldrb	r2, [r7, #6]
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	490d      	ldr	r1, [pc, #52]	; (8003db8 <OLED_Refresh_Gram+0x6c>)
 8003d82:	00d2      	lsls	r2, r2, #3
 8003d84:	440a      	add	r2, r1
 8003d86:	4413      	add	r3, r2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f815 	bl	8003dbc <OLED_WR_Byte>
 8003d92:	79bb      	ldrb	r3, [r7, #6]
 8003d94:	3301      	adds	r3, #1
 8003d96:	71bb      	strb	r3, [r7, #6]
 8003d98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	daed      	bge.n	8003d7c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	3301      	adds	r3, #1
 8003da4:	71fb      	strb	r3, [r7, #7]
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	2b07      	cmp	r3, #7
 8003daa:	d9d5      	bls.n	8003d58 <OLED_Refresh_Gram+0xc>
	}   
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000498 	.word	0x20000498

08003dbc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	71fb      	strb	r3, [r7, #7]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8003dcc:	79bb      	ldrb	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dd8:	481c      	ldr	r0, [pc, #112]	; (8003e4c <OLED_WR_Byte+0x90>)
 8003dda:	f000 fdbf 	bl	800495c <HAL_GPIO_WritePin>
 8003dde:	e005      	b.n	8003dec <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003de6:	4819      	ldr	r0, [pc, #100]	; (8003e4c <OLED_WR_Byte+0x90>)
 8003de8:	f000 fdb8 	bl	800495c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e01e      	b.n	8003e30 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8003df2:	2200      	movs	r2, #0
 8003df4:	2120      	movs	r1, #32
 8003df6:	4815      	ldr	r0, [pc, #84]	; (8003e4c <OLED_WR_Byte+0x90>)
 8003df8:	f000 fdb0 	bl	800495c <HAL_GPIO_WritePin>
		if(dat&0x80)
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da05      	bge.n	8003e10 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8003e04:	2201      	movs	r2, #1
 8003e06:	2140      	movs	r1, #64	; 0x40
 8003e08:	4810      	ldr	r0, [pc, #64]	; (8003e4c <OLED_WR_Byte+0x90>)
 8003e0a:	f000 fda7 	bl	800495c <HAL_GPIO_WritePin>
 8003e0e:	e004      	b.n	8003e1a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8003e10:	2200      	movs	r2, #0
 8003e12:	2140      	movs	r1, #64	; 0x40
 8003e14:	480d      	ldr	r0, [pc, #52]	; (8003e4c <OLED_WR_Byte+0x90>)
 8003e16:	f000 fda1 	bl	800495c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	480b      	ldr	r0, [pc, #44]	; (8003e4c <OLED_WR_Byte+0x90>)
 8003e20:	f000 fd9c 	bl	800495c <HAL_GPIO_WritePin>
		dat<<=1;   
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b07      	cmp	r3, #7
 8003e34:	d9dd      	bls.n	8003df2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8003e36:	2201      	movs	r2, #1
 8003e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e3c:	4803      	ldr	r0, [pc, #12]	; (8003e4c <OLED_WR_Byte+0x90>)
 8003e3e:	f000 fd8d 	bl	800495c <HAL_GPIO_WritePin>
} 
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000

08003e50 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8003e56:	2300      	movs	r3, #0
 8003e58:	71fb      	strb	r3, [r7, #7]
 8003e5a:	e014      	b.n	8003e86 <OLED_Clear+0x36>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	71bb      	strb	r3, [r7, #6]
 8003e60:	e00a      	b.n	8003e78 <OLED_Clear+0x28>
 8003e62:	79ba      	ldrb	r2, [r7, #6]
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	490c      	ldr	r1, [pc, #48]	; (8003e98 <OLED_Clear+0x48>)
 8003e68:	00d2      	lsls	r2, r2, #3
 8003e6a:	440a      	add	r2, r1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	2200      	movs	r2, #0
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	79bb      	ldrb	r3, [r7, #6]
 8003e74:	3301      	adds	r3, #1
 8003e76:	71bb      	strb	r3, [r7, #6]
 8003e78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	daf0      	bge.n	8003e62 <OLED_Clear+0x12>
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	3301      	adds	r3, #1
 8003e84:	71fb      	strb	r3, [r7, #7]
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	2b07      	cmp	r3, #7
 8003e8a:	d9e7      	bls.n	8003e5c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8003e8c:	f7ff ff5e 	bl	8003d4c <OLED_Refresh_Gram>
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000498 	.word	0x20000498

08003e9c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	71bb      	strb	r3, [r7, #6]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	db41      	blt.n	8003f3e <OLED_DrawPoint+0xa2>
 8003eba:	79bb      	ldrb	r3, [r7, #6]
 8003ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8003ebe:	d83e      	bhi.n	8003f3e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8003ec0:	79bb      	ldrb	r3, [r7, #6]
 8003ec2:	08db      	lsrs	r3, r3, #3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f1c3 0307 	rsb	r3, r3, #7
 8003eca:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8003ecc:	79bb      	ldrb	r3, [r7, #6]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8003ed4:	7b7b      	ldrb	r3, [r7, #13]
 8003ed6:	f1c3 0307 	rsb	r3, r3, #7
 8003eda:	2201      	movs	r2, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8003ee2:	797b      	ldrb	r3, [r7, #5]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <OLED_DrawPoint+0x72>
 8003ee8:	79fa      	ldrb	r2, [r7, #7]
 8003eea:	7bbb      	ldrb	r3, [r7, #14]
 8003eec:	4917      	ldr	r1, [pc, #92]	; (8003f4c <OLED_DrawPoint+0xb0>)
 8003eee:	00d2      	lsls	r2, r2, #3
 8003ef0:	440a      	add	r2, r1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	7818      	ldrb	r0, [r3, #0]
 8003ef6:	79fa      	ldrb	r2, [r7, #7]
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	7bf9      	ldrb	r1, [r7, #15]
 8003efc:	4301      	orrs	r1, r0
 8003efe:	b2c8      	uxtb	r0, r1
 8003f00:	4912      	ldr	r1, [pc, #72]	; (8003f4c <OLED_DrawPoint+0xb0>)
 8003f02:	00d2      	lsls	r2, r2, #3
 8003f04:	440a      	add	r2, r1
 8003f06:	4413      	add	r3, r2
 8003f08:	4602      	mov	r2, r0
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e018      	b.n	8003f40 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8003f0e:	79fa      	ldrb	r2, [r7, #7]
 8003f10:	7bbb      	ldrb	r3, [r7, #14]
 8003f12:	490e      	ldr	r1, [pc, #56]	; (8003f4c <OLED_DrawPoint+0xb0>)
 8003f14:	00d2      	lsls	r2, r2, #3
 8003f16:	440a      	add	r2, r1
 8003f18:	4413      	add	r3, r2
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b25a      	sxtb	r2, r3
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	b25b      	sxtb	r3, r3
 8003f26:	4013      	ands	r3, r2
 8003f28:	b259      	sxtb	r1, r3
 8003f2a:	79fa      	ldrb	r2, [r7, #7]
 8003f2c:	7bbb      	ldrb	r3, [r7, #14]
 8003f2e:	b2c8      	uxtb	r0, r1
 8003f30:	4906      	ldr	r1, [pc, #24]	; (8003f4c <OLED_DrawPoint+0xb0>)
 8003f32:	00d2      	lsls	r2, r2, #3
 8003f34:	440a      	add	r2, r1
 8003f36:	4413      	add	r3, r2
 8003f38:	4602      	mov	r2, r0
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e000      	b.n	8003f40 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8003f3e:	bf00      	nop
}
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000498 	.word	0x20000498

08003f50 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4623      	mov	r3, r4
 8003f60:	71fb      	strb	r3, [r7, #7]
 8003f62:	4603      	mov	r3, r0
 8003f64:	71bb      	strb	r3, [r7, #6]
 8003f66:	460b      	mov	r3, r1
 8003f68:	717b      	strb	r3, [r7, #5]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8003f6e:	79bb      	ldrb	r3, [r7, #6]
 8003f70:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8003f72:	797b      	ldrb	r3, [r7, #5]
 8003f74:	3b20      	subs	r3, #32
 8003f76:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73bb      	strb	r3, [r7, #14]
 8003f7c:	e04d      	b.n	800401a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8003f7e:	793b      	ldrb	r3, [r7, #4]
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	d10b      	bne.n	8003f9c <OLED_ShowChar+0x4c>
 8003f84:	797a      	ldrb	r2, [r7, #5]
 8003f86:	7bb9      	ldrb	r1, [r7, #14]
 8003f88:	4828      	ldr	r0, [pc, #160]	; (800402c <OLED_ShowChar+0xdc>)
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4403      	add	r3, r0
 8003f94:	440b      	add	r3, r1
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	e007      	b.n	8003fac <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8003f9c:	797a      	ldrb	r2, [r7, #5]
 8003f9e:	7bbb      	ldrb	r3, [r7, #14]
 8003fa0:	4923      	ldr	r1, [pc, #140]	; (8004030 <OLED_ShowChar+0xe0>)
 8003fa2:	0112      	lsls	r2, r2, #4
 8003fa4:	440a      	add	r2, r1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	737b      	strb	r3, [r7, #13]
 8003fb0:	e02d      	b.n	800400e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8003fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da07      	bge.n	8003fca <OLED_ShowChar+0x7a>
 8003fba:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fbe:	79b9      	ldrb	r1, [r7, #6]
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff6a 	bl	8003e9c <OLED_DrawPoint>
 8003fc8:	e00c      	b.n	8003fe4 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8003fca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	79b9      	ldrb	r1, [r7, #6]
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff ff5c 	bl	8003e9c <OLED_DrawPoint>
			temp<<=1;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
			y++;
 8003fea:	79bb      	ldrb	r3, [r7, #6]
 8003fec:	3301      	adds	r3, #1
 8003fee:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8003ff0:	79ba      	ldrb	r2, [r7, #6]
 8003ff2:	7b3b      	ldrb	r3, [r7, #12]
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	793b      	ldrb	r3, [r7, #4]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d105      	bne.n	8004008 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8003ffc:	7b3b      	ldrb	r3, [r7, #12]
 8003ffe:	71bb      	strb	r3, [r7, #6]
				x++;
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	3301      	adds	r3, #1
 8004004:	71fb      	strb	r3, [r7, #7]
				break;
 8004006:	e005      	b.n	8004014 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8004008:	7b7b      	ldrb	r3, [r7, #13]
 800400a:	3301      	adds	r3, #1
 800400c:	737b      	strb	r3, [r7, #13]
 800400e:	7b7b      	ldrb	r3, [r7, #13]
 8004010:	2b07      	cmp	r3, #7
 8004012:	d9ce      	bls.n	8003fb2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8004014:	7bbb      	ldrb	r3, [r7, #14]
 8004016:	3301      	adds	r3, #1
 8004018:	73bb      	strb	r3, [r7, #14]
 800401a:	7bba      	ldrb	r2, [r7, #14]
 800401c:	793b      	ldrb	r3, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d3ad      	bcc.n	8003f7e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}
 800402c:	0800e778 	.word	0x0800e778
 8004030:	0800ebec 	.word	0x0800ebec

08004034 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af02      	add	r7, sp, #8
 800403a:	4603      	mov	r3, r0
 800403c:	603a      	str	r2, [r7, #0]
 800403e:	71fb      	strb	r3, [r7, #7]
 8004040:	460b      	mov	r3, r1
 8004042:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8004044:	e01f      	b.n	8004086 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b7a      	cmp	r3, #122	; 0x7a
 800404a:	d904      	bls.n	8004056 <OLED_ShowString+0x22>
 800404c:	2300      	movs	r3, #0
 800404e:	71fb      	strb	r3, [r7, #7]
 8004050:	79bb      	ldrb	r3, [r7, #6]
 8004052:	3310      	adds	r3, #16
 8004054:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8004056:	79bb      	ldrb	r3, [r7, #6]
 8004058:	2b3a      	cmp	r3, #58	; 0x3a
 800405a:	d905      	bls.n	8004068 <OLED_ShowString+0x34>
 800405c:	2300      	movs	r3, #0
 800405e:	71fb      	strb	r3, [r7, #7]
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	71bb      	strb	r3, [r7, #6]
 8004064:	f7ff fef4 	bl	8003e50 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781a      	ldrb	r2, [r3, #0]
 800406c:	79b9      	ldrb	r1, [r7, #6]
 800406e:	79f8      	ldrb	r0, [r7, #7]
 8004070:	2301      	movs	r3, #1
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	230c      	movs	r3, #12
 8004076:	f7ff ff6b 	bl	8003f50 <OLED_ShowChar>
        x+=8;
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	3308      	adds	r3, #8
 800407e:	71fb      	strb	r3, [r7, #7]
        p++;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	3301      	adds	r3, #1
 8004084:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1db      	bne.n	8004046 <OLED_ShowString+0x12>
    }  
}	 
 800408e:	bf00      	nop
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <OLED_Init>:

void OLED_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800409c:	f001 fc28 	bl	80058f0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <OLED_Init+0x110>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <OLED_Init+0x110>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	4b3e      	ldr	r3, [pc, #248]	; (80041a8 <OLED_Init+0x110>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b0:	4a3d      	ldr	r2, [pc, #244]	; (80041a8 <OLED_Init+0x110>)
 80040b2:	f023 0304 	bic.w	r3, r3, #4
 80040b6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80040b8:	f001 fc2e 	bl	8005918 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80040bc:	2200      	movs	r2, #0
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	483a      	ldr	r0, [pc, #232]	; (80041ac <OLED_Init+0x114>)
 80040c2:	f000 fc4b 	bl	800495c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80040c6:	2064      	movs	r0, #100	; 0x64
 80040c8:	f000 f8e4 	bl	8004294 <HAL_Delay>
	OLED_RST_Set();
 80040cc:	2201      	movs	r2, #1
 80040ce:	2180      	movs	r1, #128	; 0x80
 80040d0:	4836      	ldr	r0, [pc, #216]	; (80041ac <OLED_Init+0x114>)
 80040d2:	f000 fc43 	bl	800495c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80040d6:	2100      	movs	r1, #0
 80040d8:	20ae      	movs	r0, #174	; 0xae
 80040da:	f7ff fe6f 	bl	8003dbc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80040de:	2100      	movs	r1, #0
 80040e0:	20d5      	movs	r0, #213	; 0xd5
 80040e2:	f7ff fe6b 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80040e6:	2100      	movs	r1, #0
 80040e8:	2050      	movs	r0, #80	; 0x50
 80040ea:	f7ff fe67 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80040ee:	2100      	movs	r1, #0
 80040f0:	20a8      	movs	r0, #168	; 0xa8
 80040f2:	f7ff fe63 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80040f6:	2100      	movs	r1, #0
 80040f8:	203f      	movs	r0, #63	; 0x3f
 80040fa:	f7ff fe5f 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80040fe:	2100      	movs	r1, #0
 8004100:	20d3      	movs	r0, #211	; 0xd3
 8004102:	f7ff fe5b 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8004106:	2100      	movs	r1, #0
 8004108:	2000      	movs	r0, #0
 800410a:	f7ff fe57 	bl	8003dbc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800410e:	2100      	movs	r1, #0
 8004110:	2040      	movs	r0, #64	; 0x40
 8004112:	f7ff fe53 	bl	8003dbc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8004116:	2100      	movs	r1, #0
 8004118:	208d      	movs	r0, #141	; 0x8d
 800411a:	f7ff fe4f 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800411e:	2100      	movs	r1, #0
 8004120:	2014      	movs	r0, #20
 8004122:	f7ff fe4b 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8004126:	2100      	movs	r1, #0
 8004128:	2020      	movs	r0, #32
 800412a:	f7ff fe47 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800412e:	2100      	movs	r1, #0
 8004130:	2002      	movs	r0, #2
 8004132:	f7ff fe43 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8004136:	2100      	movs	r1, #0
 8004138:	20a1      	movs	r0, #161	; 0xa1
 800413a:	f7ff fe3f 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800413e:	2100      	movs	r1, #0
 8004140:	20c0      	movs	r0, #192	; 0xc0
 8004142:	f7ff fe3b 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8004146:	2100      	movs	r1, #0
 8004148:	20da      	movs	r0, #218	; 0xda
 800414a:	f7ff fe37 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800414e:	2100      	movs	r1, #0
 8004150:	2012      	movs	r0, #18
 8004152:	f7ff fe33 	bl	8003dbc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8004156:	2100      	movs	r1, #0
 8004158:	2081      	movs	r0, #129	; 0x81
 800415a:	f7ff fe2f 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800415e:	2100      	movs	r1, #0
 8004160:	20ef      	movs	r0, #239	; 0xef
 8004162:	f7ff fe2b 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8004166:	2100      	movs	r1, #0
 8004168:	20d9      	movs	r0, #217	; 0xd9
 800416a:	f7ff fe27 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800416e:	2100      	movs	r1, #0
 8004170:	20f1      	movs	r0, #241	; 0xf1
 8004172:	f7ff fe23 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8004176:	2100      	movs	r1, #0
 8004178:	20db      	movs	r0, #219	; 0xdb
 800417a:	f7ff fe1f 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800417e:	2100      	movs	r1, #0
 8004180:	2030      	movs	r0, #48	; 0x30
 8004182:	f7ff fe1b 	bl	8003dbc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8004186:	2100      	movs	r1, #0
 8004188:	20a4      	movs	r0, #164	; 0xa4
 800418a:	f7ff fe17 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800418e:	2100      	movs	r1, #0
 8004190:	20a6      	movs	r0, #166	; 0xa6
 8004192:	f7ff fe13 	bl	8003dbc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8004196:	2100      	movs	r1, #0
 8004198:	20af      	movs	r0, #175	; 0xaf
 800419a:	f7ff fe0f 	bl	8003dbc <OLED_WR_Byte>
	OLED_Clear(); 
 800419e:	f7ff fe57 	bl	8003e50 <OLED_Clear>
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40021000 	.word	0x40021000

080041b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_Init+0x40>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <HAL_Init+0x40>)
 80041ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <HAL_Init+0x40>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HAL_Init+0x40>)
 80041c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041cc:	4b08      	ldr	r3, [pc, #32]	; (80041f0 <HAL_Init+0x40>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a07      	ldr	r2, [pc, #28]	; (80041f0 <HAL_Init+0x40>)
 80041d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d8:	2003      	movs	r0, #3
 80041da:	f000 f94f 	bl	800447c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041de:	200f      	movs	r0, #15
 80041e0:	f000 f808 	bl	80041f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e4:	f7ff f9ee 	bl	80035c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023c00 	.word	0x40023c00

080041f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041fc:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_InitTick+0x54>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_InitTick+0x58>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420a:	fbb3 f3f1 	udiv	r3, r3, r1
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f967 	bl	80044e6 <HAL_SYSTICK_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e00e      	b.n	8004240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d80a      	bhi.n	800423e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004228:	2200      	movs	r2, #0
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	f000 f92f 	bl	8004492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004234:	4a06      	ldr	r2, [pc, #24]	; (8004250 <HAL_InitTick+0x5c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000004 	.word	0x20000004
 800424c:	2000000c 	.word	0x2000000c
 8004250:	20000008 	.word	0x20000008

08004254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_IncTick+0x20>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_IncTick+0x24>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4413      	add	r3, r2
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_IncTick+0x24>)
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	2000000c 	.word	0x2000000c
 8004278:	20000898 	.word	0x20000898

0800427c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return uwTick;
 8004280:	4b03      	ldr	r3, [pc, #12]	; (8004290 <HAL_GetTick+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000898 	.word	0x20000898

08004294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800429c:	f7ff ffee 	bl	800427c <HAL_GetTick>
 80042a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d005      	beq.n	80042ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <HAL_Delay+0x44>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042ba:	bf00      	nop
 80042bc:	f7ff ffde 	bl	800427c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d8f7      	bhi.n	80042bc <HAL_Delay+0x28>
  {
  }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	2000000c 	.word	0x2000000c

080042dc <__NVIC_SetPriorityGrouping>:
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <__NVIC_SetPriorityGrouping+0x44>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f8:	4013      	ands	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <__NVIC_SetPriorityGrouping+0x44>)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	60d3      	str	r3, [r2, #12]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <__NVIC_GetPriorityGrouping>:
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004328:	4b04      	ldr	r3, [pc, #16]	; (800433c <__NVIC_GetPriorityGrouping+0x18>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	f003 0307 	and.w	r3, r3, #7
}
 8004332:	4618      	mov	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <__NVIC_EnableIRQ>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	2b00      	cmp	r3, #0
 8004350:	db0b      	blt.n	800436a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 021f 	and.w	r2, r3, #31
 8004358:	4907      	ldr	r1, [pc, #28]	; (8004378 <__NVIC_EnableIRQ+0x38>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2001      	movs	r0, #1
 8004362:	fa00 f202 	lsl.w	r2, r0, r2
 8004366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000e100 	.word	0xe000e100

0800437c <__NVIC_SetPriority>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	db0a      	blt.n	80043a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	b2da      	uxtb	r2, r3
 8004394:	490c      	ldr	r1, [pc, #48]	; (80043c8 <__NVIC_SetPriority+0x4c>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	0112      	lsls	r2, r2, #4
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	440b      	add	r3, r1
 80043a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043a4:	e00a      	b.n	80043bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <__NVIC_SetPriority+0x50>)
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3b04      	subs	r3, #4
 80043b4:	0112      	lsls	r2, r2, #4
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	440b      	add	r3, r1
 80043ba:	761a      	strb	r2, [r3, #24]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000e100 	.word	0xe000e100
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <NVIC_EncodePriority>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f1c3 0307 	rsb	r3, r3, #7
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	bf28      	it	cs
 80043ee:	2304      	movcs	r3, #4
 80043f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d902      	bls.n	8004400 <NVIC_EncodePriority+0x30>
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3b03      	subs	r3, #3
 80043fe:	e000      	b.n	8004402 <NVIC_EncodePriority+0x32>
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004404:	f04f 32ff 	mov.w	r2, #4294967295
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	401a      	ands	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004418:	f04f 31ff 	mov.w	r1, #4294967295
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	43d9      	mvns	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	4313      	orrs	r3, r2
}
 800442a:	4618      	mov	r0, r3
 800442c:	3724      	adds	r7, #36	; 0x24
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004448:	d301      	bcc.n	800444e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800444a:	2301      	movs	r3, #1
 800444c:	e00f      	b.n	800446e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800444e:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <SysTick_Config+0x40>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3b01      	subs	r3, #1
 8004454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004456:	210f      	movs	r1, #15
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	f7ff ff8e 	bl	800437c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <SysTick_Config+0x40>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004466:	4b04      	ldr	r3, [pc, #16]	; (8004478 <SysTick_Config+0x40>)
 8004468:	2207      	movs	r2, #7
 800446a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	e000e010 	.word	0xe000e010

0800447c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ff29 	bl	80042dc <__NVIC_SetPriorityGrouping>
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044a4:	f7ff ff3e 	bl	8004324 <__NVIC_GetPriorityGrouping>
 80044a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7ff ff8e 	bl	80043d0 <NVIC_EncodePriority>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff5d 	bl	800437c <__NVIC_SetPriority>
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff31 	bl	8004340 <__NVIC_EnableIRQ>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ffa2 	bl	8004438 <SysTick_Config>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b084      	sub	sp, #16
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800450c:	f7ff feb6 	bl	800427c <HAL_GetTick>
 8004510:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d008      	beq.n	8004530 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2280      	movs	r2, #128	; 0x80
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e052      	b.n	80045d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0216 	bic.w	r2, r2, #22
 800453e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800454e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d103      	bne.n	8004560 <HAL_DMA_Abort+0x62>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0208 	bic.w	r2, r2, #8
 800456e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004580:	e013      	b.n	80045aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004582:	f7ff fe7b 	bl	800427c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b05      	cmp	r3, #5
 800458e:	d90c      	bls.n	80045aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e015      	b.n	80045d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e4      	bne.n	8004582 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045bc:	223f      	movs	r2, #63	; 0x3f
 80045be:	409a      	lsls	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d004      	beq.n	80045fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e00c      	b.n	8004616 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2205      	movs	r2, #5
 8004600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	e16b      	b.n	8004918 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004640:	2201      	movs	r2, #1
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	429a      	cmp	r2, r3
 800465a:	f040 815a 	bne.w	8004912 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b01      	cmp	r3, #1
 8004668:	d005      	beq.n	8004676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004672:	2b02      	cmp	r3, #2
 8004674:	d130      	bne.n	80046d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2203      	movs	r2, #3
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4313      	orrs	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046ac:	2201      	movs	r2, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f003 0201 	and.w	r2, r3, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d017      	beq.n	8004714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	2203      	movs	r2, #3
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d123      	bne.n	8004768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	08da      	lsrs	r2, r3, #3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3208      	adds	r2, #8
 8004728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	220f      	movs	r2, #15
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	08da      	lsrs	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3208      	adds	r2, #8
 8004762:	69b9      	ldr	r1, [r7, #24]
 8004764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0203 	and.w	r2, r3, #3
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80b4 	beq.w	8004912 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	4b60      	ldr	r3, [pc, #384]	; (8004930 <HAL_GPIO_Init+0x30c>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	4a5f      	ldr	r2, [pc, #380]	; (8004930 <HAL_GPIO_Init+0x30c>)
 80047b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ba:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <HAL_GPIO_Init+0x30c>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047c6:	4a5b      	ldr	r2, [pc, #364]	; (8004934 <HAL_GPIO_Init+0x310>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a52      	ldr	r2, [pc, #328]	; (8004938 <HAL_GPIO_Init+0x314>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d02b      	beq.n	800484a <HAL_GPIO_Init+0x226>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a51      	ldr	r2, [pc, #324]	; (800493c <HAL_GPIO_Init+0x318>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d025      	beq.n	8004846 <HAL_GPIO_Init+0x222>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a50      	ldr	r2, [pc, #320]	; (8004940 <HAL_GPIO_Init+0x31c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01f      	beq.n	8004842 <HAL_GPIO_Init+0x21e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a4f      	ldr	r2, [pc, #316]	; (8004944 <HAL_GPIO_Init+0x320>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d019      	beq.n	800483e <HAL_GPIO_Init+0x21a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a4e      	ldr	r2, [pc, #312]	; (8004948 <HAL_GPIO_Init+0x324>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_GPIO_Init+0x216>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a4d      	ldr	r2, [pc, #308]	; (800494c <HAL_GPIO_Init+0x328>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00d      	beq.n	8004836 <HAL_GPIO_Init+0x212>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4c      	ldr	r2, [pc, #304]	; (8004950 <HAL_GPIO_Init+0x32c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <HAL_GPIO_Init+0x20e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a4b      	ldr	r2, [pc, #300]	; (8004954 <HAL_GPIO_Init+0x330>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_GPIO_Init+0x20a>
 800482a:	2307      	movs	r3, #7
 800482c:	e00e      	b.n	800484c <HAL_GPIO_Init+0x228>
 800482e:	2308      	movs	r3, #8
 8004830:	e00c      	b.n	800484c <HAL_GPIO_Init+0x228>
 8004832:	2306      	movs	r3, #6
 8004834:	e00a      	b.n	800484c <HAL_GPIO_Init+0x228>
 8004836:	2305      	movs	r3, #5
 8004838:	e008      	b.n	800484c <HAL_GPIO_Init+0x228>
 800483a:	2304      	movs	r3, #4
 800483c:	e006      	b.n	800484c <HAL_GPIO_Init+0x228>
 800483e:	2303      	movs	r3, #3
 8004840:	e004      	b.n	800484c <HAL_GPIO_Init+0x228>
 8004842:	2302      	movs	r3, #2
 8004844:	e002      	b.n	800484c <HAL_GPIO_Init+0x228>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_GPIO_Init+0x228>
 800484a:	2300      	movs	r3, #0
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	f002 0203 	and.w	r2, r2, #3
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	4093      	lsls	r3, r2
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800485c:	4935      	ldr	r1, [pc, #212]	; (8004934 <HAL_GPIO_Init+0x310>)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	3302      	adds	r3, #2
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486a:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_GPIO_Init+0x334>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <HAL_GPIO_Init+0x334>)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004894:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_GPIO_Init+0x334>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <HAL_GPIO_Init+0x334>)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048be:	4b26      	ldr	r3, [pc, #152]	; (8004958 <HAL_GPIO_Init+0x334>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <HAL_GPIO_Init+0x334>)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_GPIO_Init+0x334>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800490c:	4a12      	ldr	r2, [pc, #72]	; (8004958 <HAL_GPIO_Init+0x334>)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	f67f ae90 	bls.w	8004640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	3724      	adds	r7, #36	; 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800
 8004934:	40013800 	.word	0x40013800
 8004938:	40020000 	.word	0x40020000
 800493c:	40020400 	.word	0x40020400
 8004940:	40020800 	.word	0x40020800
 8004944:	40020c00 	.word	0x40020c00
 8004948:	40021000 	.word	0x40021000
 800494c:	40021400 	.word	0x40021400
 8004950:	40021800 	.word	0x40021800
 8004954:	40021c00 	.word	0x40021c00
 8004958:	40013c00 	.word	0x40013c00

0800495c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
 8004968:	4613      	mov	r3, r2
 800496a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800496c:	787b      	ldrb	r3, [r7, #1]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004972:	887a      	ldrh	r2, [r7, #2]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004978:	e003      	b.n	8004982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	041a      	lsls	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	619a      	str	r2, [r3, #24]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049a0:	887a      	ldrh	r2, [r7, #2]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	041a      	lsls	r2, r3, #16
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	43d9      	mvns	r1, r3
 80049ac:	887b      	ldrh	r3, [r7, #2]
 80049ae:	400b      	ands	r3, r1
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e12b      	b.n	8004c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe fe1e 	bl	800362c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2224      	movs	r2, #36	; 0x24
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a28:	f001 fbba 	bl	80061a0 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4a81      	ldr	r2, [pc, #516]	; (8004c38 <HAL_I2C_Init+0x274>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d807      	bhi.n	8004a48 <HAL_I2C_Init+0x84>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a80      	ldr	r2, [pc, #512]	; (8004c3c <HAL_I2C_Init+0x278>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	bf94      	ite	ls
 8004a40:	2301      	movls	r3, #1
 8004a42:	2300      	movhi	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e006      	b.n	8004a56 <HAL_I2C_Init+0x92>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a7d      	ldr	r2, [pc, #500]	; (8004c40 <HAL_I2C_Init+0x27c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bf94      	ite	ls
 8004a50:	2301      	movls	r3, #1
 8004a52:	2300      	movhi	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0e7      	b.n	8004c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a78      	ldr	r2, [pc, #480]	; (8004c44 <HAL_I2C_Init+0x280>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0c9b      	lsrs	r3, r3, #18
 8004a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a6a      	ldr	r2, [pc, #424]	; (8004c38 <HAL_I2C_Init+0x274>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d802      	bhi.n	8004a98 <HAL_I2C_Init+0xd4>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3301      	adds	r3, #1
 8004a96:	e009      	b.n	8004aac <HAL_I2C_Init+0xe8>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	4a69      	ldr	r2, [pc, #420]	; (8004c48 <HAL_I2C_Init+0x284>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	3301      	adds	r3, #1
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	495c      	ldr	r1, [pc, #368]	; (8004c38 <HAL_I2C_Init+0x274>)
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	d819      	bhi.n	8004b00 <HAL_I2C_Init+0x13c>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1e59      	subs	r1, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_I2C_Init+0x138>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1e59      	subs	r1, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004af4:	3301      	adds	r3, #1
 8004af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afa:	e051      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004afc:	2304      	movs	r3, #4
 8004afe:	e04f      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d111      	bne.n	8004b2c <HAL_I2C_Init+0x168>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	440b      	add	r3, r1
 8004b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e012      	b.n	8004b52 <HAL_I2C_Init+0x18e>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1e58      	subs	r0, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	0099      	lsls	r1, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2301      	moveq	r3, #1
 8004b4e:	2300      	movne	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Init+0x196>
 8004b56:	2301      	movs	r3, #1
 8004b58:	e022      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <HAL_I2C_Init+0x1bc>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e58      	subs	r0, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	440b      	add	r3, r1
 8004b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b74:	3301      	adds	r3, #1
 8004b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	e00f      	b.n	8004ba0 <HAL_I2C_Init+0x1dc>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1e58      	subs	r0, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	0099      	lsls	r1, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	6809      	ldr	r1, [r1, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6911      	ldr	r1, [r2, #16]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68d2      	ldr	r2, [r2, #12]
 8004bda:	4311      	orrs	r1, r2
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	000186a0 	.word	0x000186a0
 8004c3c:	001e847f 	.word	0x001e847f
 8004c40:	003d08ff 	.word	0x003d08ff
 8004c44:	431bde83 	.word	0x431bde83
 8004c48:	10624dd3 	.word	0x10624dd3

08004c4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	607a      	str	r2, [r7, #4]
 8004c56:	461a      	mov	r2, r3
 8004c58:	460b      	mov	r3, r1
 8004c5a:	817b      	strh	r3, [r7, #10]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c60:	f7ff fb0c 	bl	800427c <HAL_GetTick>
 8004c64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	f040 80e0 	bne.w	8004e34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2319      	movs	r3, #25
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	4970      	ldr	r1, [pc, #448]	; (8004e40 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 fc58 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0d3      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_I2C_Master_Transmit+0x50>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e0cc      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d007      	beq.n	8004cc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2221      	movs	r2, #33	; 0x21
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2210      	movs	r2, #16
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	893a      	ldrh	r2, [r7, #8]
 8004cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a50      	ldr	r2, [pc, #320]	; (8004e44 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d04:	8979      	ldrh	r1, [r7, #10]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fac2 	bl	8005294 <I2C_MasterRequestWrite>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e08d      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d30:	e066      	b.n	8004e00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	6a39      	ldr	r1, [r7, #32]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fcd2 	bl	80056e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d107      	bne.n	8004d5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e06b      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d11b      	bne.n	8004dd4 <HAL_I2C_Master_Transmit+0x188>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d017      	beq.n	8004dd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	781a      	ldrb	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	6a39      	ldr	r1, [r7, #32]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fcc2 	bl	8005762 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00d      	beq.n	8004e00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d107      	bne.n	8004dfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e01a      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d194      	bne.n	8004d32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	00100002 	.word	0x00100002
 8004e44:	ffff0000 	.word	0xffff0000

08004e48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	; 0x30
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	461a      	mov	r2, r3
 8004e54:	460b      	mov	r3, r1
 8004e56:	817b      	strh	r3, [r7, #10]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e5c:	f7ff fa0e 	bl	800427c <HAL_GetTick>
 8004e60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	f040 820b 	bne.w	8005286 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2319      	movs	r3, #25
 8004e76:	2201      	movs	r2, #1
 8004e78:	497c      	ldr	r1, [pc, #496]	; (800506c <HAL_I2C_Master_Receive+0x224>)
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fb5a 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
 8004e88:	e1fe      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_I2C_Master_Receive+0x50>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e1f7      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d007      	beq.n	8004ebe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ecc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2222      	movs	r2, #34	; 0x22
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	893a      	ldrh	r2, [r7, #8]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a5c      	ldr	r2, [pc, #368]	; (8005070 <HAL_I2C_Master_Receive+0x228>)
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f00:	8979      	ldrh	r1, [r7, #10]
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fa46 	bl	8005398 <I2C_MasterRequestRead>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e1b8      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d113      	bne.n	8004f46 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	623b      	str	r3, [r7, #32]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e18c      	b.n	8005260 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d11b      	bne.n	8004f86 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	e16c      	b.n	8005260 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d11b      	bne.n	8004fc6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	e14c      	b.n	8005260 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fec:	e138      	b.n	8005260 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	f200 80f1 	bhi.w	80051da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d123      	bne.n	8005048 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fbed 	bl	80057e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e139      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005046:	e10b      	b.n	8005260 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	2b02      	cmp	r3, #2
 800504e:	d14e      	bne.n	80050ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	2200      	movs	r2, #0
 8005058:	4906      	ldr	r1, [pc, #24]	; (8005074 <HAL_I2C_Master_Receive+0x22c>)
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa6a 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e10e      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
 800506a:	bf00      	nop
 800506c:	00100002 	.word	0x00100002
 8005070:	ffff0000 	.word	0xffff0000
 8005074:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050ec:	e0b8      	b.n	8005260 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2200      	movs	r2, #0
 80050f6:	4966      	ldr	r1, [pc, #408]	; (8005290 <HAL_I2C_Master_Receive+0x448>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 fa1b 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0bf      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	2200      	movs	r2, #0
 8005152:	494f      	ldr	r1, [pc, #316]	; (8005290 <HAL_I2C_Master_Receive+0x448>)
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 f9ed 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e091      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051d8:	e042      	b.n	8005260 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fb00 	bl	80057e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e04c      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d118      	bne.n	8005260 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f aec2 	bne.w	8004fee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	00010004 	.word	0x00010004

08005294 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	460b      	mov	r3, r1
 80052a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d006      	beq.n	80052be <I2C_MasterRequestWrite+0x2a>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d003      	beq.n	80052be <I2C_MasterRequestWrite+0x2a>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052bc:	d108      	bne.n	80052d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e00b      	b.n	80052e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	2b12      	cmp	r3, #18
 80052d6:	d107      	bne.n	80052e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f91d 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00d      	beq.n	800531c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530e:	d103      	bne.n	8005318 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e035      	b.n	8005388 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005324:	d108      	bne.n	8005338 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	e01b      	b.n	8005370 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005338:	897b      	ldrh	r3, [r7, #10]
 800533a:	11db      	asrs	r3, r3, #7
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0306 	and.w	r3, r3, #6
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f063 030f 	orn	r3, r3, #15
 8005348:	b2da      	uxtb	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	490e      	ldr	r1, [pc, #56]	; (8005390 <I2C_MasterRequestWrite+0xfc>)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f943 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e010      	b.n	8005388 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005366:	897b      	ldrh	r3, [r7, #10]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4907      	ldr	r1, [pc, #28]	; (8005394 <I2C_MasterRequestWrite+0x100>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f933 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	00010008 	.word	0x00010008
 8005394:	00010002 	.word	0x00010002

08005398 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	460b      	mov	r3, r1
 80053a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d006      	beq.n	80053d2 <I2C_MasterRequestRead+0x3a>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d003      	beq.n	80053d2 <I2C_MasterRequestRead+0x3a>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053d0:	d108      	bne.n	80053e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e00b      	b.n	80053fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	2b11      	cmp	r3, #17
 80053ea:	d107      	bne.n	80053fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f893 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005422:	d103      	bne.n	800542c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e079      	b.n	8005524 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005438:	d108      	bne.n	800544c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800543a:	897b      	ldrh	r3, [r7, #10]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	611a      	str	r2, [r3, #16]
 800544a:	e05f      	b.n	800550c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800544c:	897b      	ldrh	r3, [r7, #10]
 800544e:	11db      	asrs	r3, r3, #7
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0306 	and.w	r3, r3, #6
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f063 030f 	orn	r3, r3, #15
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	4930      	ldr	r1, [pc, #192]	; (800552c <I2C_MasterRequestRead+0x194>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f8b9 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e054      	b.n	8005524 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800547a:	897b      	ldrh	r3, [r7, #10]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4929      	ldr	r1, [pc, #164]	; (8005530 <I2C_MasterRequestRead+0x198>)
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f8a9 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e044      	b.n	8005524 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549a:	2300      	movs	r3, #0
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f831 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d103      	bne.n	80054f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e017      	b.n	8005524 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054f4:	897b      	ldrh	r3, [r7, #10]
 80054f6:	11db      	asrs	r3, r3, #7
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 0306 	and.w	r3, r3, #6
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f063 030e 	orn	r3, r3, #14
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4907      	ldr	r1, [pc, #28]	; (8005530 <I2C_MasterRequestRead+0x198>)
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f865 	bl	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	00010008 	.word	0x00010008
 8005530:	00010002 	.word	0x00010002

08005534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005544:	e025      	b.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d021      	beq.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fe fe95 	bl	800427c <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d116      	bne.n	8005592 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f043 0220 	orr.w	r2, r3, #32
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e023      	b.n	80055da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d10d      	bne.n	80055b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bf0c      	ite	eq
 80055ae:	2301      	moveq	r3, #1
 80055b0:	2300      	movne	r3, #0
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	e00c      	b.n	80055d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	43da      	mvns	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d0b6      	beq.n	8005546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055f0:	e051      	b.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005600:	d123      	bne.n	800564a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005610:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800561a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0204 	orr.w	r2, r3, #4
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e046      	b.n	80056d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d021      	beq.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005652:	f7fe fe13 	bl	800427c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d302      	bcc.n	8005668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d116      	bne.n	8005696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e020      	b.n	80056d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10c      	bne.n	80056ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	43da      	mvns	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e00b      	b.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	43da      	mvns	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	bf14      	ite	ne
 80056cc:	2301      	movne	r3, #1
 80056ce:	2300      	moveq	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d18d      	bne.n	80055f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ec:	e02d      	b.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f8ce 	bl	8005890 <I2C_IsAcknowledgeFailed>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e02d      	b.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d021      	beq.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005706:	f7fe fdb9 	bl	800427c <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e007      	b.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d1ca      	bne.n	80056ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	60b9      	str	r1, [r7, #8]
 800576c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800576e:	e02d      	b.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f88d 	bl	8005890 <I2C_IsAcknowledgeFailed>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e02d      	b.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d021      	beq.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fe fd78 	bl	800427c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d116      	bne.n	80057cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e007      	b.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d1ca      	bne.n	8005770 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f0:	e042      	b.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d119      	bne.n	8005834 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0210 	mvn.w	r2, #16
 8005808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e029      	b.n	8005888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005834:	f7fe fd22 	bl	800427c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f043 0220 	orr.w	r2, r3, #32
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e007      	b.n	8005888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d1b5      	bne.n	80057f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a6:	d11b      	bne.n	80058e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	f043 0204 	orr.w	r2, r3, #4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <HAL_PWR_EnableBkUpAccess+0x20>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <HAL_PWR_EnableBkUpAccess+0x24>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005902:	687b      	ldr	r3, [r7, #4]
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	420e0020 	.word	0x420e0020
 8005914:	40007000 	.word	0x40007000

08005918 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_PWR_DisableBkUpAccess+0x24>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800592a:	687b      	ldr	r3, [r7, #4]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	420e0020 	.word	0x420e0020
 800593c:	40007000 	.word	0x40007000

08005940 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e267      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d075      	beq.n	8005a4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800595e:	4b88      	ldr	r3, [pc, #544]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 030c 	and.w	r3, r3, #12
 8005966:	2b04      	cmp	r3, #4
 8005968:	d00c      	beq.n	8005984 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800596a:	4b85      	ldr	r3, [pc, #532]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005972:	2b08      	cmp	r3, #8
 8005974:	d112      	bne.n	800599c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005976:	4b82      	ldr	r3, [pc, #520]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005982:	d10b      	bne.n	800599c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005984:	4b7e      	ldr	r3, [pc, #504]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d05b      	beq.n	8005a48 <HAL_RCC_OscConfig+0x108>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d157      	bne.n	8005a48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e242      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a4:	d106      	bne.n	80059b4 <HAL_RCC_OscConfig+0x74>
 80059a6:	4b76      	ldr	r3, [pc, #472]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a75      	ldr	r2, [pc, #468]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e01d      	b.n	80059f0 <HAL_RCC_OscConfig+0xb0>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059bc:	d10c      	bne.n	80059d8 <HAL_RCC_OscConfig+0x98>
 80059be:	4b70      	ldr	r3, [pc, #448]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a6f      	ldr	r2, [pc, #444]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	4b6d      	ldr	r3, [pc, #436]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a6c      	ldr	r2, [pc, #432]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e00b      	b.n	80059f0 <HAL_RCC_OscConfig+0xb0>
 80059d8:	4b69      	ldr	r3, [pc, #420]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a68      	ldr	r2, [pc, #416]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	4b66      	ldr	r3, [pc, #408]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a65      	ldr	r2, [pc, #404]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 80059ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d013      	beq.n	8005a20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fe fc40 	bl	800427c <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a00:	f7fe fc3c 	bl	800427c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	; 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e207      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a12:	4b5b      	ldr	r3, [pc, #364]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0xc0>
 8005a1e:	e014      	b.n	8005a4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a20:	f7fe fc2c 	bl	800427c <HAL_GetTick>
 8005a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a28:	f7fe fc28 	bl	800427c <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	; 0x64
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e1f3      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a3a:	4b51      	ldr	r3, [pc, #324]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <HAL_RCC_OscConfig+0xe8>
 8005a46:	e000      	b.n	8005a4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d063      	beq.n	8005b1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a56:	4b4a      	ldr	r3, [pc, #296]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a62:	4b47      	ldr	r3, [pc, #284]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d11c      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a6e:	4b44      	ldr	r3, [pc, #272]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d116      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7a:	4b41      	ldr	r3, [pc, #260]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_RCC_OscConfig+0x152>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d001      	beq.n	8005a92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e1c7      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a92:	4b3b      	ldr	r3, [pc, #236]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4937      	ldr	r1, [pc, #220]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aa6:	e03a      	b.n	8005b1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d020      	beq.n	8005af2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab0:	4b34      	ldr	r3, [pc, #208]	; (8005b84 <HAL_RCC_OscConfig+0x244>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab6:	f7fe fbe1 	bl	800427c <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005abe:	f7fe fbdd 	bl	800427c <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e1a8      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad0:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005adc:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4925      	ldr	r1, [pc, #148]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	600b      	str	r3, [r1, #0]
 8005af0:	e015      	b.n	8005b1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af2:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <HAL_RCC_OscConfig+0x244>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fe fbc0 	bl	800427c <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b00:	f7fe fbbc 	bl	800427c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e187      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b12:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d036      	beq.n	8005b98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <HAL_RCC_OscConfig+0x248>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b38:	f7fe fba0 	bl	800427c <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b40:	f7fe fb9c 	bl	800427c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e167      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_RCC_OscConfig+0x240>)
 8005b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x200>
 8005b5e:	e01b      	b.n	8005b98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <HAL_RCC_OscConfig+0x248>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b66:	f7fe fb89 	bl	800427c <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b6c:	e00e      	b.n	8005b8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b6e:	f7fe fb85 	bl	800427c <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d907      	bls.n	8005b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e150      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
 8005b80:	40023800 	.word	0x40023800
 8005b84:	42470000 	.word	0x42470000
 8005b88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b8c:	4b88      	ldr	r3, [pc, #544]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ea      	bne.n	8005b6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8097 	beq.w	8005cd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005baa:	4b81      	ldr	r3, [pc, #516]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10f      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	4b7d      	ldr	r3, [pc, #500]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	4a7c      	ldr	r2, [pc, #496]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc6:	4b7a      	ldr	r3, [pc, #488]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd6:	4b77      	ldr	r3, [pc, #476]	; (8005db4 <HAL_RCC_OscConfig+0x474>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d118      	bne.n	8005c14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005be2:	4b74      	ldr	r3, [pc, #464]	; (8005db4 <HAL_RCC_OscConfig+0x474>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a73      	ldr	r2, [pc, #460]	; (8005db4 <HAL_RCC_OscConfig+0x474>)
 8005be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bee:	f7fe fb45 	bl	800427c <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf6:	f7fe fb41 	bl	800427c <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e10c      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c08:	4b6a      	ldr	r3, [pc, #424]	; (8005db4 <HAL_RCC_OscConfig+0x474>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d106      	bne.n	8005c2a <HAL_RCC_OscConfig+0x2ea>
 8005c1c:	4b64      	ldr	r3, [pc, #400]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c20:	4a63      	ldr	r2, [pc, #396]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	6713      	str	r3, [r2, #112]	; 0x70
 8005c28:	e01c      	b.n	8005c64 <HAL_RCC_OscConfig+0x324>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d10c      	bne.n	8005c4c <HAL_RCC_OscConfig+0x30c>
 8005c32:	4b5f      	ldr	r3, [pc, #380]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	4a5e      	ldr	r2, [pc, #376]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c38:	f043 0304 	orr.w	r3, r3, #4
 8005c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3e:	4b5c      	ldr	r3, [pc, #368]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	4a5b      	ldr	r2, [pc, #364]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	6713      	str	r3, [r2, #112]	; 0x70
 8005c4a:	e00b      	b.n	8005c64 <HAL_RCC_OscConfig+0x324>
 8005c4c:	4b58      	ldr	r3, [pc, #352]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c50:	4a57      	ldr	r2, [pc, #348]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	6713      	str	r3, [r2, #112]	; 0x70
 8005c58:	4b55      	ldr	r3, [pc, #340]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	4a54      	ldr	r2, [pc, #336]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c5e:	f023 0304 	bic.w	r3, r3, #4
 8005c62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d015      	beq.n	8005c98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6c:	f7fe fb06 	bl	800427c <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fe fb02 	bl	800427c <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0cb      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8a:	4b49      	ldr	r3, [pc, #292]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0ee      	beq.n	8005c74 <HAL_RCC_OscConfig+0x334>
 8005c96:	e014      	b.n	8005cc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c98:	f7fe faf0 	bl	800427c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fe faec 	bl	800427c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e0b5      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb6:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ee      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc8:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	4a38      	ldr	r2, [pc, #224]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a1 	beq.w	8005e20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cde:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d05c      	beq.n	8005da4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d141      	bne.n	8005d76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf2:	4b31      	ldr	r3, [pc, #196]	; (8005db8 <HAL_RCC_OscConfig+0x478>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf8:	f7fe fac0 	bl	800427c <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d00:	f7fe fabc 	bl	800427c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e087      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d12:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	085b      	lsrs	r3, r3, #1
 8005d36:	3b01      	subs	r3, #1
 8005d38:	041b      	lsls	r3, r3, #16
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	061b      	lsls	r3, r3, #24
 8005d42:	491b      	ldr	r1, [pc, #108]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d48:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <HAL_RCC_OscConfig+0x478>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4e:	f7fe fa95 	bl	800427c <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d56:	f7fe fa91 	bl	800427c <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e05c      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d68:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_RCC_OscConfig+0x416>
 8005d74:	e054      	b.n	8005e20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d76:	4b10      	ldr	r3, [pc, #64]	; (8005db8 <HAL_RCC_OscConfig+0x478>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7c:	f7fe fa7e 	bl	800427c <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fe fa7a 	bl	800427c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e045      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <HAL_RCC_OscConfig+0x470>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x444>
 8005da2:	e03d      	b.n	8005e20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d107      	bne.n	8005dbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e038      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
 8005db0:	40023800 	.word	0x40023800
 8005db4:	40007000 	.word	0x40007000
 8005db8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <HAL_RCC_OscConfig+0x4ec>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d028      	beq.n	8005e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d121      	bne.n	8005e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d11a      	bne.n	8005e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dec:	4013      	ands	r3, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005df2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d111      	bne.n	8005e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	3b01      	subs	r3, #1
 8005e06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40023800 	.word	0x40023800

08005e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e0cc      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e44:	4b68      	ldr	r3, [pc, #416]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d90c      	bls.n	8005e6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e52:	4b65      	ldr	r3, [pc, #404]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5a:	4b63      	ldr	r3, [pc, #396]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e0b8      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e84:	4b59      	ldr	r3, [pc, #356]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a58      	ldr	r2, [pc, #352]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e9c:	4b53      	ldr	r3, [pc, #332]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	4a52      	ldr	r2, [pc, #328]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ea6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea8:	4b50      	ldr	r3, [pc, #320]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	494d      	ldr	r1, [pc, #308]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d044      	beq.n	8005f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d119      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e07f      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d003      	beq.n	8005eee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d107      	bne.n	8005efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eee:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e06f      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efe:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e067      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f0e:	4b37      	ldr	r3, [pc, #220]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f023 0203 	bic.w	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4934      	ldr	r1, [pc, #208]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f20:	f7fe f9ac 	bl	800427c <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	e00a      	b.n	8005f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f28:	f7fe f9a8 	bl	800427c <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e04f      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 020c 	and.w	r2, r3, #12
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d1eb      	bne.n	8005f28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d20c      	bcs.n	8005f78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5e:	4b22      	ldr	r3, [pc, #136]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e032      	b.n	8005fde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f84:	4b19      	ldr	r3, [pc, #100]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4916      	ldr	r1, [pc, #88]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	490e      	ldr	r1, [pc, #56]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fb6:	f000 f821 	bl	8005ffc <HAL_RCC_GetSysClockFreq>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	490a      	ldr	r1, [pc, #40]	; (8005ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8005fc8:	5ccb      	ldrb	r3, [r1, r3]
 8005fca:	fa22 f303 	lsr.w	r3, r2, r3
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fe f90c 	bl	80041f4 <HAL_InitTick>

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40023c00 	.word	0x40023c00
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	0800e760 	.word	0x0800e760
 8005ff4:	20000004 	.word	0x20000004
 8005ff8:	20000008 	.word	0x20000008

08005ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006000:	b090      	sub	sp, #64	; 0x40
 8006002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
 8006008:	2300      	movs	r3, #0
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	2300      	movs	r3, #0
 800600e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006014:	4b59      	ldr	r3, [pc, #356]	; (800617c <HAL_RCC_GetSysClockFreq+0x180>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	2b08      	cmp	r3, #8
 800601e:	d00d      	beq.n	800603c <HAL_RCC_GetSysClockFreq+0x40>
 8006020:	2b08      	cmp	r3, #8
 8006022:	f200 80a1 	bhi.w	8006168 <HAL_RCC_GetSysClockFreq+0x16c>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_RCC_GetSysClockFreq+0x34>
 800602a:	2b04      	cmp	r3, #4
 800602c:	d003      	beq.n	8006036 <HAL_RCC_GetSysClockFreq+0x3a>
 800602e:	e09b      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006030:	4b53      	ldr	r3, [pc, #332]	; (8006180 <HAL_RCC_GetSysClockFreq+0x184>)
 8006032:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006034:	e09b      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006036:	4b53      	ldr	r3, [pc, #332]	; (8006184 <HAL_RCC_GetSysClockFreq+0x188>)
 8006038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800603a:	e098      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800603c:	4b4f      	ldr	r3, [pc, #316]	; (800617c <HAL_RCC_GetSysClockFreq+0x180>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006046:	4b4d      	ldr	r3, [pc, #308]	; (800617c <HAL_RCC_GetSysClockFreq+0x180>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d028      	beq.n	80060a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006052:	4b4a      	ldr	r3, [pc, #296]	; (800617c <HAL_RCC_GetSysClockFreq+0x180>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	099b      	lsrs	r3, r3, #6
 8006058:	2200      	movs	r2, #0
 800605a:	623b      	str	r3, [r7, #32]
 800605c:	627a      	str	r2, [r7, #36]	; 0x24
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006064:	2100      	movs	r1, #0
 8006066:	4b47      	ldr	r3, [pc, #284]	; (8006184 <HAL_RCC_GetSysClockFreq+0x188>)
 8006068:	fb03 f201 	mul.w	r2, r3, r1
 800606c:	2300      	movs	r3, #0
 800606e:	fb00 f303 	mul.w	r3, r0, r3
 8006072:	4413      	add	r3, r2
 8006074:	4a43      	ldr	r2, [pc, #268]	; (8006184 <HAL_RCC_GetSysClockFreq+0x188>)
 8006076:	fba0 1202 	umull	r1, r2, r0, r2
 800607a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800607c:	460a      	mov	r2, r1
 800607e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006082:	4413      	add	r3, r2
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	2200      	movs	r2, #0
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	61fa      	str	r2, [r7, #28]
 800608e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006092:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006096:	f7fa fda7 	bl	8000be8 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4613      	mov	r3, r2
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a2:	e053      	b.n	800614c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a4:	4b35      	ldr	r3, [pc, #212]	; (800617c <HAL_RCC_GetSysClockFreq+0x180>)
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	099b      	lsrs	r3, r3, #6
 80060aa:	2200      	movs	r2, #0
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	617a      	str	r2, [r7, #20]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060b6:	f04f 0b00 	mov.w	fp, #0
 80060ba:	4652      	mov	r2, sl
 80060bc:	465b      	mov	r3, fp
 80060be:	f04f 0000 	mov.w	r0, #0
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	0159      	lsls	r1, r3, #5
 80060c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060cc:	0150      	lsls	r0, r2, #5
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	ebb2 080a 	subs.w	r8, r2, sl
 80060d6:	eb63 090b 	sbc.w	r9, r3, fp
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060ee:	ebb2 0408 	subs.w	r4, r2, r8
 80060f2:	eb63 0509 	sbc.w	r5, r3, r9
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	00eb      	lsls	r3, r5, #3
 8006100:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006104:	00e2      	lsls	r2, r4, #3
 8006106:	4614      	mov	r4, r2
 8006108:	461d      	mov	r5, r3
 800610a:	eb14 030a 	adds.w	r3, r4, sl
 800610e:	603b      	str	r3, [r7, #0]
 8006110:	eb45 030b 	adc.w	r3, r5, fp
 8006114:	607b      	str	r3, [r7, #4]
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006122:	4629      	mov	r1, r5
 8006124:	028b      	lsls	r3, r1, #10
 8006126:	4621      	mov	r1, r4
 8006128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800612c:	4621      	mov	r1, r4
 800612e:	028a      	lsls	r2, r1, #10
 8006130:	4610      	mov	r0, r2
 8006132:	4619      	mov	r1, r3
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	2200      	movs	r2, #0
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	60fa      	str	r2, [r7, #12]
 800613c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006140:	f7fa fd52 	bl	8000be8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4613      	mov	r3, r2
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_RCC_GetSysClockFreq+0x180>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	3301      	adds	r3, #1
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800615c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006166:	e002      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_GetSysClockFreq+0x184>)
 800616a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800616c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006170:	4618      	mov	r0, r3
 8006172:	3740      	adds	r7, #64	; 0x40
 8006174:	46bd      	mov	sp, r7
 8006176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800
 8006180:	00f42400 	.word	0x00f42400
 8006184:	017d7840 	.word	0x017d7840

08006188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_RCC_GetHCLKFreq+0x14>)
 800618e:	681b      	ldr	r3, [r3, #0]
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000004 	.word	0x20000004

080061a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061a4:	f7ff fff0 	bl	8006188 <HAL_RCC_GetHCLKFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	0a9b      	lsrs	r3, r3, #10
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	4903      	ldr	r1, [pc, #12]	; (80061c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b6:	5ccb      	ldrb	r3, [r1, r3]
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061bc:	4618      	mov	r0, r3
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40023800 	.word	0x40023800
 80061c4:	0800e770 	.word	0x0800e770

080061c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061cc:	f7ff ffdc 	bl	8006188 <HAL_RCC_GetHCLKFreq>
 80061d0:	4602      	mov	r2, r0
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	0b5b      	lsrs	r3, r3, #13
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	4903      	ldr	r1, [pc, #12]	; (80061ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80061de:	5ccb      	ldrb	r3, [r1, r3]
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40023800 	.word	0x40023800
 80061ec:	0800e770 	.word	0x0800e770

080061f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e041      	b.n	8006286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fd fa50 	bl	80036bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 ff94 	bl	800715c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e041      	b.n	8006324 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f839 	bl	800632c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f000 ff45 	bl	800715c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d109      	bne.n	8006364 <HAL_TIM_PWM_Start+0x24>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	bf14      	ite	ne
 800635c:	2301      	movne	r3, #1
 800635e:	2300      	moveq	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	e022      	b.n	80063aa <HAL_TIM_PWM_Start+0x6a>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d109      	bne.n	800637e <HAL_TIM_PWM_Start+0x3e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	bf14      	ite	ne
 8006376:	2301      	movne	r3, #1
 8006378:	2300      	moveq	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	e015      	b.n	80063aa <HAL_TIM_PWM_Start+0x6a>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b08      	cmp	r3, #8
 8006382:	d109      	bne.n	8006398 <HAL_TIM_PWM_Start+0x58>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e008      	b.n	80063aa <HAL_TIM_PWM_Start+0x6a>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	bf14      	ite	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	2300      	moveq	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e07c      	b.n	80064ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start+0x82>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063c0:	e013      	b.n	80063ea <HAL_TIM_PWM_Start+0xaa>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Start+0x92>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063d0:	e00b      	b.n	80063ea <HAL_TIM_PWM_Start+0xaa>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_PWM_Start+0xa2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e0:	e003      	b.n	80063ea <HAL_TIM_PWM_Start+0xaa>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2201      	movs	r2, #1
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f001 fac6 	bl	8007984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <HAL_TIM_PWM_Start+0x174>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_TIM_PWM_Start+0xcc>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <HAL_TIM_PWM_Start+0x178>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d101      	bne.n	8006410 <HAL_TIM_PWM_Start+0xd0>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <HAL_TIM_PWM_Start+0xd2>
 8006410:	2300      	movs	r3, #0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <HAL_TIM_PWM_Start+0x174>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <HAL_TIM_PWM_Start+0x136>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006438:	d01d      	beq.n	8006476 <HAL_TIM_PWM_Start+0x136>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1f      	ldr	r2, [pc, #124]	; (80064bc <HAL_TIM_PWM_Start+0x17c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d018      	beq.n	8006476 <HAL_TIM_PWM_Start+0x136>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <HAL_TIM_PWM_Start+0x180>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_TIM_PWM_Start+0x136>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <HAL_TIM_PWM_Start+0x184>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_TIM_PWM_Start+0x136>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <HAL_TIM_PWM_Start+0x178>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_TIM_PWM_Start+0x136>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <HAL_TIM_PWM_Start+0x188>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIM_PWM_Start+0x136>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a16      	ldr	r2, [pc, #88]	; (80064cc <HAL_TIM_PWM_Start+0x18c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d111      	bne.n	800649a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b06      	cmp	r3, #6
 8006486:	d010      	beq.n	80064aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006498:	e007      	b.n	80064aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40010400 	.word	0x40010400
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40001800 	.word	0x40001800

080064d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e041      	b.n	8006566 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fd f9f0 	bl	80038dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f000 fe24 	bl	800715c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_TIM_IC_Start_IT+0x1e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e013      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0x46>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d104      	bne.n	800659e <HAL_TIM_IC_Start_IT+0x2e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800659a:	b2db      	uxtb	r3, r3
 800659c:	e00b      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0x46>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_IC_Start_IT+0x3e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e003      	b.n	80065b6 <HAL_TIM_IC_Start_IT+0x46>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <HAL_TIM_IC_Start_IT+0x58>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e013      	b.n	80065f0 <HAL_TIM_IC_Start_IT+0x80>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d104      	bne.n	80065d8 <HAL_TIM_IC_Start_IT+0x68>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	e00b      	b.n	80065f0 <HAL_TIM_IC_Start_IT+0x80>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d104      	bne.n	80065e8 <HAL_TIM_IC_Start_IT+0x78>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	e003      	b.n	80065f0 <HAL_TIM_IC_Start_IT+0x80>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d102      	bne.n	80065fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80065f8:	7b7b      	ldrb	r3, [r7, #13]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d001      	beq.n	8006602 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0cc      	b.n	800679c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_TIM_IC_Start_IT+0xa2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006610:	e013      	b.n	800663a <HAL_TIM_IC_Start_IT+0xca>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b04      	cmp	r3, #4
 8006616:	d104      	bne.n	8006622 <HAL_TIM_IC_Start_IT+0xb2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006620:	e00b      	b.n	800663a <HAL_TIM_IC_Start_IT+0xca>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d104      	bne.n	8006632 <HAL_TIM_IC_Start_IT+0xc2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006630:	e003      	b.n	800663a <HAL_TIM_IC_Start_IT+0xca>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_TIM_IC_Start_IT+0xda>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006648:	e013      	b.n	8006672 <HAL_TIM_IC_Start_IT+0x102>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b04      	cmp	r3, #4
 800664e:	d104      	bne.n	800665a <HAL_TIM_IC_Start_IT+0xea>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006658:	e00b      	b.n	8006672 <HAL_TIM_IC_Start_IT+0x102>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d104      	bne.n	800666a <HAL_TIM_IC_Start_IT+0xfa>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006668:	e003      	b.n	8006672 <HAL_TIM_IC_Start_IT+0x102>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d841      	bhi.n	80066fc <HAL_TIM_IC_Start_IT+0x18c>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <HAL_TIM_IC_Start_IT+0x110>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066fd 	.word	0x080066fd
 8006688:	080066fd 	.word	0x080066fd
 800668c:	080066fd 	.word	0x080066fd
 8006690:	080066c7 	.word	0x080066c7
 8006694:	080066fd 	.word	0x080066fd
 8006698:	080066fd 	.word	0x080066fd
 800669c:	080066fd 	.word	0x080066fd
 80066a0:	080066d9 	.word	0x080066d9
 80066a4:	080066fd 	.word	0x080066fd
 80066a8:	080066fd 	.word	0x080066fd
 80066ac:	080066fd 	.word	0x080066fd
 80066b0:	080066eb 	.word	0x080066eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0202 	orr.w	r2, r2, #2
 80066c2:	60da      	str	r2, [r3, #12]
      break;
 80066c4:	e01d      	b.n	8006702 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0204 	orr.w	r2, r2, #4
 80066d4:	60da      	str	r2, [r3, #12]
      break;
 80066d6:	e014      	b.n	8006702 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0208 	orr.w	r2, r2, #8
 80066e6:	60da      	str	r2, [r3, #12]
      break;
 80066e8:	e00b      	b.n	8006702 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0210 	orr.w	r2, r2, #16
 80066f8:	60da      	str	r2, [r3, #12]
      break;
 80066fa:	e002      	b.n	8006702 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006700:	bf00      	nop
  }

  if (status == HAL_OK)
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d148      	bne.n	800679a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2201      	movs	r2, #1
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f001 f937 	bl	8007984 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a22      	ldr	r2, [pc, #136]	; (80067a4 <HAL_TIM_IC_Start_IT+0x234>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_TIM_IC_Start_IT+0x1f6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d01d      	beq.n	8006766 <HAL_TIM_IC_Start_IT+0x1f6>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_TIM_IC_Start_IT+0x238>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_TIM_IC_Start_IT+0x1f6>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <HAL_TIM_IC_Start_IT+0x23c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_TIM_IC_Start_IT+0x1f6>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <HAL_TIM_IC_Start_IT+0x240>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_TIM_IC_Start_IT+0x1f6>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a19      	ldr	r2, [pc, #100]	; (80067b4 <HAL_TIM_IC_Start_IT+0x244>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_TIM_IC_Start_IT+0x1f6>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a18      	ldr	r2, [pc, #96]	; (80067b8 <HAL_TIM_IC_Start_IT+0x248>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIM_IC_Start_IT+0x1f6>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a16      	ldr	r2, [pc, #88]	; (80067bc <HAL_TIM_IC_Start_IT+0x24c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d111      	bne.n	800678a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b06      	cmp	r3, #6
 8006776:	d010      	beq.n	800679a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006788:	e007      	b.n	800679a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f042 0201 	orr.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40010000 	.word	0x40010000
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800
 80067b0:	40000c00 	.word	0x40000c00
 80067b4:	40010400 	.word	0x40010400
 80067b8:	40014000 	.word	0x40014000
 80067bc:	40001800 	.word	0x40001800

080067c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e097      	b.n	8006904 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fc ffdd 	bl	80037a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6812      	ldr	r2, [r2, #0]
 8006800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006804:	f023 0307 	bic.w	r3, r3, #7
 8006808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	4619      	mov	r1, r3
 8006814:	4610      	mov	r0, r2
 8006816:	f000 fca1 	bl	800715c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	4313      	orrs	r3, r2
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006860:	f023 030c 	bic.w	r3, r3, #12
 8006864:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800686c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	4313      	orrs	r3, r2
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	011a      	lsls	r2, r3, #4
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	031b      	lsls	r3, r3, #12
 8006890:	4313      	orrs	r3, r2
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800689e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80068a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	4313      	orrs	r3, r2
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800691c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006924:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800692c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006934:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d110      	bne.n	800695e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d102      	bne.n	8006948 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006942:	7b7b      	ldrb	r3, [r7, #13]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d001      	beq.n	800694c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e069      	b.n	8006a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800695c:	e031      	b.n	80069c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d110      	bne.n	8006986 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006964:	7bbb      	ldrb	r3, [r7, #14]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d102      	bne.n	8006970 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800696a:	7b3b      	ldrb	r3, [r7, #12]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d001      	beq.n	8006974 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e055      	b.n	8006a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006984:	e01d      	b.n	80069c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d108      	bne.n	800699e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d105      	bne.n	800699e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006992:	7b7b      	ldrb	r3, [r7, #13]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d102      	bne.n	800699e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006998:	7b3b      	ldrb	r3, [r7, #12]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d001      	beq.n	80069a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e03e      	b.n	8006a20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2202      	movs	r2, #2
 80069be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_TIM_Encoder_Start+0xc4>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d008      	beq.n	80069e0 <HAL_TIM_Encoder_Start+0xd4>
 80069ce:	e00f      	b.n	80069f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2201      	movs	r2, #1
 80069d6:	2100      	movs	r1, #0
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 ffd3 	bl	8007984 <TIM_CCxChannelCmd>
      break;
 80069de:	e016      	b.n	8006a0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2201      	movs	r2, #1
 80069e6:	2104      	movs	r1, #4
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 ffcb 	bl	8007984 <TIM_CCxChannelCmd>
      break;
 80069ee:	e00e      	b.n	8006a0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2201      	movs	r2, #1
 80069f6:	2100      	movs	r1, #0
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 ffc3 	bl	8007984 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2201      	movs	r2, #1
 8006a04:	2104      	movs	r1, #4
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 ffbc 	bl	8007984 <TIM_CCxChannelCmd>
      break;
 8006a0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0201 	orr.w	r2, r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d122      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d11b      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0202 	mvn.w	r2, #2
 8006a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fa fec0 	bl	80017f0 <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb54 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fb5b 	bl	8007134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0204 	mvn.w	r2, #4
 8006aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fa fe96 	bl	80017f0 <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fb2a 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb31 	bl	8007134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0208 	mvn.w	r2, #8
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2204      	movs	r2, #4
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fa fe6c 	bl	80017f0 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb00 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fb07 	bl	8007134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0310 	and.w	r3, r3, #16
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0210 	mvn.w	r2, #16
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2208      	movs	r2, #8
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fa fe42 	bl	80017f0 <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fad6 	bl	8007120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fadd 	bl	8007134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10e      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0201 	mvn.w	r2, #1
 8006ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fab0 	bl	800710c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d10e      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d107      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 ffd4 	bl	8007b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	d10e      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d107      	bne.n	8006c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 faa2 	bl	8007148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d10e      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d107      	bne.n	8006c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0220 	mvn.w	r2, #32
 8006c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 ff9e 	bl	8007b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e088      	b.n	8006d68 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d11b      	bne.n	8006c9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6819      	ldr	r1, [r3, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	f000 fcc2 	bl	80075fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 020c 	bic.w	r2, r2, #12
 8006c86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	619a      	str	r2, [r3, #24]
 8006c9a:	e060      	b.n	8006d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d11c      	bne.n	8006cdc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6818      	ldr	r0, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f000 fd46 	bl	8007742 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6999      	ldr	r1, [r3, #24]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	021a      	lsls	r2, r3, #8
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	619a      	str	r2, [r3, #24]
 8006cda:	e040      	b.n	8006d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d11b      	bne.n	8006d1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6819      	ldr	r1, [r3, #0]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f000 fd93 	bl	800781c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 020c 	bic.w	r2, r2, #12
 8006d04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69d9      	ldr	r1, [r3, #28]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	61da      	str	r2, [r3, #28]
 8006d18:	e021      	b.n	8006d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d11c      	bne.n	8006d5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6819      	ldr	r1, [r3, #0]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	f000 fdb0 	bl	8007894 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69da      	ldr	r2, [r3, #28]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69d9      	ldr	r1, [r3, #28]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	021a      	lsls	r2, r3, #8
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	61da      	str	r2, [r3, #28]
 8006d58:	e001      	b.n	8006d5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e0ae      	b.n	8006eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b0c      	cmp	r3, #12
 8006d9a:	f200 809f 	bhi.w	8006edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dd9 	.word	0x08006dd9
 8006da8:	08006edd 	.word	0x08006edd
 8006dac:	08006edd 	.word	0x08006edd
 8006db0:	08006edd 	.word	0x08006edd
 8006db4:	08006e19 	.word	0x08006e19
 8006db8:	08006edd 	.word	0x08006edd
 8006dbc:	08006edd 	.word	0x08006edd
 8006dc0:	08006edd 	.word	0x08006edd
 8006dc4:	08006e5b 	.word	0x08006e5b
 8006dc8:	08006edd 	.word	0x08006edd
 8006dcc:	08006edd 	.word	0x08006edd
 8006dd0:	08006edd 	.word	0x08006edd
 8006dd4:	08006e9b 	.word	0x08006e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fa5c 	bl	800729c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0208 	orr.w	r2, r2, #8
 8006df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0204 	bic.w	r2, r2, #4
 8006e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6999      	ldr	r1, [r3, #24]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	691a      	ldr	r2, [r3, #16]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	619a      	str	r2, [r3, #24]
      break;
 8006e16:	e064      	b.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68b9      	ldr	r1, [r7, #8]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 faac 	bl	800737c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6999      	ldr	r1, [r3, #24]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	021a      	lsls	r2, r3, #8
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	619a      	str	r2, [r3, #24]
      break;
 8006e58:	e043      	b.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fb01 	bl	8007468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0208 	orr.w	r2, r2, #8
 8006e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0204 	bic.w	r2, r2, #4
 8006e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69d9      	ldr	r1, [r3, #28]
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	61da      	str	r2, [r3, #28]
      break;
 8006e98:	e023      	b.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fb55 	bl	8007550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69d9      	ldr	r1, [r3, #28]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	021a      	lsls	r2, r3, #8
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	61da      	str	r2, [r3, #28]
      break;
 8006eda:	e002      	b.n	8006ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_TIM_ConfigClockSource+0x1c>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e0b4      	b.n	800707a <HAL_TIM_ConfigClockSource+0x186>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f48:	d03e      	beq.n	8006fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4e:	f200 8087 	bhi.w	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f56:	f000 8086 	beq.w	8007066 <HAL_TIM_ConfigClockSource+0x172>
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5e:	d87f      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f60:	2b70      	cmp	r3, #112	; 0x70
 8006f62:	d01a      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0xa6>
 8006f64:	2b70      	cmp	r3, #112	; 0x70
 8006f66:	d87b      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f68:	2b60      	cmp	r3, #96	; 0x60
 8006f6a:	d050      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x11a>
 8006f6c:	2b60      	cmp	r3, #96	; 0x60
 8006f6e:	d877      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b50      	cmp	r3, #80	; 0x50
 8006f72:	d03c      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0xfa>
 8006f74:	2b50      	cmp	r3, #80	; 0x50
 8006f76:	d873      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d058      	beq.n	800702e <HAL_TIM_ConfigClockSource+0x13a>
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d86f      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f80:	2b30      	cmp	r3, #48	; 0x30
 8006f82:	d064      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d86b      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d060      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d867      	bhi.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d05c      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d05a      	beq.n	800704e <HAL_TIM_ConfigClockSource+0x15a>
 8006f98:	e062      	b.n	8007060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6899      	ldr	r1, [r3, #8]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f000 fccb 	bl	8007944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	609a      	str	r2, [r3, #8]
      break;
 8006fc6:	e04f      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6899      	ldr	r1, [r3, #8]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f000 fcb4 	bl	8007944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fea:	609a      	str	r2, [r3, #8]
      break;
 8006fec:	e03c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6859      	ldr	r1, [r3, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f000 fb72 	bl	80076e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2150      	movs	r1, #80	; 0x50
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fc81 	bl	800790e <TIM_ITRx_SetConfig>
      break;
 800700c:	e02c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6859      	ldr	r1, [r3, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	461a      	mov	r2, r3
 800701c:	f000 fbce 	bl	80077bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2160      	movs	r1, #96	; 0x60
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fc71 	bl	800790e <TIM_ITRx_SetConfig>
      break;
 800702c:	e01c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	6859      	ldr	r1, [r3, #4]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	461a      	mov	r2, r3
 800703c:	f000 fb52 	bl	80076e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2140      	movs	r1, #64	; 0x40
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fc61 	bl	800790e <TIM_ITRx_SetConfig>
      break;
 800704c:	e00c      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f000 fc58 	bl	800790e <TIM_ITRx_SetConfig>
      break;
 800705e:	e003      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
      break;
 8007064:	e000      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b0c      	cmp	r3, #12
 8007096:	d831      	bhi.n	80070fc <HAL_TIM_ReadCapturedValue+0x78>
 8007098:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070d5 	.word	0x080070d5
 80070a4:	080070fd 	.word	0x080070fd
 80070a8:	080070fd 	.word	0x080070fd
 80070ac:	080070fd 	.word	0x080070fd
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070fd 	.word	0x080070fd
 80070b8:	080070fd 	.word	0x080070fd
 80070bc:	080070fd 	.word	0x080070fd
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070fd 	.word	0x080070fd
 80070c8:	080070fd 	.word	0x080070fd
 80070cc:	080070fd 	.word	0x080070fd
 80070d0:	080070f3 	.word	0x080070f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	60fb      	str	r3, [r7, #12]

      break;
 80070dc:	e00f      	b.n	80070fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	60fb      	str	r3, [r7, #12]

      break;
 80070e6:	e00a      	b.n	80070fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ee:	60fb      	str	r3, [r7, #12]

      break;
 80070f0:	e005      	b.n	80070fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	60fb      	str	r3, [r7, #12]

      break;
 80070fa:	e000      	b.n	80070fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80070fc:	bf00      	nop
  }

  return tmpreg;
 80070fe:	68fb      	ldr	r3, [r7, #12]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a40      	ldr	r2, [pc, #256]	; (8007270 <TIM_Base_SetConfig+0x114>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d013      	beq.n	800719c <TIM_Base_SetConfig+0x40>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717a:	d00f      	beq.n	800719c <TIM_Base_SetConfig+0x40>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a3d      	ldr	r2, [pc, #244]	; (8007274 <TIM_Base_SetConfig+0x118>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00b      	beq.n	800719c <TIM_Base_SetConfig+0x40>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a3c      	ldr	r2, [pc, #240]	; (8007278 <TIM_Base_SetConfig+0x11c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d007      	beq.n	800719c <TIM_Base_SetConfig+0x40>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a3b      	ldr	r2, [pc, #236]	; (800727c <TIM_Base_SetConfig+0x120>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_Base_SetConfig+0x40>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a3a      	ldr	r2, [pc, #232]	; (8007280 <TIM_Base_SetConfig+0x124>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d108      	bne.n	80071ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2f      	ldr	r2, [pc, #188]	; (8007270 <TIM_Base_SetConfig+0x114>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d02b      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071bc:	d027      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a2c      	ldr	r2, [pc, #176]	; (8007274 <TIM_Base_SetConfig+0x118>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d023      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a2b      	ldr	r2, [pc, #172]	; (8007278 <TIM_Base_SetConfig+0x11c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01f      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a2a      	ldr	r2, [pc, #168]	; (800727c <TIM_Base_SetConfig+0x120>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01b      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a29      	ldr	r2, [pc, #164]	; (8007280 <TIM_Base_SetConfig+0x124>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d017      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a28      	ldr	r2, [pc, #160]	; (8007284 <TIM_Base_SetConfig+0x128>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a27      	ldr	r2, [pc, #156]	; (8007288 <TIM_Base_SetConfig+0x12c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00f      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a26      	ldr	r2, [pc, #152]	; (800728c <TIM_Base_SetConfig+0x130>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00b      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a25      	ldr	r2, [pc, #148]	; (8007290 <TIM_Base_SetConfig+0x134>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d007      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a24      	ldr	r2, [pc, #144]	; (8007294 <TIM_Base_SetConfig+0x138>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d003      	beq.n	800720e <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a23      	ldr	r2, [pc, #140]	; (8007298 <TIM_Base_SetConfig+0x13c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d108      	bne.n	8007220 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <TIM_Base_SetConfig+0x114>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d003      	beq.n	8007254 <TIM_Base_SetConfig+0xf8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a0c      	ldr	r2, [pc, #48]	; (8007280 <TIM_Base_SetConfig+0x124>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d103      	bne.n	800725c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	615a      	str	r2, [r3, #20]
}
 8007262:	bf00      	nop
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40010000 	.word	0x40010000
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800
 800727c:	40000c00 	.word	0x40000c00
 8007280:	40010400 	.word	0x40010400
 8007284:	40014000 	.word	0x40014000
 8007288:	40014400 	.word	0x40014400
 800728c:	40014800 	.word	0x40014800
 8007290:	40001800 	.word	0x40001800
 8007294:	40001c00 	.word	0x40001c00
 8007298:	40002000 	.word	0x40002000

0800729c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f023 0201 	bic.w	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4313      	orrs	r3, r2
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f023 0302 	bic.w	r3, r3, #2
 80072e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a20      	ldr	r2, [pc, #128]	; (8007374 <TIM_OC1_SetConfig+0xd8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d003      	beq.n	8007300 <TIM_OC1_SetConfig+0x64>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <TIM_OC1_SetConfig+0xdc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10c      	bne.n	800731a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f023 0308 	bic.w	r3, r3, #8
 8007306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f023 0304 	bic.w	r3, r3, #4
 8007318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a15      	ldr	r2, [pc, #84]	; (8007374 <TIM_OC1_SetConfig+0xd8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d003      	beq.n	800732a <TIM_OC1_SetConfig+0x8e>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a14      	ldr	r2, [pc, #80]	; (8007378 <TIM_OC1_SetConfig+0xdc>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d111      	bne.n	800734e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4313      	orrs	r3, r2
 8007342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	621a      	str	r2, [r3, #32]
}
 8007368:	bf00      	nop
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	40010000 	.word	0x40010000
 8007378:	40010400 	.word	0x40010400

0800737c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f023 0210 	bic.w	r2, r3, #16
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f023 0320 	bic.w	r3, r3, #32
 80073c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a22      	ldr	r2, [pc, #136]	; (8007460 <TIM_OC2_SetConfig+0xe4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_OC2_SetConfig+0x68>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a21      	ldr	r2, [pc, #132]	; (8007464 <TIM_OC2_SetConfig+0xe8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10d      	bne.n	8007400 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a17      	ldr	r2, [pc, #92]	; (8007460 <TIM_OC2_SetConfig+0xe4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d003      	beq.n	8007410 <TIM_OC2_SetConfig+0x94>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a16      	ldr	r2, [pc, #88]	; (8007464 <TIM_OC2_SetConfig+0xe8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d113      	bne.n	8007438 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800741e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40010000 	.word	0x40010000
 8007464:	40010400 	.word	0x40010400

08007468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a21      	ldr	r2, [pc, #132]	; (8007548 <TIM_OC3_SetConfig+0xe0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d003      	beq.n	80074ce <TIM_OC3_SetConfig+0x66>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a20      	ldr	r2, [pc, #128]	; (800754c <TIM_OC3_SetConfig+0xe4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d10d      	bne.n	80074ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	021b      	lsls	r3, r3, #8
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4313      	orrs	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a16      	ldr	r2, [pc, #88]	; (8007548 <TIM_OC3_SetConfig+0xe0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d003      	beq.n	80074fa <TIM_OC3_SetConfig+0x92>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a15      	ldr	r2, [pc, #84]	; (800754c <TIM_OC3_SetConfig+0xe4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d113      	bne.n	8007522 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	621a      	str	r2, [r3, #32]
}
 800753c:	bf00      	nop
 800753e:	371c      	adds	r7, #28
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	40010000 	.word	0x40010000
 800754c:	40010400 	.word	0x40010400

08007550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800757e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4313      	orrs	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800759a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	031b      	lsls	r3, r3, #12
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <TIM_OC4_SetConfig+0xa4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_OC4_SetConfig+0x68>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a11      	ldr	r2, [pc, #68]	; (80075f8 <TIM_OC4_SetConfig+0xa8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d109      	bne.n	80075cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	019b      	lsls	r3, r3, #6
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	621a      	str	r2, [r3, #32]
}
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40010400 	.word	0x40010400

080075fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	f023 0201 	bic.w	r2, r3, #1
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4a28      	ldr	r2, [pc, #160]	; (80076c8 <TIM_TI1_SetConfig+0xcc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d01b      	beq.n	8007662 <TIM_TI1_SetConfig+0x66>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d017      	beq.n	8007662 <TIM_TI1_SetConfig+0x66>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4a25      	ldr	r2, [pc, #148]	; (80076cc <TIM_TI1_SetConfig+0xd0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d013      	beq.n	8007662 <TIM_TI1_SetConfig+0x66>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4a24      	ldr	r2, [pc, #144]	; (80076d0 <TIM_TI1_SetConfig+0xd4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00f      	beq.n	8007662 <TIM_TI1_SetConfig+0x66>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a23      	ldr	r2, [pc, #140]	; (80076d4 <TIM_TI1_SetConfig+0xd8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00b      	beq.n	8007662 <TIM_TI1_SetConfig+0x66>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4a22      	ldr	r2, [pc, #136]	; (80076d8 <TIM_TI1_SetConfig+0xdc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d007      	beq.n	8007662 <TIM_TI1_SetConfig+0x66>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4a21      	ldr	r2, [pc, #132]	; (80076dc <TIM_TI1_SetConfig+0xe0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_TI1_SetConfig+0x66>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4a20      	ldr	r2, [pc, #128]	; (80076e0 <TIM_TI1_SetConfig+0xe4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d101      	bne.n	8007666 <TIM_TI1_SetConfig+0x6a>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <TIM_TI1_SetConfig+0x6c>
 8007666:	2300      	movs	r3, #0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4313      	orrs	r3, r2
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	e003      	b.n	8007686 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f043 0301 	orr.w	r3, r3, #1
 8007684:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800768c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	b2db      	uxtb	r3, r3
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f023 030a 	bic.w	r3, r3, #10
 80076a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f003 030a 	and.w	r3, r3, #10
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40010000 	.word	0x40010000
 80076cc:	40000400 	.word	0x40000400
 80076d0:	40000800 	.word	0x40000800
 80076d4:	40000c00 	.word	0x40000c00
 80076d8:	40010400 	.word	0x40010400
 80076dc:	40014000 	.word	0x40014000
 80076e0:	40001800 	.word	0x40001800

080076e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0201 	bic.w	r2, r3, #1
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800770e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f023 030a 	bic.w	r3, r3, #10
 8007720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	621a      	str	r2, [r3, #32]
}
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007742:	b480      	push	{r7}
 8007744:	b087      	sub	sp, #28
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f023 0210 	bic.w	r2, r3, #16
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	031b      	lsls	r3, r3, #12
 8007786:	b29b      	uxth	r3, r3
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007794:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	621a      	str	r2, [r3, #32]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	f023 0210 	bic.w	r2, r3, #16
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	031b      	lsls	r3, r3, #12
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	621a      	str	r2, [r3, #32]
}
 8007810:	bf00      	nop
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f023 0303 	bic.w	r3, r3, #3
 8007848:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007858:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	b2db      	uxtb	r3, r3
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800786c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	621a      	str	r2, [r3, #32]
}
 8007888:	bf00      	nop
 800788a:	371c      	adds	r7, #28
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	031b      	lsls	r3, r3, #12
 80078d8:	b29b      	uxth	r3, r3
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80078e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	031b      	lsls	r3, r3, #12
 80078ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800790e:	b480      	push	{r7}
 8007910:	b085      	sub	sp, #20
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	f043 0307 	orr.w	r3, r3, #7
 8007930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	609a      	str	r2, [r3, #8]
}
 8007938:	bf00      	nop
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800795e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	021a      	lsls	r2, r3, #8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	431a      	orrs	r2, r3
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4313      	orrs	r3, r2
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	4313      	orrs	r3, r2
 8007970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	609a      	str	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	371c      	adds	r7, #28
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	2201      	movs	r2, #1
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a1a      	ldr	r2, [r3, #32]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	43db      	mvns	r3, r3
 80079a6:	401a      	ands	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	fa01 f303 	lsl.w	r3, r1, r3
 80079bc:	431a      	orrs	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	621a      	str	r2, [r3, #32]
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
	...

080079d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e05a      	b.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a21      	ldr	r2, [pc, #132]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d022      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a34:	d01d      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d018      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1a      	ldr	r2, [pc, #104]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00e      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a18      	ldr	r2, [pc, #96]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d009      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a17      	ldr	r2, [pc, #92]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d004      	beq.n	8007a72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a15      	ldr	r2, [pc, #84]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d10c      	bne.n	8007a8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40000400 	.word	0x40000400
 8007ab4:	40000800 	.word	0x40000800
 8007ab8:	40000c00 	.word	0x40000c00
 8007abc:	40010400 	.word	0x40010400
 8007ac0:	40014000 	.word	0x40014000
 8007ac4:	40001800 	.word	0x40001800

08007ac8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e03d      	b.n	8007b60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e03f      	b.n	8007c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7fb ff18 	bl	80039f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2224      	movs	r2, #36	; 0x24
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fddf 	bl	800879c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695a      	ldr	r2, [r3, #20]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68da      	ldr	r2, [r3, #12]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b08a      	sub	sp, #40	; 0x28
 8007c32:	af02      	add	r7, sp, #8
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	603b      	str	r3, [r7, #0]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d17c      	bne.n	8007d48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <HAL_UART_Transmit+0x2c>
 8007c54:	88fb      	ldrh	r3, [r7, #6]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e075      	b.n	8007d4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_UART_Transmit+0x3e>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e06e      	b.n	8007d4a <HAL_UART_Transmit+0x11c>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2221      	movs	r2, #33	; 0x21
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c82:	f7fc fafb 	bl	800427c <HAL_GetTick>
 8007c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	88fa      	ldrh	r2, [r7, #6]
 8007c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	88fa      	ldrh	r2, [r7, #6]
 8007c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9c:	d108      	bne.n	8007cb0 <HAL_UART_Transmit+0x82>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	61bb      	str	r3, [r7, #24]
 8007cae:	e003      	b.n	8007cb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007cc0:	e02a      	b.n	8007d18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2180      	movs	r1, #128	; 0x80
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fb1f 	bl	8008310 <UART_WaitOnFlagUntilTimeout>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e036      	b.n	8007d4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10b      	bne.n	8007cfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	3302      	adds	r3, #2
 8007cf6:	61bb      	str	r3, [r7, #24]
 8007cf8:	e007      	b.n	8007d0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	3301      	adds	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1cf      	bne.n	8007cc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2140      	movs	r1, #64	; 0x40
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 faef 	bl	8008310 <UART_WaitOnFlagUntilTimeout>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3720      	adds	r7, #32
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d11d      	bne.n	8007da8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <HAL_UART_Receive_IT+0x26>
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e016      	b.n	8007daa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_UART_Receive_IT+0x38>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e00f      	b.n	8007daa <HAL_UART_Receive_IT+0x58>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fb24 	bl	80083ec <UART_Start_Receive_IT>
 8007da4:	4603      	mov	r3, r0
 8007da6:	e000      	b.n	8007daa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007da8:	2302      	movs	r3, #2
  }
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b0ba      	sub	sp, #232	; 0xe8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dea:	f003 030f 	and.w	r3, r3, #15
 8007dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10f      	bne.n	8007e1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <HAL_UART_IRQHandler+0x66>
 8007e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fc07 	bl	8008626 <UART_Receive_IT>
      return;
 8007e18:	e256      	b.n	80082c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80de 	beq.w	8007fe0 <HAL_UART_IRQHandler+0x22c>
 8007e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80d1 	beq.w	8007fe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <HAL_UART_IRQHandler+0xae>
 8007e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	f043 0201 	orr.w	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e66:	f003 0304 	and.w	r3, r3, #4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00b      	beq.n	8007e86 <HAL_UART_IRQHandler+0xd2>
 8007e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	f043 0202 	orr.w	r2, r3, #2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <HAL_UART_IRQHandler+0xf6>
 8007e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d005      	beq.n	8007eaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f043 0204 	orr.w	r2, r3, #4
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d011      	beq.n	8007eda <HAL_UART_IRQHandler+0x126>
 8007eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f043 0208 	orr.w	r2, r3, #8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 81ed 	beq.w	80082be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d008      	beq.n	8007f02 <HAL_UART_IRQHandler+0x14e>
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb92 	bl	8008626 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <HAL_UART_IRQHandler+0x17a>
 8007f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d04f      	beq.n	8007fce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fa9a 	bl	8008468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d141      	bne.n	8007fc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3314      	adds	r3, #20
 8007f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3314      	adds	r3, #20
 8007f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f7e:	e841 2300 	strex	r3, r2, [r1]
 8007f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1d9      	bne.n	8007f42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d013      	beq.n	8007fbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	4a7d      	ldr	r2, [pc, #500]	; (8008190 <HAL_UART_IRQHandler+0x3dc>)
 8007f9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fc fb1b 	bl	80045de <HAL_DMA_Abort_IT>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d016      	beq.n	8007fdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fbc:	e00e      	b.n	8007fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f990 	bl	80082e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	e00a      	b.n	8007fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f98c 	bl	80082e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fcc:	e006      	b.n	8007fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f988 	bl	80082e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007fda:	e170      	b.n	80082be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	bf00      	nop
    return;
 8007fde:	e16e      	b.n	80082be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	f040 814a 	bne.w	800827e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fee:	f003 0310 	and.w	r3, r3, #16
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8143 	beq.w	800827e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 813c 	beq.w	800827e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008006:	2300      	movs	r3, #0
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	60bb      	str	r3, [r7, #8]
 800801a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	f040 80b4 	bne.w	8008194 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8140 	beq.w	80082c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800804a:	429a      	cmp	r2, r3
 800804c:	f080 8139 	bcs.w	80082c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008056:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008062:	f000 8088 	beq.w	8008176 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	330c      	adds	r3, #12
 800806c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800807c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	330c      	adds	r3, #12
 800808e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800809e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d1d9      	bne.n	8008066 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3314      	adds	r3, #20
 80080b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3314      	adds	r3, #20
 80080d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e1      	bne.n	80080b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3314      	adds	r3, #20
 80080f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008104:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3314      	adds	r3, #20
 800810e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008112:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008114:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008118:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e3      	bne.n	80080ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008146:	f023 0310 	bic.w	r3, r3, #16
 800814a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	330c      	adds	r3, #12
 8008154:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008158:	65ba      	str	r2, [r7, #88]	; 0x58
 800815a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800815e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e3      	bne.n	8008134 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	4618      	mov	r0, r3
 8008172:	f7fc f9c4 	bl	80044fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800817e:	b29b      	uxth	r3, r3
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	b29b      	uxth	r3, r3
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f8b6 	bl	80082f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800818c:	e099      	b.n	80082c2 <HAL_UART_IRQHandler+0x50e>
 800818e:	bf00      	nop
 8008190:	0800852f 	.word	0x0800852f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800819c:	b29b      	uxth	r3, r3
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 808b 	beq.w	80082c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8086 	beq.w	80082c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	330c      	adds	r3, #12
 80081da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081de:	647a      	str	r2, [r7, #68]	; 0x44
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e3      	bne.n	80081ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3314      	adds	r3, #20
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	e853 3f00 	ldrex	r3, [r3]
 8008200:	623b      	str	r3, [r7, #32]
   return(result);
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	f023 0301 	bic.w	r3, r3, #1
 8008208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3314      	adds	r3, #20
 8008212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008216:	633a      	str	r2, [r7, #48]	; 0x30
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800821c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821e:	e841 2300 	strex	r3, r2, [r1]
 8008222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1e3      	bne.n	80081f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2220      	movs	r2, #32
 800822e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	330c      	adds	r3, #12
 800823e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	60fb      	str	r3, [r7, #12]
   return(result);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0310 	bic.w	r3, r3, #16
 800824e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800825c:	61fa      	str	r2, [r7, #28]
 800825e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	69b9      	ldr	r1, [r7, #24]
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	617b      	str	r3, [r7, #20]
   return(result);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e3      	bne.n	8008238 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f83e 	bl	80082f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800827c:	e023      	b.n	80082c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <HAL_UART_IRQHandler+0x4ea>
 800828a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f95d 	bl	8008556 <UART_Transmit_IT>
    return;
 800829c:	e014      	b.n	80082c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00e      	beq.n	80082c8 <HAL_UART_IRQHandler+0x514>
 80082aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d008      	beq.n	80082c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f99d 	bl	80085f6 <UART_EndTransmit_IT>
    return;
 80082bc:	e004      	b.n	80082c8 <HAL_UART_IRQHandler+0x514>
    return;
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <HAL_UART_IRQHandler+0x514>
      return;
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <HAL_UART_IRQHandler+0x514>
      return;
 80082c6:	bf00      	nop
  }
}
 80082c8:	37e8      	adds	r7, #232	; 0xe8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop

080082d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b090      	sub	sp, #64	; 0x40
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	4613      	mov	r3, r2
 800831e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008320:	e050      	b.n	80083c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d04c      	beq.n	80083c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800832a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800832c:	2b00      	cmp	r3, #0
 800832e:	d007      	beq.n	8008340 <UART_WaitOnFlagUntilTimeout+0x30>
 8008330:	f7fb ffa4 	bl	800427c <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800833c:	429a      	cmp	r2, r3
 800833e:	d241      	bcs.n	80083c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008360:	637a      	str	r2, [r7, #52]	; 0x34
 8008362:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e5      	bne.n	8008340 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3314      	adds	r3, #20
 800837a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	613b      	str	r3, [r7, #16]
   return(result);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f023 0301 	bic.w	r3, r3, #1
 800838a:	63bb      	str	r3, [r7, #56]	; 0x38
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3314      	adds	r3, #20
 8008392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008394:	623a      	str	r2, [r7, #32]
 8008396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	69f9      	ldr	r1, [r7, #28]
 800839a:	6a3a      	ldr	r2, [r7, #32]
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e5      	bne.n	8008374 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e00f      	b.n	80083e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4013      	ands	r3, r2
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	bf0c      	ite	eq
 80083d4:	2301      	moveq	r3, #1
 80083d6:	2300      	movne	r3, #0
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d09f      	beq.n	8008322 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3740      	adds	r7, #64	; 0x40
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	88fa      	ldrh	r2, [r7, #6]
 8008404:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	88fa      	ldrh	r2, [r7, #6]
 800840a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2222      	movs	r2, #34	; 0x22
 8008416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d007      	beq.n	800843a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68da      	ldr	r2, [r3, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008438:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	695a      	ldr	r2, [r3, #20]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0201 	orr.w	r2, r2, #1
 8008448:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0220 	orr.w	r2, r2, #32
 8008458:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b095      	sub	sp, #84	; 0x54
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	330c      	adds	r3, #12
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008490:	643a      	str	r2, [r7, #64]	; 0x40
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e5      	bne.n	8008470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3314      	adds	r3, #20
 80084aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	f023 0301 	bic.w	r3, r3, #1
 80084ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3314      	adds	r3, #20
 80084c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e5      	bne.n	80084a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d119      	bne.n	8008514 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	330c      	adds	r3, #12
 80084e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f023 0310 	bic.w	r3, r3, #16
 80084f6:	647b      	str	r3, [r7, #68]	; 0x44
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	330c      	adds	r3, #12
 80084fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008500:	61ba      	str	r2, [r7, #24]
 8008502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6979      	ldr	r1, [r7, #20]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	613b      	str	r3, [r7, #16]
   return(result);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e5      	bne.n	80084e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008522:	bf00      	nop
 8008524:	3754      	adds	r7, #84	; 0x54
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f7ff fecb 	bl	80082e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800854e:	bf00      	nop
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b21      	cmp	r3, #33	; 0x21
 8008568:	d13e      	bne.n	80085e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008572:	d114      	bne.n	800859e <UART_Transmit_IT+0x48>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d110      	bne.n	800859e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008590:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	1c9a      	adds	r2, r3, #2
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	621a      	str	r2, [r3, #32]
 800859c:	e008      	b.n	80085b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6211      	str	r1, [r2, #32]
 80085a8:	781a      	ldrb	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	4619      	mov	r1, r3
 80085be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10f      	bne.n	80085e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68da      	ldr	r2, [r3, #12]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	e000      	b.n	80085ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085e8:	2302      	movs	r3, #2
  }
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr

080085f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800860c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fe5a 	bl	80082d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b08c      	sub	sp, #48	; 0x30
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b22      	cmp	r3, #34	; 0x22
 8008638:	f040 80ab 	bne.w	8008792 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008644:	d117      	bne.n	8008676 <UART_Receive_IT+0x50>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d113      	bne.n	8008676 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008664:	b29a      	uxth	r2, r3
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	1c9a      	adds	r2, r3, #2
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	629a      	str	r2, [r3, #40]	; 0x28
 8008674:	e026      	b.n	80086c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800867c:	2300      	movs	r3, #0
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008688:	d007      	beq.n	800869a <UART_Receive_IT+0x74>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <UART_Receive_IT+0x82>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	e008      	b.n	80086ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	4619      	mov	r1, r3
 80086d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d15a      	bne.n	800878e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 0220 	bic.w	r2, r2, #32
 80086e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695a      	ldr	r2, [r3, #20]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0201 	bic.w	r2, r2, #1
 8008706:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2220      	movs	r2, #32
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008714:	2b01      	cmp	r3, #1
 8008716:	d135      	bne.n	8008784 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	330c      	adds	r3, #12
 8008724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	613b      	str	r3, [r7, #16]
   return(result);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f023 0310 	bic.w	r3, r3, #16
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	330c      	adds	r3, #12
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	623a      	str	r2, [r7, #32]
 8008740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	69f9      	ldr	r1, [r7, #28]
 8008744:	6a3a      	ldr	r2, [r7, #32]
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	61bb      	str	r3, [r7, #24]
   return(result);
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e5      	bne.n	800871e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b10      	cmp	r3, #16
 800875e:	d10a      	bne.n	8008776 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fdbb 	bl	80082f8 <HAL_UARTEx_RxEventCallback>
 8008782:	e002      	b.n	800878a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7f9 f821 	bl	80017cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	e002      	b.n	8008794 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	e000      	b.n	8008794 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008792:	2302      	movs	r3, #2
  }
}
 8008794:	4618      	mov	r0, r3
 8008796:	3730      	adds	r7, #48	; 0x30
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800879c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087a0:	b0c0      	sub	sp, #256	; 0x100
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b8:	68d9      	ldr	r1, [r3, #12]
 80087ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	ea40 0301 	orr.w	r3, r0, r1
 80087c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	431a      	orrs	r2, r3
 80087d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	431a      	orrs	r2, r3
 80087dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087f4:	f021 010c 	bic.w	r1, r1, #12
 80087f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008802:	430b      	orrs	r3, r1
 8008804:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008816:	6999      	ldr	r1, [r3, #24]
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	ea40 0301 	orr.w	r3, r0, r1
 8008822:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4b8f      	ldr	r3, [pc, #572]	; (8008a68 <UART_SetConfig+0x2cc>)
 800882c:	429a      	cmp	r2, r3
 800882e:	d005      	beq.n	800883c <UART_SetConfig+0xa0>
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	4b8d      	ldr	r3, [pc, #564]	; (8008a6c <UART_SetConfig+0x2d0>)
 8008838:	429a      	cmp	r2, r3
 800883a:	d104      	bne.n	8008846 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800883c:	f7fd fcc4 	bl	80061c8 <HAL_RCC_GetPCLK2Freq>
 8008840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008844:	e003      	b.n	800884e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008846:	f7fd fcab 	bl	80061a0 <HAL_RCC_GetPCLK1Freq>
 800884a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800884e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008858:	f040 810c 	bne.w	8008a74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800885c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008860:	2200      	movs	r2, #0
 8008862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800886a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800886e:	4622      	mov	r2, r4
 8008870:	462b      	mov	r3, r5
 8008872:	1891      	adds	r1, r2, r2
 8008874:	65b9      	str	r1, [r7, #88]	; 0x58
 8008876:	415b      	adcs	r3, r3
 8008878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800887a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800887e:	4621      	mov	r1, r4
 8008880:	eb12 0801 	adds.w	r8, r2, r1
 8008884:	4629      	mov	r1, r5
 8008886:	eb43 0901 	adc.w	r9, r3, r1
 800888a:	f04f 0200 	mov.w	r2, #0
 800888e:	f04f 0300 	mov.w	r3, #0
 8008892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800889a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800889e:	4690      	mov	r8, r2
 80088a0:	4699      	mov	r9, r3
 80088a2:	4623      	mov	r3, r4
 80088a4:	eb18 0303 	adds.w	r3, r8, r3
 80088a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088ac:	462b      	mov	r3, r5
 80088ae:	eb49 0303 	adc.w	r3, r9, r3
 80088b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088ca:	460b      	mov	r3, r1
 80088cc:	18db      	adds	r3, r3, r3
 80088ce:	653b      	str	r3, [r7, #80]	; 0x50
 80088d0:	4613      	mov	r3, r2
 80088d2:	eb42 0303 	adc.w	r3, r2, r3
 80088d6:	657b      	str	r3, [r7, #84]	; 0x54
 80088d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088e0:	f7f8 f982 	bl	8000be8 <__aeabi_uldivmod>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4b61      	ldr	r3, [pc, #388]	; (8008a70 <UART_SetConfig+0x2d4>)
 80088ea:	fba3 2302 	umull	r2, r3, r3, r2
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	011c      	lsls	r4, r3, #4
 80088f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008900:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	1891      	adds	r1, r2, r2
 800890a:	64b9      	str	r1, [r7, #72]	; 0x48
 800890c:	415b      	adcs	r3, r3
 800890e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008910:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008914:	4641      	mov	r1, r8
 8008916:	eb12 0a01 	adds.w	sl, r2, r1
 800891a:	4649      	mov	r1, r9
 800891c:	eb43 0b01 	adc.w	fp, r3, r1
 8008920:	f04f 0200 	mov.w	r2, #0
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800892c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008930:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008934:	4692      	mov	sl, r2
 8008936:	469b      	mov	fp, r3
 8008938:	4643      	mov	r3, r8
 800893a:	eb1a 0303 	adds.w	r3, sl, r3
 800893e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008942:	464b      	mov	r3, r9
 8008944:	eb4b 0303 	adc.w	r3, fp, r3
 8008948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800894c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008958:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800895c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008960:	460b      	mov	r3, r1
 8008962:	18db      	adds	r3, r3, r3
 8008964:	643b      	str	r3, [r7, #64]	; 0x40
 8008966:	4613      	mov	r3, r2
 8008968:	eb42 0303 	adc.w	r3, r2, r3
 800896c:	647b      	str	r3, [r7, #68]	; 0x44
 800896e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008972:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008976:	f7f8 f937 	bl	8000be8 <__aeabi_uldivmod>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4611      	mov	r1, r2
 8008980:	4b3b      	ldr	r3, [pc, #236]	; (8008a70 <UART_SetConfig+0x2d4>)
 8008982:	fba3 2301 	umull	r2, r3, r3, r1
 8008986:	095b      	lsrs	r3, r3, #5
 8008988:	2264      	movs	r2, #100	; 0x64
 800898a:	fb02 f303 	mul.w	r3, r2, r3
 800898e:	1acb      	subs	r3, r1, r3
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008996:	4b36      	ldr	r3, [pc, #216]	; (8008a70 <UART_SetConfig+0x2d4>)
 8008998:	fba3 2302 	umull	r2, r3, r3, r2
 800899c:	095b      	lsrs	r3, r3, #5
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089a4:	441c      	add	r4, r3
 80089a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80089b8:	4642      	mov	r2, r8
 80089ba:	464b      	mov	r3, r9
 80089bc:	1891      	adds	r1, r2, r2
 80089be:	63b9      	str	r1, [r7, #56]	; 0x38
 80089c0:	415b      	adcs	r3, r3
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089c8:	4641      	mov	r1, r8
 80089ca:	1851      	adds	r1, r2, r1
 80089cc:	6339      	str	r1, [r7, #48]	; 0x30
 80089ce:	4649      	mov	r1, r9
 80089d0:	414b      	adcs	r3, r1
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	f04f 0300 	mov.w	r3, #0
 80089dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089e0:	4659      	mov	r1, fp
 80089e2:	00cb      	lsls	r3, r1, #3
 80089e4:	4651      	mov	r1, sl
 80089e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ea:	4651      	mov	r1, sl
 80089ec:	00ca      	lsls	r2, r1, #3
 80089ee:	4610      	mov	r0, r2
 80089f0:	4619      	mov	r1, r3
 80089f2:	4603      	mov	r3, r0
 80089f4:	4642      	mov	r2, r8
 80089f6:	189b      	adds	r3, r3, r2
 80089f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089fc:	464b      	mov	r3, r9
 80089fe:	460a      	mov	r2, r1
 8008a00:	eb42 0303 	adc.w	r3, r2, r3
 8008a04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	18db      	adds	r3, r3, r3
 8008a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a22:	4613      	mov	r3, r2
 8008a24:	eb42 0303 	adc.w	r3, r2, r3
 8008a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a32:	f7f8 f8d9 	bl	8000be8 <__aeabi_uldivmod>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <UART_SetConfig+0x2d4>)
 8008a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a40:	095b      	lsrs	r3, r3, #5
 8008a42:	2164      	movs	r1, #100	; 0x64
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	3332      	adds	r3, #50	; 0x32
 8008a4e:	4a08      	ldr	r2, [pc, #32]	; (8008a70 <UART_SetConfig+0x2d4>)
 8008a50:	fba2 2303 	umull	r2, r3, r2, r3
 8008a54:	095b      	lsrs	r3, r3, #5
 8008a56:	f003 0207 	and.w	r2, r3, #7
 8008a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4422      	add	r2, r4
 8008a62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a64:	e106      	b.n	8008c74 <UART_SetConfig+0x4d8>
 8008a66:	bf00      	nop
 8008a68:	40011000 	.word	0x40011000
 8008a6c:	40011400 	.word	0x40011400
 8008a70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a86:	4642      	mov	r2, r8
 8008a88:	464b      	mov	r3, r9
 8008a8a:	1891      	adds	r1, r2, r2
 8008a8c:	6239      	str	r1, [r7, #32]
 8008a8e:	415b      	adcs	r3, r3
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
 8008a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a96:	4641      	mov	r1, r8
 8008a98:	1854      	adds	r4, r2, r1
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	eb43 0501 	adc.w	r5, r3, r1
 8008aa0:	f04f 0200 	mov.w	r2, #0
 8008aa4:	f04f 0300 	mov.w	r3, #0
 8008aa8:	00eb      	lsls	r3, r5, #3
 8008aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008aae:	00e2      	lsls	r2, r4, #3
 8008ab0:	4614      	mov	r4, r2
 8008ab2:	461d      	mov	r5, r3
 8008ab4:	4643      	mov	r3, r8
 8008ab6:	18e3      	adds	r3, r4, r3
 8008ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008abc:	464b      	mov	r3, r9
 8008abe:	eb45 0303 	adc.w	r3, r5, r3
 8008ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ad2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	f04f 0300 	mov.w	r3, #0
 8008ade:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	008b      	lsls	r3, r1, #2
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aec:	4621      	mov	r1, r4
 8008aee:	008a      	lsls	r2, r1, #2
 8008af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008af4:	f7f8 f878 	bl	8000be8 <__aeabi_uldivmod>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4b60      	ldr	r3, [pc, #384]	; (8008c80 <UART_SetConfig+0x4e4>)
 8008afe:	fba3 2302 	umull	r2, r3, r3, r2
 8008b02:	095b      	lsrs	r3, r3, #5
 8008b04:	011c      	lsls	r4, r3, #4
 8008b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	1891      	adds	r1, r2, r2
 8008b1e:	61b9      	str	r1, [r7, #24]
 8008b20:	415b      	adcs	r3, r3
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b28:	4641      	mov	r1, r8
 8008b2a:	1851      	adds	r1, r2, r1
 8008b2c:	6139      	str	r1, [r7, #16]
 8008b2e:	4649      	mov	r1, r9
 8008b30:	414b      	adcs	r3, r1
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b40:	4659      	mov	r1, fp
 8008b42:	00cb      	lsls	r3, r1, #3
 8008b44:	4651      	mov	r1, sl
 8008b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b4a:	4651      	mov	r1, sl
 8008b4c:	00ca      	lsls	r2, r1, #3
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	4642      	mov	r2, r8
 8008b56:	189b      	adds	r3, r3, r2
 8008b58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b5c:	464b      	mov	r3, r9
 8008b5e:	460a      	mov	r2, r1
 8008b60:	eb42 0303 	adc.w	r3, r2, r3
 8008b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b74:	f04f 0200 	mov.w	r2, #0
 8008b78:	f04f 0300 	mov.w	r3, #0
 8008b7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b80:	4649      	mov	r1, r9
 8008b82:	008b      	lsls	r3, r1, #2
 8008b84:	4641      	mov	r1, r8
 8008b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	008a      	lsls	r2, r1, #2
 8008b8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b92:	f7f8 f829 	bl	8000be8 <__aeabi_uldivmod>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4b38      	ldr	r3, [pc, #224]	; (8008c80 <UART_SetConfig+0x4e4>)
 8008b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8008ba2:	095b      	lsrs	r3, r3, #5
 8008ba4:	2264      	movs	r2, #100	; 0x64
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
 8008baa:	1acb      	subs	r3, r1, r3
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	3332      	adds	r3, #50	; 0x32
 8008bb0:	4a33      	ldr	r2, [pc, #204]	; (8008c80 <UART_SetConfig+0x4e4>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	095b      	lsrs	r3, r3, #5
 8008bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bbc:	441c      	add	r4, r3
 8008bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	673b      	str	r3, [r7, #112]	; 0x70
 8008bc6:	677a      	str	r2, [r7, #116]	; 0x74
 8008bc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bcc:	4642      	mov	r2, r8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	1891      	adds	r1, r2, r2
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	415b      	adcs	r3, r3
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bdc:	4641      	mov	r1, r8
 8008bde:	1851      	adds	r1, r2, r1
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	4649      	mov	r1, r9
 8008be4:	414b      	adcs	r3, r1
 8008be6:	607b      	str	r3, [r7, #4]
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	f04f 0300 	mov.w	r3, #0
 8008bf0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bf4:	4659      	mov	r1, fp
 8008bf6:	00cb      	lsls	r3, r1, #3
 8008bf8:	4651      	mov	r1, sl
 8008bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bfe:	4651      	mov	r1, sl
 8008c00:	00ca      	lsls	r2, r1, #3
 8008c02:	4610      	mov	r0, r2
 8008c04:	4619      	mov	r1, r3
 8008c06:	4603      	mov	r3, r0
 8008c08:	4642      	mov	r2, r8
 8008c0a:	189b      	adds	r3, r3, r2
 8008c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c0e:	464b      	mov	r3, r9
 8008c10:	460a      	mov	r2, r1
 8008c12:	eb42 0303 	adc.w	r3, r2, r3
 8008c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	663b      	str	r3, [r7, #96]	; 0x60
 8008c22:	667a      	str	r2, [r7, #100]	; 0x64
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	f04f 0300 	mov.w	r3, #0
 8008c2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c30:	4649      	mov	r1, r9
 8008c32:	008b      	lsls	r3, r1, #2
 8008c34:	4641      	mov	r1, r8
 8008c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	008a      	lsls	r2, r1, #2
 8008c3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c42:	f7f7 ffd1 	bl	8000be8 <__aeabi_uldivmod>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <UART_SetConfig+0x4e4>)
 8008c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	2164      	movs	r1, #100	; 0x64
 8008c54:	fb01 f303 	mul.w	r3, r1, r3
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	3332      	adds	r3, #50	; 0x32
 8008c5e:	4a08      	ldr	r2, [pc, #32]	; (8008c80 <UART_SetConfig+0x4e4>)
 8008c60:	fba2 2303 	umull	r2, r3, r2, r3
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	f003 020f 	and.w	r2, r3, #15
 8008c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4422      	add	r2, r4
 8008c72:	609a      	str	r2, [r3, #8]
}
 8008c74:	bf00      	nop
 8008c76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c80:	51eb851f 	.word	0x51eb851f

08008c84 <__NVIC_SetPriority>:
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	db0a      	blt.n	8008cae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	490c      	ldr	r1, [pc, #48]	; (8008cd0 <__NVIC_SetPriority+0x4c>)
 8008c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ca2:	0112      	lsls	r2, r2, #4
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008cac:	e00a      	b.n	8008cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	4908      	ldr	r1, [pc, #32]	; (8008cd4 <__NVIC_SetPriority+0x50>)
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	3b04      	subs	r3, #4
 8008cbc:	0112      	lsls	r2, r2, #4
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	761a      	strb	r2, [r3, #24]
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	e000e100 	.word	0xe000e100
 8008cd4:	e000ed00 	.word	0xe000ed00

08008cd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008cdc:	2100      	movs	r1, #0
 8008cde:	f06f 0004 	mvn.w	r0, #4
 8008ce2:	f7ff ffcf 	bl	8008c84 <__NVIC_SetPriority>
#endif
}
 8008ce6:	bf00      	nop
 8008ce8:	bd80      	pop	{r7, pc}
	...

08008cec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cf2:	f3ef 8305 	mrs	r3, IPSR
 8008cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8008cf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008cfe:	f06f 0305 	mvn.w	r3, #5
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	e00c      	b.n	8008d20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d06:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <osKernelInitialize+0x44>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d0e:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <osKernelInitialize+0x44>)
 8008d10:	2201      	movs	r2, #1
 8008d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	607b      	str	r3, [r7, #4]
 8008d18:	e002      	b.n	8008d20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d20:	687b      	ldr	r3, [r7, #4]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	2000089c 	.word	0x2000089c

08008d34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d3a:	f3ef 8305 	mrs	r3, IPSR
 8008d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d46:	f06f 0305 	mvn.w	r3, #5
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	e010      	b.n	8008d70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d4e:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <osKernelStart+0x48>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d109      	bne.n	8008d6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d56:	f7ff ffbf 	bl	8008cd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d5a:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <osKernelStart+0x48>)
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d60:	f001 f87c 	bl	8009e5c <vTaskStartScheduler>
      stat = osOK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	607b      	str	r3, [r7, #4]
 8008d68:	e002      	b.n	8008d70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d70:	687b      	ldr	r3, [r7, #4]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	2000089c 	.word	0x2000089c

08008d80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08e      	sub	sp, #56	; 0x38
 8008d84:	af04      	add	r7, sp, #16
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d90:	f3ef 8305 	mrs	r3, IPSR
 8008d94:	617b      	str	r3, [r7, #20]
  return(result);
 8008d96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d17e      	bne.n	8008e9a <osThreadNew+0x11a>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d07b      	beq.n	8008e9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008da2:	2380      	movs	r3, #128	; 0x80
 8008da4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008da6:	2318      	movs	r3, #24
 8008da8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008dae:	f04f 33ff 	mov.w	r3, #4294967295
 8008db2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d045      	beq.n	8008e46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <osThreadNew+0x48>
        name = attr->name;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d008      	beq.n	8008dee <osThreadNew+0x6e>
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b38      	cmp	r3, #56	; 0x38
 8008de0:	d805      	bhi.n	8008dee <osThreadNew+0x6e>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <osThreadNew+0x72>
        return (NULL);
 8008dee:	2300      	movs	r3, #0
 8008df0:	e054      	b.n	8008e9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	089b      	lsrs	r3, r3, #2
 8008e00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00e      	beq.n	8008e28 <osThreadNew+0xa8>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	2ba7      	cmp	r3, #167	; 0xa7
 8008e10:	d90a      	bls.n	8008e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d006      	beq.n	8008e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <osThreadNew+0xa8>
        mem = 1;
 8008e22:	2301      	movs	r3, #1
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	e010      	b.n	8008e4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10c      	bne.n	8008e4a <osThreadNew+0xca>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d108      	bne.n	8008e4a <osThreadNew+0xca>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <osThreadNew+0xca>
          mem = 0;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61bb      	str	r3, [r7, #24]
 8008e44:	e001      	b.n	8008e4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d110      	bne.n	8008e72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e58:	9202      	str	r2, [sp, #8]
 8008e5a:	9301      	str	r3, [sp, #4]
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6a3a      	ldr	r2, [r7, #32]
 8008e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fe0c 	bl	8009a84 <xTaskCreateStatic>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	613b      	str	r3, [r7, #16]
 8008e70:	e013      	b.n	8008e9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d110      	bne.n	8008e9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	f107 0310 	add.w	r3, r7, #16
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 fe57 	bl	8009b3e <xTaskCreate>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d001      	beq.n	8008e9a <osThreadNew+0x11a>
            hTask = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008e9a:	693b      	ldr	r3, [r7, #16]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3728      	adds	r7, #40	; 0x28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eac:	f3ef 8305 	mrs	r3, IPSR
 8008eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <osDelay+0x1c>
    stat = osErrorISR;
 8008eb8:	f06f 0305 	mvn.w	r3, #5
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e007      	b.n	8008ed0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 ff92 	bl	8009df4 <vTaskDelay>
    }
  }

  return (stat);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4a07      	ldr	r2, [pc, #28]	; (8008f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8008eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	4a06      	ldr	r2, [pc, #24]	; (8008f0c <vApplicationGetIdleTaskMemory+0x30>)
 8008ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2280      	movs	r2, #128	; 0x80
 8008ef8:	601a      	str	r2, [r3, #0]
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	200008a0 	.word	0x200008a0
 8008f0c:	20000948 	.word	0x20000948

08008f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a07      	ldr	r2, [pc, #28]	; (8008f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8008f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4a06      	ldr	r2, [pc, #24]	; (8008f40 <vApplicationGetTimerTaskMemory+0x30>)
 8008f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f2e:	601a      	str	r2, [r3, #0]
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	20000b48 	.word	0x20000b48
 8008f40:	20000bf0 	.word	0x20000bf0

08008f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f103 0208 	add.w	r2, r3, #8
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f103 0208 	add.w	r2, r3, #8
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f103 0208 	add.w	r2, r3, #8
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	601a      	str	r2, [r3, #0]
}
 8008fda:	bf00      	nop
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr

08008fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b085      	sub	sp, #20
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d103      	bne.n	8009006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e00c      	b.n	8009020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3308      	adds	r3, #8
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	e002      	b.n	8009014 <vListInsert+0x2e>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	429a      	cmp	r2, r3
 800901e:	d2f6      	bcs.n	800900e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	601a      	str	r2, [r3, #0]
}
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6892      	ldr	r2, [r2, #8]
 800906e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6852      	ldr	r2, [r2, #4]
 8009078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d103      	bne.n	800908c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	1e5a      	subs	r2, r3, #1
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090d6:	f002 f875 	bl	800b1c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090e6:	fb01 f303 	mul.w	r3, r1, r3
 80090ea:	441a      	add	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009106:	3b01      	subs	r3, #1
 8009108:	68f9      	ldr	r1, [r7, #12]
 800910a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800910c:	fb01 f303 	mul.w	r3, r1, r3
 8009110:	441a      	add	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	22ff      	movs	r2, #255	; 0xff
 800911a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	22ff      	movs	r2, #255	; 0xff
 8009122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d114      	bne.n	8009156 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01a      	beq.n	800916a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3310      	adds	r3, #16
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f929 	bl	800a390 <xTaskRemoveFromEventList>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d012      	beq.n	800916a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <xQueueGenericReset+0xcc>)
 8009146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	e009      	b.n	800916a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3310      	adds	r3, #16
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fef2 	bl	8008f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3324      	adds	r3, #36	; 0x24
 8009164:	4618      	mov	r0, r3
 8009166:	f7ff feed 	bl	8008f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800916a:	f002 f85b 	bl	800b224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800916e:	2301      	movs	r3, #1
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	e000ed04 	.word	0xe000ed04

0800917c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08e      	sub	sp, #56	; 0x38
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <xQueueGenericCreateStatic+0x52>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d001      	beq.n	80091d2 <xQueueGenericCreateStatic+0x56>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <xQueueGenericCreateStatic+0x58>
 80091d2:	2300      	movs	r3, #0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	623b      	str	r3, [r7, #32]
}
 80091ea:	bf00      	nop
 80091ec:	e7fe      	b.n	80091ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <xQueueGenericCreateStatic+0x7e>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d101      	bne.n	80091fe <xQueueGenericCreateStatic+0x82>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e000      	b.n	8009200 <xQueueGenericCreateStatic+0x84>
 80091fe:	2300      	movs	r3, #0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	61fb      	str	r3, [r7, #28]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800921a:	2350      	movs	r3, #80	; 0x50
 800921c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b50      	cmp	r3, #80	; 0x50
 8009222:	d00a      	beq.n	800923a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	61bb      	str	r3, [r7, #24]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800923a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00d      	beq.n	8009262 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800924e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	4613      	mov	r3, r2
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f805 	bl	800926c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009264:	4618      	mov	r0, r3
 8009266:	3730      	adds	r7, #48	; 0x30
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d103      	bne.n	8009288 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	e002      	b.n	800928e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800929a:	2101      	movs	r1, #1
 800929c:	69b8      	ldr	r0, [r7, #24]
 800929e:	f7ff ff05 	bl	80090ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	78fa      	ldrb	r2, [r7, #3]
 80092a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08e      	sub	sp, #56	; 0x38
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092c2:	2300      	movs	r3, #0
 80092c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <xQueueGenericSend+0x32>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d103      	bne.n	80092f4 <xQueueGenericSend+0x40>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <xQueueGenericSend+0x44>
 80092f4:	2301      	movs	r3, #1
 80092f6:	e000      	b.n	80092fa <xQueueGenericSend+0x46>
 80092f8:	2300      	movs	r3, #0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10a      	bne.n	8009314 <xQueueGenericSend+0x60>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b02      	cmp	r3, #2
 8009318:	d103      	bne.n	8009322 <xQueueGenericSend+0x6e>
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <xQueueGenericSend+0x72>
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <xQueueGenericSend+0x74>
 8009326:	2300      	movs	r3, #0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <xQueueGenericSend+0x8e>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	623b      	str	r3, [r7, #32]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009342:	f001 f9e7 	bl	800a714 <xTaskGetSchedulerState>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d102      	bne.n	8009352 <xQueueGenericSend+0x9e>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <xQueueGenericSend+0xa2>
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <xQueueGenericSend+0xa4>
 8009356:	2300      	movs	r3, #0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <xQueueGenericSend+0xbe>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	61fb      	str	r3, [r7, #28]
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009372:	f001 ff27 	bl	800b1c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937e:	429a      	cmp	r2, r3
 8009380:	d302      	bcc.n	8009388 <xQueueGenericSend+0xd4>
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d129      	bne.n	80093dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800938e:	f000 fa0b 	bl	80097a8 <prvCopyDataToQueue>
 8009392:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	2b00      	cmp	r3, #0
 800939a:	d010      	beq.n	80093be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	3324      	adds	r3, #36	; 0x24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f000 fff5 	bl	800a390 <xTaskRemoveFromEventList>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d013      	beq.n	80093d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093ac:	4b3f      	ldr	r3, [pc, #252]	; (80094ac <xQueueGenericSend+0x1f8>)
 80093ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	e00a      	b.n	80093d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d007      	beq.n	80093d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093c4:	4b39      	ldr	r3, [pc, #228]	; (80094ac <xQueueGenericSend+0x1f8>)
 80093c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80093d4:	f001 ff26 	bl	800b224 <vPortExitCritical>
				return pdPASS;
 80093d8:	2301      	movs	r3, #1
 80093da:	e063      	b.n	80094a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d103      	bne.n	80093ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093e2:	f001 ff1f 	bl	800b224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	e05c      	b.n	80094a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d106      	bne.n	80093fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093f0:	f107 0314 	add.w	r3, r7, #20
 80093f4:	4618      	mov	r0, r3
 80093f6:	f001 f82f 	bl	800a458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093fa:	2301      	movs	r3, #1
 80093fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093fe:	f001 ff11 	bl	800b224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009402:	f000 fd9b 	bl	8009f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009406:	f001 fedd 	bl	800b1c4 <vPortEnterCritical>
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009410:	b25b      	sxtb	r3, r3
 8009412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009416:	d103      	bne.n	8009420 <xQueueGenericSend+0x16c>
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009426:	b25b      	sxtb	r3, r3
 8009428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942c:	d103      	bne.n	8009436 <xQueueGenericSend+0x182>
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009436:	f001 fef5 	bl	800b224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800943a:	1d3a      	adds	r2, r7, #4
 800943c:	f107 0314 	add.w	r3, r7, #20
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f001 f81e 	bl	800a484 <xTaskCheckForTimeOut>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d124      	bne.n	8009498 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800944e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009450:	f000 faa2 	bl	8009998 <prvIsQueueFull>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d018      	beq.n	800948c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	3310      	adds	r3, #16
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	4611      	mov	r1, r2
 8009462:	4618      	mov	r0, r3
 8009464:	f000 ff44 	bl	800a2f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800946a:	f000 fa2d 	bl	80098c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800946e:	f000 fd73 	bl	8009f58 <xTaskResumeAll>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	f47f af7c 	bne.w	8009372 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800947a:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <xQueueGenericSend+0x1f8>)
 800947c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	e772      	b.n	8009372 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800948c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800948e:	f000 fa1b 	bl	80098c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009492:	f000 fd61 	bl	8009f58 <xTaskResumeAll>
 8009496:	e76c      	b.n	8009372 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800949a:	f000 fa15 	bl	80098c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800949e:	f000 fd5b 	bl	8009f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3738      	adds	r7, #56	; 0x38
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	e000ed04 	.word	0xe000ed04

080094b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b090      	sub	sp, #64	; 0x40
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d103      	bne.n	80094ec <xQueueGenericSendFromISR+0x3c>
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <xQueueGenericSendFromISR+0x40>
 80094ec:	2301      	movs	r3, #1
 80094ee:	e000      	b.n	80094f2 <xQueueGenericSendFromISR+0x42>
 80094f0:	2300      	movs	r3, #0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d103      	bne.n	800951a <xQueueGenericSendFromISR+0x6a>
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009516:	2b01      	cmp	r3, #1
 8009518:	d101      	bne.n	800951e <xQueueGenericSendFromISR+0x6e>
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <xQueueGenericSendFromISR+0x70>
 800951e:	2300      	movs	r3, #0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10a      	bne.n	800953a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	623b      	str	r3, [r7, #32]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800953a:	f001 ff25 	bl	800b388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800953e:	f3ef 8211 	mrs	r2, BASEPRI
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	61fa      	str	r2, [r7, #28]
 8009554:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009556:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009562:	429a      	cmp	r2, r3
 8009564:	d302      	bcc.n	800956c <xQueueGenericSendFromISR+0xbc>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d12f      	bne.n	80095cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	68b9      	ldr	r1, [r7, #8]
 8009580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009582:	f000 f911 	bl	80097a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009586:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800958a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958e:	d112      	bne.n	80095b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	d016      	beq.n	80095c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	3324      	adds	r3, #36	; 0x24
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fef7 	bl	800a390 <xTaskRemoveFromEventList>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00e      	beq.n	80095c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00b      	beq.n	80095c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	e007      	b.n	80095c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095ba:	3301      	adds	r3, #1
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	b25a      	sxtb	r2, r3
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80095c6:	2301      	movs	r3, #1
 80095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80095ca:	e001      	b.n	80095d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80095cc:	2300      	movs	r3, #0
 80095ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3740      	adds	r7, #64	; 0x40
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08c      	sub	sp, #48	; 0x30
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095f4:	2300      	movs	r3, #0
 80095f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <xQueueReceive+0x30>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	623b      	str	r3, [r7, #32]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d103      	bne.n	8009626 <xQueueReceive+0x3e>
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <xQueueReceive+0x42>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <xQueueReceive+0x44>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <xQueueReceive+0x5e>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	61fb      	str	r3, [r7, #28]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009646:	f001 f865 	bl	800a714 <xTaskGetSchedulerState>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <xQueueReceive+0x6e>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <xQueueReceive+0x72>
 8009656:	2301      	movs	r3, #1
 8009658:	e000      	b.n	800965c <xQueueReceive+0x74>
 800965a:	2300      	movs	r3, #0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10a      	bne.n	8009676 <xQueueReceive+0x8e>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	61bb      	str	r3, [r7, #24]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009676:	f001 fda5 	bl	800b1c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01f      	beq.n	80096c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968a:	f000 f8f7 	bl	800987c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009690:	1e5a      	subs	r2, r3, #1
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00f      	beq.n	80096be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	3310      	adds	r3, #16
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 fe74 	bl	800a390 <xTaskRemoveFromEventList>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d007      	beq.n	80096be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80096ae:	4b3d      	ldr	r3, [pc, #244]	; (80097a4 <xQueueReceive+0x1bc>)
 80096b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096be:	f001 fdb1 	bl	800b224 <vPortExitCritical>
				return pdPASS;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e069      	b.n	800979a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096cc:	f001 fdaa 	bl	800b224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096d0:	2300      	movs	r3, #0
 80096d2:	e062      	b.n	800979a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d106      	bne.n	80096e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096da:	f107 0310 	add.w	r3, r7, #16
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 feba 	bl	800a458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096e4:	2301      	movs	r3, #1
 80096e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096e8:	f001 fd9c 	bl	800b224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ec:	f000 fc26 	bl	8009f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096f0:	f001 fd68 	bl	800b1c4 <vPortEnterCritical>
 80096f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096fa:	b25b      	sxtb	r3, r3
 80096fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009700:	d103      	bne.n	800970a <xQueueReceive+0x122>
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009710:	b25b      	sxtb	r3, r3
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	d103      	bne.n	8009720 <xQueueReceive+0x138>
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009720:	f001 fd80 	bl	800b224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009724:	1d3a      	adds	r2, r7, #4
 8009726:	f107 0310 	add.w	r3, r7, #16
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fea9 	bl	800a484 <xTaskCheckForTimeOut>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d123      	bne.n	8009780 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800973a:	f000 f917 	bl	800996c <prvIsQueueEmpty>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d017      	beq.n	8009774 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	3324      	adds	r3, #36	; 0x24
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fdcf 	bl	800a2f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009754:	f000 f8b8 	bl	80098c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009758:	f000 fbfe 	bl	8009f58 <xTaskResumeAll>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d189      	bne.n	8009676 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009762:	4b10      	ldr	r3, [pc, #64]	; (80097a4 <xQueueReceive+0x1bc>)
 8009764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	e780      	b.n	8009676 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009776:	f000 f8a7 	bl	80098c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800977a:	f000 fbed 	bl	8009f58 <xTaskResumeAll>
 800977e:	e77a      	b.n	8009676 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009782:	f000 f8a1 	bl	80098c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009786:	f000 fbe7 	bl	8009f58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800978a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800978c:	f000 f8ee 	bl	800996c <prvIsQueueEmpty>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	f43f af6f 	beq.w	8009676 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009798:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800979a:	4618      	mov	r0, r3
 800979c:	3730      	adds	r7, #48	; 0x30
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	e000ed04 	.word	0xe000ed04

080097a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10d      	bne.n	80097e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d14d      	bne.n	800986a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 ffbc 	bl	800a750 <xTaskPriorityDisinherit>
 80097d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	609a      	str	r2, [r3, #8]
 80097e0:	e043      	b.n	800986a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d119      	bne.n	800981c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6858      	ldr	r0, [r3, #4]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f0:	461a      	mov	r2, r3
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	f002 fe40 	bl	800c478 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009800:	441a      	add	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	429a      	cmp	r2, r3
 8009810:	d32b      	bcc.n	800986a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	605a      	str	r2, [r3, #4]
 800981a:	e026      	b.n	800986a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68d8      	ldr	r0, [r3, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009824:	461a      	mov	r2, r3
 8009826:	68b9      	ldr	r1, [r7, #8]
 8009828:	f002 fe26 	bl	800c478 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009834:	425b      	negs	r3, r3
 8009836:	441a      	add	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	68da      	ldr	r2, [r3, #12]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d207      	bcs.n	8009858 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009850:	425b      	negs	r3, r3
 8009852:	441a      	add	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d105      	bne.n	800986a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	3b01      	subs	r3, #1
 8009868:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009872:	697b      	ldr	r3, [r7, #20]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d018      	beq.n	80098c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009896:	441a      	add	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d303      	bcc.n	80098b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	68d9      	ldr	r1, [r3, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b8:	461a      	mov	r2, r3
 80098ba:	6838      	ldr	r0, [r7, #0]
 80098bc:	f002 fddc 	bl	800c478 <memcpy>
	}
}
 80098c0:	bf00      	nop
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80098d0:	f001 fc78 	bl	800b1c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098dc:	e011      	b.n	8009902 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d012      	beq.n	800990c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3324      	adds	r3, #36	; 0x24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fd50 	bl	800a390 <xTaskRemoveFromEventList>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098f6:	f000 fe27 	bl	800a548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009906:	2b00      	cmp	r3, #0
 8009908:	dce9      	bgt.n	80098de <prvUnlockQueue+0x16>
 800990a:	e000      	b.n	800990e <prvUnlockQueue+0x46>
					break;
 800990c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	22ff      	movs	r2, #255	; 0xff
 8009912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009916:	f001 fc85 	bl	800b224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800991a:	f001 fc53 	bl	800b1c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009924:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009926:	e011      	b.n	800994c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d012      	beq.n	8009956 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3310      	adds	r3, #16
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fd2b 	bl	800a390 <xTaskRemoveFromEventList>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009940:	f000 fe02 	bl	800a548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	3b01      	subs	r3, #1
 8009948:	b2db      	uxtb	r3, r3
 800994a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800994c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009950:	2b00      	cmp	r3, #0
 8009952:	dce9      	bgt.n	8009928 <prvUnlockQueue+0x60>
 8009954:	e000      	b.n	8009958 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009956:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	22ff      	movs	r2, #255	; 0xff
 800995c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009960:	f001 fc60 	bl	800b224 <vPortExitCritical>
}
 8009964:	bf00      	nop
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009974:	f001 fc26 	bl	800b1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009980:	2301      	movs	r3, #1
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	e001      	b.n	800998a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009986:	2300      	movs	r3, #0
 8009988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800998a:	f001 fc4b 	bl	800b224 <vPortExitCritical>

	return xReturn;
 800998e:	68fb      	ldr	r3, [r7, #12]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099a0:	f001 fc10 	bl	800b1c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d102      	bne.n	80099b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80099b0:	2301      	movs	r3, #1
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	e001      	b.n	80099ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099ba:	f001 fc33 	bl	800b224 <vPortExitCritical>

	return xReturn;
 80099be:	68fb      	ldr	r3, [r7, #12]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	e014      	b.n	8009a02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099d8:	4a0f      	ldr	r2, [pc, #60]	; (8009a18 <vQueueAddToRegistry+0x50>)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10b      	bne.n	80099fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099e4:	490c      	ldr	r1, [pc, #48]	; (8009a18 <vQueueAddToRegistry+0x50>)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099ee:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <vQueueAddToRegistry+0x50>)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	4413      	add	r3, r2
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099fa:	e006      	b.n	8009a0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3301      	adds	r3, #1
 8009a00:	60fb      	str	r3, [r7, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b07      	cmp	r3, #7
 8009a06:	d9e7      	bls.n	80099d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20000ff0 	.word	0x20000ff0

08009a1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a2c:	f001 fbca 	bl	800b1c4 <vPortEnterCritical>
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a36:	b25b      	sxtb	r3, r3
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d103      	bne.n	8009a46 <vQueueWaitForMessageRestricted+0x2a>
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a4c:	b25b      	sxtb	r3, r3
 8009a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a52:	d103      	bne.n	8009a5c <vQueueWaitForMessageRestricted+0x40>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a5c:	f001 fbe2 	bl	800b224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d106      	bne.n	8009a76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	3324      	adds	r3, #36	; 0x24
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 fc61 	bl	800a338 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a76:	6978      	ldr	r0, [r7, #20]
 8009a78:	f7ff ff26 	bl	80098c8 <prvUnlockQueue>
	}
 8009a7c:	bf00      	nop
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	; 0x38
 8009a88:	af04      	add	r7, sp, #16
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10a      	bne.n	8009aae <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9c:	f383 8811 	msr	BASEPRI, r3
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	623b      	str	r3, [r7, #32]
}
 8009aaa:	bf00      	nop
 8009aac:	e7fe      	b.n	8009aac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <xTaskCreateStatic+0x46>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	61fb      	str	r3, [r7, #28]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009aca:	23a8      	movs	r3, #168	; 0xa8
 8009acc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	2ba8      	cmp	r3, #168	; 0xa8
 8009ad2:	d00a      	beq.n	8009aea <xTaskCreateStatic+0x66>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	61bb      	str	r3, [r7, #24]
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009aea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d01e      	beq.n	8009b30 <xTaskCreateStatic+0xac>
 8009af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01b      	beq.n	8009b30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	2202      	movs	r2, #2
 8009b06:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9303      	str	r3, [sp, #12]
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b10:	9302      	str	r3, [sp, #8]
 8009b12:	f107 0314 	add.w	r3, r7, #20
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	68b9      	ldr	r1, [r7, #8]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 f850 	bl	8009bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b2a:	f000 f8f3 	bl	8009d14 <prvAddNewTaskToReadyList>
 8009b2e:	e001      	b.n	8009b34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b34:	697b      	ldr	r3, [r7, #20]
	}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3728      	adds	r7, #40	; 0x28
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b08c      	sub	sp, #48	; 0x30
 8009b42:	af04      	add	r7, sp, #16
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	603b      	str	r3, [r7, #0]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 fc58 	bl	800b408 <pvPortMalloc>
 8009b58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00e      	beq.n	8009b7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b60:	20a8      	movs	r0, #168	; 0xa8
 8009b62:	f001 fc51 	bl	800b408 <pvPortMalloc>
 8009b66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	631a      	str	r2, [r3, #48]	; 0x30
 8009b74:	e005      	b.n	8009b82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b76:	6978      	ldr	r0, [r7, #20]
 8009b78:	f001 fd12 	bl	800b5a0 <vPortFree>
 8009b7c:	e001      	b.n	8009b82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d017      	beq.n	8009bb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b90:	88fa      	ldrh	r2, [r7, #6]
 8009b92:	2300      	movs	r3, #0
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	9302      	str	r3, [sp, #8]
 8009b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 f80e 	bl	8009bc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bac:	69f8      	ldr	r0, [r7, #28]
 8009bae:	f000 f8b1 	bl	8009d14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	e002      	b.n	8009bbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
	}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
 8009bd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	461a      	mov	r2, r3
 8009be0:	21a5      	movs	r1, #165	; 0xa5
 8009be2:	f002 fb74 	bl	800c2ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	f023 0307 	bic.w	r3, r3, #7
 8009bfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	617b      	str	r3, [r7, #20]
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d01f      	beq.n	8009c66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c26:	2300      	movs	r3, #0
 8009c28:	61fb      	str	r3, [r7, #28]
 8009c2a:	e012      	b.n	8009c52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	4413      	add	r3, r2
 8009c32:	7819      	ldrb	r1, [r3, #0]
 8009c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	3334      	adds	r3, #52	; 0x34
 8009c3c:	460a      	mov	r2, r1
 8009c3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d006      	beq.n	8009c5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2b0f      	cmp	r3, #15
 8009c56:	d9e9      	bls.n	8009c2c <prvInitialiseNewTask+0x64>
 8009c58:	e000      	b.n	8009c5c <prvInitialiseNewTask+0x94>
			{
				break;
 8009c5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c64:	e003      	b.n	8009c6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	2b37      	cmp	r3, #55	; 0x37
 8009c72:	d901      	bls.n	8009c78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c74:	2337      	movs	r3, #55	; 0x37
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	2200      	movs	r2, #0
 8009c88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff f978 	bl	8008f84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	3318      	adds	r3, #24
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7ff f973 	bl	8008f84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	3354      	adds	r3, #84	; 0x54
 8009cc8:	224c      	movs	r2, #76	; 0x4c
 8009cca:	2100      	movs	r1, #0
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f002 fafe 	bl	800c2ce <memset>
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	4a0c      	ldr	r2, [pc, #48]	; (8009d08 <prvInitialiseNewTask+0x140>)
 8009cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cda:	4a0c      	ldr	r2, [pc, #48]	; (8009d0c <prvInitialiseNewTask+0x144>)
 8009cdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	4a0b      	ldr	r2, [pc, #44]	; (8009d10 <prvInitialiseNewTask+0x148>)
 8009ce2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	68f9      	ldr	r1, [r7, #12]
 8009ce8:	69b8      	ldr	r0, [r7, #24]
 8009cea:	f001 f941 	bl	800af70 <pxPortInitialiseStack>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d002      	beq.n	8009d00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d00:	bf00      	nop
 8009d02:	3720      	adds	r7, #32
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	20005284 	.word	0x20005284
 8009d0c:	200052ec 	.word	0x200052ec
 8009d10:	20005354 	.word	0x20005354

08009d14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d1c:	f001 fa52 	bl	800b1c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d20:	4b2d      	ldr	r3, [pc, #180]	; (8009dd8 <prvAddNewTaskToReadyList+0xc4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3301      	adds	r3, #1
 8009d26:	4a2c      	ldr	r2, [pc, #176]	; (8009dd8 <prvAddNewTaskToReadyList+0xc4>)
 8009d28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d2a:	4b2c      	ldr	r3, [pc, #176]	; (8009ddc <prvAddNewTaskToReadyList+0xc8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d32:	4a2a      	ldr	r2, [pc, #168]	; (8009ddc <prvAddNewTaskToReadyList+0xc8>)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d38:	4b27      	ldr	r3, [pc, #156]	; (8009dd8 <prvAddNewTaskToReadyList+0xc4>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d110      	bne.n	8009d62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d40:	f000 fc26 	bl	800a590 <prvInitialiseTaskLists>
 8009d44:	e00d      	b.n	8009d62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d46:	4b26      	ldr	r3, [pc, #152]	; (8009de0 <prvAddNewTaskToReadyList+0xcc>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d4e:	4b23      	ldr	r3, [pc, #140]	; (8009ddc <prvAddNewTaskToReadyList+0xc8>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d802      	bhi.n	8009d62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d5c:	4a1f      	ldr	r2, [pc, #124]	; (8009ddc <prvAddNewTaskToReadyList+0xc8>)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d62:	4b20      	ldr	r3, [pc, #128]	; (8009de4 <prvAddNewTaskToReadyList+0xd0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3301      	adds	r3, #1
 8009d68:	4a1e      	ldr	r2, [pc, #120]	; (8009de4 <prvAddNewTaskToReadyList+0xd0>)
 8009d6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d6c:	4b1d      	ldr	r3, [pc, #116]	; (8009de4 <prvAddNewTaskToReadyList+0xd0>)
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d78:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <prvAddNewTaskToReadyList+0xd4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d903      	bls.n	8009d88 <prvAddNewTaskToReadyList+0x74>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	4a18      	ldr	r2, [pc, #96]	; (8009de8 <prvAddNewTaskToReadyList+0xd4>)
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4a15      	ldr	r2, [pc, #84]	; (8009dec <prvAddNewTaskToReadyList+0xd8>)
 8009d96:	441a      	add	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	f7ff f8fd 	bl	8008f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009da4:	f001 fa3e 	bl	800b224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009da8:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <prvAddNewTaskToReadyList+0xcc>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00e      	beq.n	8009dce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009db0:	4b0a      	ldr	r3, [pc, #40]	; (8009ddc <prvAddNewTaskToReadyList+0xc8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d207      	bcs.n	8009dce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009dbe:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <prvAddNewTaskToReadyList+0xdc>)
 8009dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dce:	bf00      	nop
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20001504 	.word	0x20001504
 8009ddc:	20001030 	.word	0x20001030
 8009de0:	20001510 	.word	0x20001510
 8009de4:	20001520 	.word	0x20001520
 8009de8:	2000150c 	.word	0x2000150c
 8009dec:	20001034 	.word	0x20001034
 8009df0:	e000ed04 	.word	0xe000ed04

08009df4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d017      	beq.n	8009e36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e06:	4b13      	ldr	r3, [pc, #76]	; (8009e54 <vTaskDelay+0x60>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <vTaskDelay+0x30>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	60bb      	str	r3, [r7, #8]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e24:	f000 f88a 	bl	8009f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e28:	2100      	movs	r1, #0
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fcfe 	bl	800a82c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e30:	f000 f892 	bl	8009f58 <xTaskResumeAll>
 8009e34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d107      	bne.n	8009e4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e3c:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <vTaskDelay+0x64>)
 8009e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e4c:	bf00      	nop
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	2000152c 	.word	0x2000152c
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08a      	sub	sp, #40	; 0x28
 8009e60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e6a:	463a      	mov	r2, r7
 8009e6c:	1d39      	adds	r1, r7, #4
 8009e6e:	f107 0308 	add.w	r3, r7, #8
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff f832 	bl	8008edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	9202      	str	r2, [sp, #8]
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	2300      	movs	r3, #0
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	2300      	movs	r3, #0
 8009e88:	460a      	mov	r2, r1
 8009e8a:	4924      	ldr	r1, [pc, #144]	; (8009f1c <vTaskStartScheduler+0xc0>)
 8009e8c:	4824      	ldr	r0, [pc, #144]	; (8009f20 <vTaskStartScheduler+0xc4>)
 8009e8e:	f7ff fdf9 	bl	8009a84 <xTaskCreateStatic>
 8009e92:	4603      	mov	r3, r0
 8009e94:	4a23      	ldr	r2, [pc, #140]	; (8009f24 <vTaskStartScheduler+0xc8>)
 8009e96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e98:	4b22      	ldr	r3, [pc, #136]	; (8009f24 <vTaskStartScheduler+0xc8>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	e001      	b.n	8009eaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d102      	bne.n	8009eb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009eb0:	f000 fd10 	bl	800a8d4 <xTimerCreateTimerTask>
 8009eb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d11b      	bne.n	8009ef4 <vTaskStartScheduler+0x98>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	613b      	str	r3, [r7, #16]
}
 8009ece:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ed0:	4b15      	ldr	r3, [pc, #84]	; (8009f28 <vTaskStartScheduler+0xcc>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3354      	adds	r3, #84	; 0x54
 8009ed6:	4a15      	ldr	r2, [pc, #84]	; (8009f2c <vTaskStartScheduler+0xd0>)
 8009ed8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009eda:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <vTaskStartScheduler+0xd4>)
 8009edc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ee2:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <vTaskStartScheduler+0xd8>)
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <vTaskStartScheduler+0xdc>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009eee:	f001 f8c7 	bl	800b080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ef2:	e00e      	b.n	8009f12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efa:	d10a      	bne.n	8009f12 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	60fb      	str	r3, [r7, #12]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <vTaskStartScheduler+0xb4>
}
 8009f12:	bf00      	nop
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	0800e628 	.word	0x0800e628
 8009f20:	0800a561 	.word	0x0800a561
 8009f24:	20001528 	.word	0x20001528
 8009f28:	20001030 	.word	0x20001030
 8009f2c:	2000006c 	.word	0x2000006c
 8009f30:	20001524 	.word	0x20001524
 8009f34:	20001510 	.word	0x20001510
 8009f38:	20001508 	.word	0x20001508

08009f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <vTaskSuspendAll+0x18>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	4a03      	ldr	r2, [pc, #12]	; (8009f54 <vTaskSuspendAll+0x18>)
 8009f48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f4a:	bf00      	nop
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	2000152c 	.word	0x2000152c

08009f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f66:	4b42      	ldr	r3, [pc, #264]	; (800a070 <xTaskResumeAll+0x118>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <xTaskResumeAll+0x2c>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	603b      	str	r3, [r7, #0]
}
 8009f80:	bf00      	nop
 8009f82:	e7fe      	b.n	8009f82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f84:	f001 f91e 	bl	800b1c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f88:	4b39      	ldr	r3, [pc, #228]	; (800a070 <xTaskResumeAll+0x118>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	4a38      	ldr	r2, [pc, #224]	; (800a070 <xTaskResumeAll+0x118>)
 8009f90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f92:	4b37      	ldr	r3, [pc, #220]	; (800a070 <xTaskResumeAll+0x118>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d162      	bne.n	800a060 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f9a:	4b36      	ldr	r3, [pc, #216]	; (800a074 <xTaskResumeAll+0x11c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d05e      	beq.n	800a060 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fa2:	e02f      	b.n	800a004 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa4:	4b34      	ldr	r3, [pc, #208]	; (800a078 <xTaskResumeAll+0x120>)
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3318      	adds	r3, #24
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7ff f851 	bl	8009058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7ff f84c 	bl	8009058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc4:	4b2d      	ldr	r3, [pc, #180]	; (800a07c <xTaskResumeAll+0x124>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d903      	bls.n	8009fd4 <xTaskResumeAll+0x7c>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	4a2a      	ldr	r2, [pc, #168]	; (800a07c <xTaskResumeAll+0x124>)
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	4a27      	ldr	r2, [pc, #156]	; (800a080 <xTaskResumeAll+0x128>)
 8009fe2:	441a      	add	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f7fe ffd7 	bl	8008f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff4:	4b23      	ldr	r3, [pc, #140]	; (800a084 <xTaskResumeAll+0x12c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d302      	bcc.n	800a004 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ffe:	4b22      	ldr	r3, [pc, #136]	; (800a088 <xTaskResumeAll+0x130>)
 800a000:	2201      	movs	r2, #1
 800a002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a004:	4b1c      	ldr	r3, [pc, #112]	; (800a078 <xTaskResumeAll+0x120>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1cb      	bne.n	8009fa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a012:	f000 fb5f 	bl	800a6d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a016:	4b1d      	ldr	r3, [pc, #116]	; (800a08c <xTaskResumeAll+0x134>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d010      	beq.n	800a044 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a022:	f000 f847 	bl	800a0b4 <xTaskIncrementTick>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a02c:	4b16      	ldr	r3, [pc, #88]	; (800a088 <xTaskResumeAll+0x130>)
 800a02e:	2201      	movs	r2, #1
 800a030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3b01      	subs	r3, #1
 800a036:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1f1      	bne.n	800a022 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <xTaskResumeAll+0x134>)
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a044:	4b10      	ldr	r3, [pc, #64]	; (800a088 <xTaskResumeAll+0x130>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <xTaskResumeAll+0x138>)
 800a052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a060:	f001 f8e0 	bl	800b224 <vPortExitCritical>

	return xAlreadyYielded;
 800a064:	68bb      	ldr	r3, [r7, #8]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	2000152c 	.word	0x2000152c
 800a074:	20001504 	.word	0x20001504
 800a078:	200014c4 	.word	0x200014c4
 800a07c:	2000150c 	.word	0x2000150c
 800a080:	20001034 	.word	0x20001034
 800a084:	20001030 	.word	0x20001030
 800a088:	20001518 	.word	0x20001518
 800a08c:	20001514 	.word	0x20001514
 800a090:	e000ed04 	.word	0xe000ed04

0800a094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a09a:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <xTaskGetTickCount+0x1c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0a0:	687b      	ldr	r3, [r7, #4]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20001508 	.word	0x20001508

0800a0b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0be:	4b4f      	ldr	r3, [pc, #316]	; (800a1fc <xTaskIncrementTick+0x148>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f040 808f 	bne.w	800a1e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0c8:	4b4d      	ldr	r3, [pc, #308]	; (800a200 <xTaskIncrementTick+0x14c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0d0:	4a4b      	ldr	r2, [pc, #300]	; (800a200 <xTaskIncrementTick+0x14c>)
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d120      	bne.n	800a11e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0dc:	4b49      	ldr	r3, [pc, #292]	; (800a204 <xTaskIncrementTick+0x150>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00a      	beq.n	800a0fc <xTaskIncrementTick+0x48>
	__asm volatile
 800a0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	603b      	str	r3, [r7, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <xTaskIncrementTick+0x46>
 800a0fc:	4b41      	ldr	r3, [pc, #260]	; (800a204 <xTaskIncrementTick+0x150>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	4b41      	ldr	r3, [pc, #260]	; (800a208 <xTaskIncrementTick+0x154>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a3f      	ldr	r2, [pc, #252]	; (800a204 <xTaskIncrementTick+0x150>)
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	4a3f      	ldr	r2, [pc, #252]	; (800a208 <xTaskIncrementTick+0x154>)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	4b3e      	ldr	r3, [pc, #248]	; (800a20c <xTaskIncrementTick+0x158>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a3d      	ldr	r2, [pc, #244]	; (800a20c <xTaskIncrementTick+0x158>)
 800a118:	6013      	str	r3, [r2, #0]
 800a11a:	f000 fadb 	bl	800a6d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a11e:	4b3c      	ldr	r3, [pc, #240]	; (800a210 <xTaskIncrementTick+0x15c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	429a      	cmp	r2, r3
 800a126:	d349      	bcc.n	800a1bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a128:	4b36      	ldr	r3, [pc, #216]	; (800a204 <xTaskIncrementTick+0x150>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d104      	bne.n	800a13c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a132:	4b37      	ldr	r3, [pc, #220]	; (800a210 <xTaskIncrementTick+0x15c>)
 800a134:	f04f 32ff 	mov.w	r2, #4294967295
 800a138:	601a      	str	r2, [r3, #0]
					break;
 800a13a:	e03f      	b.n	800a1bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a13c:	4b31      	ldr	r3, [pc, #196]	; (800a204 <xTaskIncrementTick+0x150>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d203      	bcs.n	800a15c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a154:	4a2e      	ldr	r2, [pc, #184]	; (800a210 <xTaskIncrementTick+0x15c>)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a15a:	e02f      	b.n	800a1bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	3304      	adds	r3, #4
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe ff79 	bl	8009058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d004      	beq.n	800a178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	3318      	adds	r3, #24
 800a172:	4618      	mov	r0, r3
 800a174:	f7fe ff70 	bl	8009058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17c:	4b25      	ldr	r3, [pc, #148]	; (800a214 <xTaskIncrementTick+0x160>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	429a      	cmp	r2, r3
 800a182:	d903      	bls.n	800a18c <xTaskIncrementTick+0xd8>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a188:	4a22      	ldr	r2, [pc, #136]	; (800a214 <xTaskIncrementTick+0x160>)
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a190:	4613      	mov	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4a1f      	ldr	r2, [pc, #124]	; (800a218 <xTaskIncrementTick+0x164>)
 800a19a:	441a      	add	r2, r3
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	4610      	mov	r0, r2
 800a1a4:	f7fe fefb 	bl	8008f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ac:	4b1b      	ldr	r3, [pc, #108]	; (800a21c <xTaskIncrementTick+0x168>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d3b8      	bcc.n	800a128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ba:	e7b5      	b.n	800a128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1bc:	4b17      	ldr	r3, [pc, #92]	; (800a21c <xTaskIncrementTick+0x168>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c2:	4915      	ldr	r1, [pc, #84]	; (800a218 <xTaskIncrementTick+0x164>)
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d901      	bls.n	800a1d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1d8:	4b11      	ldr	r3, [pc, #68]	; (800a220 <xTaskIncrementTick+0x16c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d007      	beq.n	800a1f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	e004      	b.n	800a1f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <xTaskIncrementTick+0x170>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	4a0d      	ldr	r2, [pc, #52]	; (800a224 <xTaskIncrementTick+0x170>)
 800a1ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a1f0:	697b      	ldr	r3, [r7, #20]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3718      	adds	r7, #24
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	2000152c 	.word	0x2000152c
 800a200:	20001508 	.word	0x20001508
 800a204:	200014bc 	.word	0x200014bc
 800a208:	200014c0 	.word	0x200014c0
 800a20c:	2000151c 	.word	0x2000151c
 800a210:	20001524 	.word	0x20001524
 800a214:	2000150c 	.word	0x2000150c
 800a218:	20001034 	.word	0x20001034
 800a21c:	20001030 	.word	0x20001030
 800a220:	20001518 	.word	0x20001518
 800a224:	20001514 	.word	0x20001514

0800a228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a22e:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <vTaskSwitchContext+0xb0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a236:	4b29      	ldr	r3, [pc, #164]	; (800a2dc <vTaskSwitchContext+0xb4>)
 800a238:	2201      	movs	r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a23c:	e046      	b.n	800a2cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a23e:	4b27      	ldr	r3, [pc, #156]	; (800a2dc <vTaskSwitchContext+0xb4>)
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a244:	4b26      	ldr	r3, [pc, #152]	; (800a2e0 <vTaskSwitchContext+0xb8>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e010      	b.n	800a26e <vTaskSwitchContext+0x46>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <vTaskSwitchContext+0x40>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	607b      	str	r3, [r7, #4]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <vTaskSwitchContext+0x3e>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	60fb      	str	r3, [r7, #12]
 800a26e:	491d      	ldr	r1, [pc, #116]	; (800a2e4 <vTaskSwitchContext+0xbc>)
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	4613      	mov	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4413      	add	r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	440b      	add	r3, r1
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0e4      	beq.n	800a24c <vTaskSwitchContext+0x24>
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	4613      	mov	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4a15      	ldr	r2, [pc, #84]	; (800a2e4 <vTaskSwitchContext+0xbc>)
 800a28e:	4413      	add	r3, r2
 800a290:	60bb      	str	r3, [r7, #8]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	605a      	str	r2, [r3, #4]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d104      	bne.n	800a2b2 <vTaskSwitchContext+0x8a>
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	605a      	str	r2, [r3, #4]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	4a0b      	ldr	r2, [pc, #44]	; (800a2e8 <vTaskSwitchContext+0xc0>)
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	4a08      	ldr	r2, [pc, #32]	; (800a2e0 <vTaskSwitchContext+0xb8>)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2c2:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <vTaskSwitchContext+0xc0>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3354      	adds	r3, #84	; 0x54
 800a2c8:	4a08      	ldr	r2, [pc, #32]	; (800a2ec <vTaskSwitchContext+0xc4>)
 800a2ca:	6013      	str	r3, [r2, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	2000152c 	.word	0x2000152c
 800a2dc:	20001518 	.word	0x20001518
 800a2e0:	2000150c 	.word	0x2000150c
 800a2e4:	20001034 	.word	0x20001034
 800a2e8:	20001030 	.word	0x20001030
 800a2ec:	2000006c 	.word	0x2000006c

0800a2f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	60fb      	str	r3, [r7, #12]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a316:	4b07      	ldr	r3, [pc, #28]	; (800a334 <vTaskPlaceOnEventList+0x44>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3318      	adds	r3, #24
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7fe fe61 	bl	8008fe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a324:	2101      	movs	r1, #1
 800a326:	6838      	ldr	r0, [r7, #0]
 800a328:	f000 fa80 	bl	800a82c <prvAddCurrentTaskToDelayedList>
}
 800a32c:	bf00      	nop
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	20001030 	.word	0x20001030

0800a338 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	617b      	str	r3, [r7, #20]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a360:	4b0a      	ldr	r3, [pc, #40]	; (800a38c <vTaskPlaceOnEventListRestricted+0x54>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3318      	adds	r3, #24
 800a366:	4619      	mov	r1, r3
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7fe fe18 	bl	8008f9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d002      	beq.n	800a37a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a374:	f04f 33ff 	mov.w	r3, #4294967295
 800a378:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	68b8      	ldr	r0, [r7, #8]
 800a37e:	f000 fa55 	bl	800a82c <prvAddCurrentTaskToDelayedList>
	}
 800a382:	bf00      	nop
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20001030 	.word	0x20001030

0800a390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10a      	bne.n	800a3bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	60fb      	str	r3, [r7, #12]
}
 800a3b8:	bf00      	nop
 800a3ba:	e7fe      	b.n	800a3ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	3318      	adds	r3, #24
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe fe49 	bl	8009058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3c6:	4b1e      	ldr	r3, [pc, #120]	; (800a440 <xTaskRemoveFromEventList+0xb0>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d11d      	bne.n	800a40a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe fe40 	bl	8009058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3dc:	4b19      	ldr	r3, [pc, #100]	; (800a444 <xTaskRemoveFromEventList+0xb4>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d903      	bls.n	800a3ec <xTaskRemoveFromEventList+0x5c>
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	4a16      	ldr	r2, [pc, #88]	; (800a444 <xTaskRemoveFromEventList+0xb4>)
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4a13      	ldr	r2, [pc, #76]	; (800a448 <xTaskRemoveFromEventList+0xb8>)
 800a3fa:	441a      	add	r2, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3304      	adds	r3, #4
 800a400:	4619      	mov	r1, r3
 800a402:	4610      	mov	r0, r2
 800a404:	f7fe fdcb 	bl	8008f9e <vListInsertEnd>
 800a408:	e005      	b.n	800a416 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	3318      	adds	r3, #24
 800a40e:	4619      	mov	r1, r3
 800a410:	480e      	ldr	r0, [pc, #56]	; (800a44c <xTaskRemoveFromEventList+0xbc>)
 800a412:	f7fe fdc4 	bl	8008f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41a:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <xTaskRemoveFromEventList+0xc0>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a420:	429a      	cmp	r2, r3
 800a422:	d905      	bls.n	800a430 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a428:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <xTaskRemoveFromEventList+0xc4>)
 800a42a:	2201      	movs	r2, #1
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e001      	b.n	800a434 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a430:	2300      	movs	r3, #0
 800a432:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a434:	697b      	ldr	r3, [r7, #20]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	2000152c 	.word	0x2000152c
 800a444:	2000150c 	.word	0x2000150c
 800a448:	20001034 	.word	0x20001034
 800a44c:	200014c4 	.word	0x200014c4
 800a450:	20001030 	.word	0x20001030
 800a454:	20001518 	.word	0x20001518

0800a458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a460:	4b06      	ldr	r3, [pc, #24]	; (800a47c <vTaskInternalSetTimeOutState+0x24>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a468:	4b05      	ldr	r3, [pc, #20]	; (800a480 <vTaskInternalSetTimeOutState+0x28>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	605a      	str	r2, [r3, #4]
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	2000151c 	.word	0x2000151c
 800a480:	20001508 	.word	0x20001508

0800a484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	613b      	str	r3, [r7, #16]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	60fb      	str	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a4c6:	f000 fe7d 	bl	800b1c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4ca:	4b1d      	ldr	r3, [pc, #116]	; (800a540 <xTaskCheckForTimeOut+0xbc>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e2:	d102      	bne.n	800a4ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	61fb      	str	r3, [r7, #28]
 800a4e8:	e023      	b.n	800a532 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4b15      	ldr	r3, [pc, #84]	; (800a544 <xTaskCheckForTimeOut+0xc0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d007      	beq.n	800a506 <xTaskCheckForTimeOut+0x82>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d302      	bcc.n	800a506 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	61fb      	str	r3, [r7, #28]
 800a504:	e015      	b.n	800a532 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d20b      	bcs.n	800a528 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	1ad2      	subs	r2, r2, r3
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff ff9b 	bl	800a458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a522:	2300      	movs	r3, #0
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	e004      	b.n	800a532 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2200      	movs	r2, #0
 800a52c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a52e:	2301      	movs	r3, #1
 800a530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a532:	f000 fe77 	bl	800b224 <vPortExitCritical>

	return xReturn;
 800a536:	69fb      	ldr	r3, [r7, #28]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3720      	adds	r7, #32
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20001508 	.word	0x20001508
 800a544:	2000151c 	.word	0x2000151c

0800a548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a548:	b480      	push	{r7}
 800a54a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a54c:	4b03      	ldr	r3, [pc, #12]	; (800a55c <vTaskMissedYield+0x14>)
 800a54e:	2201      	movs	r2, #1
 800a550:	601a      	str	r2, [r3, #0]
}
 800a552:	bf00      	nop
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	20001518 	.word	0x20001518

0800a560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a568:	f000 f852 	bl	800a610 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a56c:	4b06      	ldr	r3, [pc, #24]	; (800a588 <prvIdleTask+0x28>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d9f9      	bls.n	800a568 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a574:	4b05      	ldr	r3, [pc, #20]	; (800a58c <prvIdleTask+0x2c>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a584:	e7f0      	b.n	800a568 <prvIdleTask+0x8>
 800a586:	bf00      	nop
 800a588:	20001034 	.word	0x20001034
 800a58c:	e000ed04 	.word	0xe000ed04

0800a590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a596:	2300      	movs	r3, #0
 800a598:	607b      	str	r3, [r7, #4]
 800a59a:	e00c      	b.n	800a5b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4a12      	ldr	r2, [pc, #72]	; (800a5f0 <prvInitialiseTaskLists+0x60>)
 800a5a8:	4413      	add	r3, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fe fcca 	bl	8008f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b37      	cmp	r3, #55	; 0x37
 800a5ba:	d9ef      	bls.n	800a59c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5bc:	480d      	ldr	r0, [pc, #52]	; (800a5f4 <prvInitialiseTaskLists+0x64>)
 800a5be:	f7fe fcc1 	bl	8008f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5c2:	480d      	ldr	r0, [pc, #52]	; (800a5f8 <prvInitialiseTaskLists+0x68>)
 800a5c4:	f7fe fcbe 	bl	8008f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5c8:	480c      	ldr	r0, [pc, #48]	; (800a5fc <prvInitialiseTaskLists+0x6c>)
 800a5ca:	f7fe fcbb 	bl	8008f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5ce:	480c      	ldr	r0, [pc, #48]	; (800a600 <prvInitialiseTaskLists+0x70>)
 800a5d0:	f7fe fcb8 	bl	8008f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5d4:	480b      	ldr	r0, [pc, #44]	; (800a604 <prvInitialiseTaskLists+0x74>)
 800a5d6:	f7fe fcb5 	bl	8008f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5da:	4b0b      	ldr	r3, [pc, #44]	; (800a608 <prvInitialiseTaskLists+0x78>)
 800a5dc:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <prvInitialiseTaskLists+0x64>)
 800a5de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <prvInitialiseTaskLists+0x7c>)
 800a5e2:	4a05      	ldr	r2, [pc, #20]	; (800a5f8 <prvInitialiseTaskLists+0x68>)
 800a5e4:	601a      	str	r2, [r3, #0]
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20001034 	.word	0x20001034
 800a5f4:	20001494 	.word	0x20001494
 800a5f8:	200014a8 	.word	0x200014a8
 800a5fc:	200014c4 	.word	0x200014c4
 800a600:	200014d8 	.word	0x200014d8
 800a604:	200014f0 	.word	0x200014f0
 800a608:	200014bc 	.word	0x200014bc
 800a60c:	200014c0 	.word	0x200014c0

0800a610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a616:	e019      	b.n	800a64c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a618:	f000 fdd4 	bl	800b1c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61c:	4b10      	ldr	r3, [pc, #64]	; (800a660 <prvCheckTasksWaitingTermination+0x50>)
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3304      	adds	r3, #4
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe fd15 	bl	8009058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a62e:	4b0d      	ldr	r3, [pc, #52]	; (800a664 <prvCheckTasksWaitingTermination+0x54>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	3b01      	subs	r3, #1
 800a634:	4a0b      	ldr	r2, [pc, #44]	; (800a664 <prvCheckTasksWaitingTermination+0x54>)
 800a636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a638:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <prvCheckTasksWaitingTermination+0x58>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	4a0a      	ldr	r2, [pc, #40]	; (800a668 <prvCheckTasksWaitingTermination+0x58>)
 800a640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a642:	f000 fdef 	bl	800b224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 f810 	bl	800a66c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a64c:	4b06      	ldr	r3, [pc, #24]	; (800a668 <prvCheckTasksWaitingTermination+0x58>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e1      	bne.n	800a618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	200014d8 	.word	0x200014d8
 800a664:	20001504 	.word	0x20001504
 800a668:	200014ec 	.word	0x200014ec

0800a66c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	3354      	adds	r3, #84	; 0x54
 800a678:	4618      	mov	r0, r3
 800a67a:	f001 fe45 	bl	800c308 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a684:	2b00      	cmp	r3, #0
 800a686:	d108      	bne.n	800a69a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 ff87 	bl	800b5a0 <vPortFree>
				vPortFree( pxTCB );
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 ff84 	bl	800b5a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a698:	e018      	b.n	800a6cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d103      	bne.n	800a6ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 ff7b 	bl	800b5a0 <vPortFree>
	}
 800a6aa:	e00f      	b.n	800a6cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d00a      	beq.n	800a6cc <prvDeleteTCB+0x60>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	60fb      	str	r3, [r7, #12]
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <prvDeleteTCB+0x5e>
	}
 800a6cc:	bf00      	nop
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6da:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <prvResetNextTaskUnblockTime+0x38>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6e4:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <prvResetNextTaskUnblockTime+0x3c>)
 800a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6ec:	e008      	b.n	800a700 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ee:	4b07      	ldr	r3, [pc, #28]	; (800a70c <prvResetNextTaskUnblockTime+0x38>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	4a04      	ldr	r2, [pc, #16]	; (800a710 <prvResetNextTaskUnblockTime+0x3c>)
 800a6fe:	6013      	str	r3, [r2, #0]
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	200014bc 	.word	0x200014bc
 800a710:	20001524 	.word	0x20001524

0800a714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a71a:	4b0b      	ldr	r3, [pc, #44]	; (800a748 <xTaskGetSchedulerState+0x34>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a722:	2301      	movs	r3, #1
 800a724:	607b      	str	r3, [r7, #4]
 800a726:	e008      	b.n	800a73a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a728:	4b08      	ldr	r3, [pc, #32]	; (800a74c <xTaskGetSchedulerState+0x38>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a730:	2302      	movs	r3, #2
 800a732:	607b      	str	r3, [r7, #4]
 800a734:	e001      	b.n	800a73a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a736:	2300      	movs	r3, #0
 800a738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a73a:	687b      	ldr	r3, [r7, #4]
	}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	20001510 	.word	0x20001510
 800a74c:	2000152c 	.word	0x2000152c

0800a750 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d056      	beq.n	800a814 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a766:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <xTaskPriorityDisinherit+0xd0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d00a      	beq.n	800a786 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a774:	f383 8811 	msr	BASEPRI, r3
 800a778:	f3bf 8f6f 	isb	sy
 800a77c:	f3bf 8f4f 	dsb	sy
 800a780:	60fb      	str	r3, [r7, #12]
}
 800a782:	bf00      	nop
 800a784:	e7fe      	b.n	800a784 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10a      	bne.n	800a7a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	60bb      	str	r3, [r7, #8]
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a8:	1e5a      	subs	r2, r3, #1
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d02c      	beq.n	800a814 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d128      	bne.n	800a814 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fc46 	bl	8009058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e4:	4b0f      	ldr	r3, [pc, #60]	; (800a824 <xTaskPriorityDisinherit+0xd4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d903      	bls.n	800a7f4 <xTaskPriorityDisinherit+0xa4>
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	4a0c      	ldr	r2, [pc, #48]	; (800a824 <xTaskPriorityDisinherit+0xd4>)
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4a09      	ldr	r2, [pc, #36]	; (800a828 <xTaskPriorityDisinherit+0xd8>)
 800a802:	441a      	add	r2, r3
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	3304      	adds	r3, #4
 800a808:	4619      	mov	r1, r3
 800a80a:	4610      	mov	r0, r2
 800a80c:	f7fe fbc7 	bl	8008f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a810:	2301      	movs	r3, #1
 800a812:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a814:	697b      	ldr	r3, [r7, #20]
	}
 800a816:	4618      	mov	r0, r3
 800a818:	3718      	adds	r7, #24
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	20001030 	.word	0x20001030
 800a824:	2000150c 	.word	0x2000150c
 800a828:	20001034 	.word	0x20001034

0800a82c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a836:	4b21      	ldr	r3, [pc, #132]	; (800a8bc <prvAddCurrentTaskToDelayedList+0x90>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a83c:	4b20      	ldr	r3, [pc, #128]	; (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3304      	adds	r3, #4
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe fc08 	bl	8009058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84e:	d10a      	bne.n	800a866 <prvAddCurrentTaskToDelayedList+0x3a>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d007      	beq.n	800a866 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a856:	4b1a      	ldr	r3, [pc, #104]	; (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	4819      	ldr	r0, [pc, #100]	; (800a8c4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a860:	f7fe fb9d 	bl	8008f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a864:	e026      	b.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4413      	add	r3, r2
 800a86c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a86e:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d209      	bcs.n	800a892 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a87e:	4b12      	ldr	r3, [pc, #72]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3304      	adds	r3, #4
 800a888:	4619      	mov	r1, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	f7fe fbab 	bl	8008fe6 <vListInsert>
}
 800a890:	e010      	b.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a892:	4b0e      	ldr	r3, [pc, #56]	; (800a8cc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3304      	adds	r3, #4
 800a89c:	4619      	mov	r1, r3
 800a89e:	4610      	mov	r0, r2
 800a8a0:	f7fe fba1 	bl	8008fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d202      	bcs.n	800a8b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8ae:	4a08      	ldr	r2, [pc, #32]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	6013      	str	r3, [r2, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20001508 	.word	0x20001508
 800a8c0:	20001030 	.word	0x20001030
 800a8c4:	200014f0 	.word	0x200014f0
 800a8c8:	200014c0 	.word	0x200014c0
 800a8cc:	200014bc 	.word	0x200014bc
 800a8d0:	20001524 	.word	0x20001524

0800a8d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08a      	sub	sp, #40	; 0x28
 800a8d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8de:	f000 fb07 	bl	800aef0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <xTimerCreateTimerTask+0x80>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d021      	beq.n	800a92e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8f2:	1d3a      	adds	r2, r7, #4
 800a8f4:	f107 0108 	add.w	r1, r7, #8
 800a8f8:	f107 030c 	add.w	r3, r7, #12
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe fb07 	bl	8008f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a902:	6879      	ldr	r1, [r7, #4]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	9202      	str	r2, [sp, #8]
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	2302      	movs	r3, #2
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	2300      	movs	r3, #0
 800a912:	460a      	mov	r2, r1
 800a914:	4910      	ldr	r1, [pc, #64]	; (800a958 <xTimerCreateTimerTask+0x84>)
 800a916:	4811      	ldr	r0, [pc, #68]	; (800a95c <xTimerCreateTimerTask+0x88>)
 800a918:	f7ff f8b4 	bl	8009a84 <xTaskCreateStatic>
 800a91c:	4603      	mov	r3, r0
 800a91e:	4a10      	ldr	r2, [pc, #64]	; (800a960 <xTimerCreateTimerTask+0x8c>)
 800a920:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a922:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <xTimerCreateTimerTask+0x8c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a92a:	2301      	movs	r3, #1
 800a92c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	613b      	str	r3, [r7, #16]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a94a:	697b      	ldr	r3, [r7, #20]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20001560 	.word	0x20001560
 800a958:	0800e630 	.word	0x0800e630
 800a95c:	0800aa99 	.word	0x0800aa99
 800a960:	20001564 	.word	0x20001564

0800a964 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b08a      	sub	sp, #40	; 0x28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a972:	2300      	movs	r3, #0
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10a      	bne.n	800a992 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	623b      	str	r3, [r7, #32]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a992:	4b1a      	ldr	r3, [pc, #104]	; (800a9fc <xTimerGenericCommand+0x98>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d02a      	beq.n	800a9f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b05      	cmp	r3, #5
 800a9aa:	dc18      	bgt.n	800a9de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9ac:	f7ff feb2 	bl	800a714 <xTaskGetSchedulerState>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d109      	bne.n	800a9ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9b6:	4b11      	ldr	r3, [pc, #68]	; (800a9fc <xTimerGenericCommand+0x98>)
 800a9b8:	6818      	ldr	r0, [r3, #0]
 800a9ba:	f107 0110 	add.w	r1, r7, #16
 800a9be:	2300      	movs	r3, #0
 800a9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c2:	f7fe fc77 	bl	80092b4 <xQueueGenericSend>
 800a9c6:	6278      	str	r0, [r7, #36]	; 0x24
 800a9c8:	e012      	b.n	800a9f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9ca:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <xTimerGenericCommand+0x98>)
 800a9cc:	6818      	ldr	r0, [r3, #0]
 800a9ce:	f107 0110 	add.w	r1, r7, #16
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f7fe fc6d 	bl	80092b4 <xQueueGenericSend>
 800a9da:	6278      	str	r0, [r7, #36]	; 0x24
 800a9dc:	e008      	b.n	800a9f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9de:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <xTimerGenericCommand+0x98>)
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f107 0110 	add.w	r1, r7, #16
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	f7fe fd61 	bl	80094b0 <xQueueGenericSendFromISR>
 800a9ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3728      	adds	r7, #40	; 0x28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20001560 	.word	0x20001560

0800aa00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af02      	add	r7, sp, #8
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa0a:	4b22      	ldr	r3, [pc, #136]	; (800aa94 <prvProcessExpiredTimer+0x94>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe fb1d 	bl	8009058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d022      	beq.n	800aa72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	699a      	ldr	r2, [r3, #24]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	18d1      	adds	r1, r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	6978      	ldr	r0, [r7, #20]
 800aa3a:	f000 f8d1 	bl	800abe0 <prvInsertTimerInActiveList>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d01f      	beq.n	800aa84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa44:	2300      	movs	r3, #0
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6978      	ldr	r0, [r7, #20]
 800aa50:	f7ff ff88 	bl	800a964 <xTimerGenericCommand>
 800aa54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d113      	bne.n	800aa84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	60fb      	str	r3, [r7, #12]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa78:	f023 0301 	bic.w	r3, r3, #1
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	6978      	ldr	r0, [r7, #20]
 800aa8a:	4798      	blx	r3
}
 800aa8c:	bf00      	nop
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20001558 	.word	0x20001558

0800aa98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaa0:	f107 0308 	add.w	r3, r7, #8
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 f857 	bl	800ab58 <prvGetNextExpireTime>
 800aaaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	4619      	mov	r1, r3
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 f803 	bl	800aabc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aab6:	f000 f8d5 	bl	800ac64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaba:	e7f1      	b.n	800aaa0 <prvTimerTask+0x8>

0800aabc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aac6:	f7ff fa39 	bl	8009f3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aaca:	f107 0308 	add.w	r3, r7, #8
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f866 	bl	800aba0 <prvSampleTimeNow>
 800aad4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d130      	bne.n	800ab3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10a      	bne.n	800aaf8 <prvProcessTimerOrBlockTask+0x3c>
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d806      	bhi.n	800aaf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aaea:	f7ff fa35 	bl	8009f58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7ff ff85 	bl	800aa00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aaf6:	e024      	b.n	800ab42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d008      	beq.n	800ab10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aafe:	4b13      	ldr	r3, [pc, #76]	; (800ab4c <prvProcessTimerOrBlockTask+0x90>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <prvProcessTimerOrBlockTask+0x50>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e000      	b.n	800ab0e <prvProcessTimerOrBlockTask+0x52>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab10:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <prvProcessTimerOrBlockTask+0x94>)
 800ab12:	6818      	ldr	r0, [r3, #0]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f7fe ff7d 	bl	8009a1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab22:	f7ff fa19 	bl	8009f58 <xTaskResumeAll>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab2c:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <prvProcessTimerOrBlockTask+0x98>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
}
 800ab3c:	e001      	b.n	800ab42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab3e:	f7ff fa0b 	bl	8009f58 <xTaskResumeAll>
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	2000155c 	.word	0x2000155c
 800ab50:	20001560 	.word	0x20001560
 800ab54:	e000ed04 	.word	0xe000ed04

0800ab58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab60:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <prvGetNextExpireTime+0x44>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <prvGetNextExpireTime+0x16>
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	e000      	b.n	800ab70 <prvGetNextExpireTime+0x18>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d105      	bne.n	800ab88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab7c:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <prvGetNextExpireTime+0x44>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60fb      	str	r3, [r7, #12]
 800ab86:	e001      	b.n	800ab8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	20001558 	.word	0x20001558

0800aba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aba8:	f7ff fa74 	bl	800a094 <xTaskGetTickCount>
 800abac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abae:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <prvSampleTimeNow+0x3c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d205      	bcs.n	800abc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abb8:	f000 f936 	bl	800ae28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	e002      	b.n	800abca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800abca:	4a04      	ldr	r2, [pc, #16]	; (800abdc <prvSampleTimeNow+0x3c>)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800abd0:	68fb      	ldr	r3, [r7, #12]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20001568 	.word	0x20001568

0800abe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
 800abec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d812      	bhi.n	800ac2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	1ad2      	subs	r2, r2, r3
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d302      	bcc.n	800ac1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac14:	2301      	movs	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
 800ac18:	e01b      	b.n	800ac52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac1a:	4b10      	ldr	r3, [pc, #64]	; (800ac5c <prvInsertTimerInActiveList+0x7c>)
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3304      	adds	r3, #4
 800ac22:	4619      	mov	r1, r3
 800ac24:	4610      	mov	r0, r2
 800ac26:	f7fe f9de 	bl	8008fe6 <vListInsert>
 800ac2a:	e012      	b.n	800ac52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d206      	bcs.n	800ac42 <prvInsertTimerInActiveList+0x62>
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d302      	bcc.n	800ac42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
 800ac40:	e007      	b.n	800ac52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac42:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <prvInsertTimerInActiveList+0x80>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3304      	adds	r3, #4
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f7fe f9ca 	bl	8008fe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac52:	697b      	ldr	r3, [r7, #20]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	2000155c 	.word	0x2000155c
 800ac60:	20001558 	.word	0x20001558

0800ac64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08e      	sub	sp, #56	; 0x38
 800ac68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac6a:	e0ca      	b.n	800ae02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	da18      	bge.n	800aca4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac72:	1d3b      	adds	r3, r7, #4
 800ac74:	3304      	adds	r3, #4
 800ac76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10a      	bne.n	800ac94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	61fb      	str	r3, [r7, #28]
}
 800ac90:	bf00      	nop
 800ac92:	e7fe      	b.n	800ac92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac9a:	6850      	ldr	r0, [r2, #4]
 800ac9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac9e:	6892      	ldr	r2, [r2, #8]
 800aca0:	4611      	mov	r1, r2
 800aca2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f2c0 80ab 	blt.w	800ae02 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	3304      	adds	r3, #4
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe f9cb 	bl	8009058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acc2:	463b      	mov	r3, r7
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff ff6b 	bl	800aba0 <prvSampleTimeNow>
 800acca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b09      	cmp	r3, #9
 800acd0:	f200 8096 	bhi.w	800ae00 <prvProcessReceivedCommands+0x19c>
 800acd4:	a201      	add	r2, pc, #4	; (adr r2, 800acdc <prvProcessReceivedCommands+0x78>)
 800acd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acda:	bf00      	nop
 800acdc:	0800ad05 	.word	0x0800ad05
 800ace0:	0800ad05 	.word	0x0800ad05
 800ace4:	0800ad05 	.word	0x0800ad05
 800ace8:	0800ad79 	.word	0x0800ad79
 800acec:	0800ad8d 	.word	0x0800ad8d
 800acf0:	0800add7 	.word	0x0800add7
 800acf4:	0800ad05 	.word	0x0800ad05
 800acf8:	0800ad05 	.word	0x0800ad05
 800acfc:	0800ad79 	.word	0x0800ad79
 800ad00:	0800ad8d 	.word	0x0800ad8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	18d1      	adds	r1, r2, r3
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad24:	f7ff ff5c 	bl	800abe0 <prvInsertTimerInActiveList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d069      	beq.n	800ae02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad3c:	f003 0304 	and.w	r3, r3, #4
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d05e      	beq.n	800ae02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	441a      	add	r2, r3
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9300      	str	r3, [sp, #0]
 800ad50:	2300      	movs	r3, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad56:	f7ff fe05 	bl	800a964 <xTimerGenericCommand>
 800ad5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d14f      	bne.n	800ae02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	61bb      	str	r3, [r7, #24]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad7e:	f023 0301 	bic.w	r3, r3, #1
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ad8a:	e03a      	b.n	800ae02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad92:	f043 0301 	orr.w	r3, r3, #1
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	617b      	str	r3, [r7, #20]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	699a      	ldr	r2, [r3, #24]
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	18d1      	adds	r1, r2, r3
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add0:	f7ff ff06 	bl	800abe0 <prvInsertTimerInActiveList>
					break;
 800add4:	e015      	b.n	800ae02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ade4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ade6:	f000 fbdb 	bl	800b5a0 <vPortFree>
 800adea:	e00a      	b.n	800ae02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adf2:	f023 0301 	bic.w	r3, r3, #1
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adfe:	e000      	b.n	800ae02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ae00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae02:	4b08      	ldr	r3, [pc, #32]	; (800ae24 <prvProcessReceivedCommands+0x1c0>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	1d39      	adds	r1, r7, #4
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fbec 	bl	80095e8 <xQueueReceive>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f47f af2a 	bne.w	800ac6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	3730      	adds	r7, #48	; 0x30
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	20001560 	.word	0x20001560

0800ae28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae2e:	e048      	b.n	800aec2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae30:	4b2d      	ldr	r3, [pc, #180]	; (800aee8 <prvSwitchTimerLists+0xc0>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae3a:	4b2b      	ldr	r3, [pc, #172]	; (800aee8 <prvSwitchTimerLists+0xc0>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3304      	adds	r3, #4
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fe f905 	bl	8009058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae5c:	f003 0304 	and.w	r3, r3, #4
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d02e      	beq.n	800aec2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae6e:	68ba      	ldr	r2, [r7, #8]
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d90e      	bls.n	800ae94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae82:	4b19      	ldr	r3, [pc, #100]	; (800aee8 <prvSwitchTimerLists+0xc0>)
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	f7fe f8aa 	bl	8008fe6 <vListInsert>
 800ae92:	e016      	b.n	800aec2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae94:	2300      	movs	r3, #0
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fd60 	bl	800a964 <xTimerGenericCommand>
 800aea4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	603b      	str	r3, [r7, #0]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aec2:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <prvSwitchTimerLists+0xc0>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1b1      	bne.n	800ae30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <prvSwitchTimerLists+0xc0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aed2:	4b06      	ldr	r3, [pc, #24]	; (800aeec <prvSwitchTimerLists+0xc4>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a04      	ldr	r2, [pc, #16]	; (800aee8 <prvSwitchTimerLists+0xc0>)
 800aed8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aeda:	4a04      	ldr	r2, [pc, #16]	; (800aeec <prvSwitchTimerLists+0xc4>)
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	6013      	str	r3, [r2, #0]
}
 800aee0:	bf00      	nop
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20001558 	.word	0x20001558
 800aeec:	2000155c 	.word	0x2000155c

0800aef0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aef6:	f000 f965 	bl	800b1c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aefa:	4b15      	ldr	r3, [pc, #84]	; (800af50 <prvCheckForValidListAndQueue+0x60>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d120      	bne.n	800af44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af02:	4814      	ldr	r0, [pc, #80]	; (800af54 <prvCheckForValidListAndQueue+0x64>)
 800af04:	f7fe f81e 	bl	8008f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af08:	4813      	ldr	r0, [pc, #76]	; (800af58 <prvCheckForValidListAndQueue+0x68>)
 800af0a:	f7fe f81b 	bl	8008f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af0e:	4b13      	ldr	r3, [pc, #76]	; (800af5c <prvCheckForValidListAndQueue+0x6c>)
 800af10:	4a10      	ldr	r2, [pc, #64]	; (800af54 <prvCheckForValidListAndQueue+0x64>)
 800af12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af14:	4b12      	ldr	r3, [pc, #72]	; (800af60 <prvCheckForValidListAndQueue+0x70>)
 800af16:	4a10      	ldr	r2, [pc, #64]	; (800af58 <prvCheckForValidListAndQueue+0x68>)
 800af18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af1a:	2300      	movs	r3, #0
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <prvCheckForValidListAndQueue+0x74>)
 800af20:	4a11      	ldr	r2, [pc, #68]	; (800af68 <prvCheckForValidListAndQueue+0x78>)
 800af22:	2110      	movs	r1, #16
 800af24:	200a      	movs	r0, #10
 800af26:	f7fe f929 	bl	800917c <xQueueGenericCreateStatic>
 800af2a:	4603      	mov	r3, r0
 800af2c:	4a08      	ldr	r2, [pc, #32]	; (800af50 <prvCheckForValidListAndQueue+0x60>)
 800af2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af30:	4b07      	ldr	r3, [pc, #28]	; (800af50 <prvCheckForValidListAndQueue+0x60>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d005      	beq.n	800af44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af38:	4b05      	ldr	r3, [pc, #20]	; (800af50 <prvCheckForValidListAndQueue+0x60>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	490b      	ldr	r1, [pc, #44]	; (800af6c <prvCheckForValidListAndQueue+0x7c>)
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe fd42 	bl	80099c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af44:	f000 f96e 	bl	800b224 <vPortExitCritical>
}
 800af48:	bf00      	nop
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	20001560 	.word	0x20001560
 800af54:	20001530 	.word	0x20001530
 800af58:	20001544 	.word	0x20001544
 800af5c:	20001558 	.word	0x20001558
 800af60:	2000155c 	.word	0x2000155c
 800af64:	2000160c 	.word	0x2000160c
 800af68:	2000156c 	.word	0x2000156c
 800af6c:	0800e638 	.word	0x0800e638

0800af70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3b04      	subs	r3, #4
 800af80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3b04      	subs	r3, #4
 800af8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	f023 0201 	bic.w	r2, r3, #1
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3b04      	subs	r3, #4
 800af9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afa0:	4a0c      	ldr	r2, [pc, #48]	; (800afd4 <pxPortInitialiseStack+0x64>)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3b14      	subs	r3, #20
 800afaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3b04      	subs	r3, #4
 800afb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f06f 0202 	mvn.w	r2, #2
 800afbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3b20      	subs	r3, #32
 800afc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afc6:	68fb      	ldr	r3, [r7, #12]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	0800afd9 	.word	0x0800afd9

0800afd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afe2:	4b12      	ldr	r3, [pc, #72]	; (800b02c <prvTaskExitError+0x54>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afea:	d00a      	beq.n	800b002 <prvTaskExitError+0x2a>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	60fb      	str	r3, [r7, #12]
}
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <prvTaskExitError+0x28>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	60bb      	str	r3, [r7, #8]
}
 800b014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b016:	bf00      	nop
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d0fc      	beq.n	800b018 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b01e:	bf00      	nop
 800b020:	bf00      	nop
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	20000010 	.word	0x20000010

0800b030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <pxCurrentTCBConst2>)
 800b032:	6819      	ldr	r1, [r3, #0]
 800b034:	6808      	ldr	r0, [r1, #0]
 800b036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03a:	f380 8809 	msr	PSP, r0
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f04f 0000 	mov.w	r0, #0
 800b046:	f380 8811 	msr	BASEPRI, r0
 800b04a:	4770      	bx	lr
 800b04c:	f3af 8000 	nop.w

0800b050 <pxCurrentTCBConst2>:
 800b050:	20001030 	.word	0x20001030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop

0800b058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b058:	4808      	ldr	r0, [pc, #32]	; (800b07c <prvPortStartFirstTask+0x24>)
 800b05a:	6800      	ldr	r0, [r0, #0]
 800b05c:	6800      	ldr	r0, [r0, #0]
 800b05e:	f380 8808 	msr	MSP, r0
 800b062:	f04f 0000 	mov.w	r0, #0
 800b066:	f380 8814 	msr	CONTROL, r0
 800b06a:	b662      	cpsie	i
 800b06c:	b661      	cpsie	f
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	df00      	svc	0
 800b078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b07a:	bf00      	nop
 800b07c:	e000ed08 	.word	0xe000ed08

0800b080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b086:	4b46      	ldr	r3, [pc, #280]	; (800b1a0 <xPortStartScheduler+0x120>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a46      	ldr	r2, [pc, #280]	; (800b1a4 <xPortStartScheduler+0x124>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d10a      	bne.n	800b0a6 <xPortStartScheduler+0x26>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	613b      	str	r3, [r7, #16]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b0a6:	4b3e      	ldr	r3, [pc, #248]	; (800b1a0 <xPortStartScheduler+0x120>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a3f      	ldr	r2, [pc, #252]	; (800b1a8 <xPortStartScheduler+0x128>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d10a      	bne.n	800b0c6 <xPortStartScheduler+0x46>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60fb      	str	r3, [r7, #12]
}
 800b0c2:	bf00      	nop
 800b0c4:	e7fe      	b.n	800b0c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0c6:	4b39      	ldr	r3, [pc, #228]	; (800b1ac <xPortStartScheduler+0x12c>)
 800b0c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	22ff      	movs	r2, #255	; 0xff
 800b0d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0e0:	78fb      	ldrb	r3, [r7, #3]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	4b31      	ldr	r3, [pc, #196]	; (800b1b0 <xPortStartScheduler+0x130>)
 800b0ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0ee:	4b31      	ldr	r3, [pc, #196]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b0f0:	2207      	movs	r2, #7
 800b0f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0f4:	e009      	b.n	800b10a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b0f6:	4b2f      	ldr	r3, [pc, #188]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	4a2d      	ldr	r2, [pc, #180]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b0fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b100:	78fb      	ldrb	r3, [r7, #3]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	b2db      	uxtb	r3, r3
 800b108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b10a:	78fb      	ldrb	r3, [r7, #3]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b112:	2b80      	cmp	r3, #128	; 0x80
 800b114:	d0ef      	beq.n	800b0f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b116:	4b27      	ldr	r3, [pc, #156]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f1c3 0307 	rsb	r3, r3, #7
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d00a      	beq.n	800b138 <xPortStartScheduler+0xb8>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	60bb      	str	r3, [r7, #8]
}
 800b134:	bf00      	nop
 800b136:	e7fe      	b.n	800b136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b138:	4b1e      	ldr	r3, [pc, #120]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	021b      	lsls	r3, r3, #8
 800b13e:	4a1d      	ldr	r2, [pc, #116]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b142:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b14a:	4a1a      	ldr	r2, [pc, #104]	; (800b1b4 <xPortStartScheduler+0x134>)
 800b14c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	b2da      	uxtb	r2, r3
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b156:	4b18      	ldr	r3, [pc, #96]	; (800b1b8 <xPortStartScheduler+0x138>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a17      	ldr	r2, [pc, #92]	; (800b1b8 <xPortStartScheduler+0x138>)
 800b15c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b162:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <xPortStartScheduler+0x138>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a14      	ldr	r2, [pc, #80]	; (800b1b8 <xPortStartScheduler+0x138>)
 800b168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b16c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b16e:	f000 f8dd 	bl	800b32c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b172:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <xPortStartScheduler+0x13c>)
 800b174:	2200      	movs	r2, #0
 800b176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b178:	f000 f8fc 	bl	800b374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b17c:	4b10      	ldr	r3, [pc, #64]	; (800b1c0 <xPortStartScheduler+0x140>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a0f      	ldr	r2, [pc, #60]	; (800b1c0 <xPortStartScheduler+0x140>)
 800b182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b188:	f7ff ff66 	bl	800b058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b18c:	f7ff f84c 	bl	800a228 <vTaskSwitchContext>
	prvTaskExitError();
 800b190:	f7ff ff22 	bl	800afd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	e000ed00 	.word	0xe000ed00
 800b1a4:	410fc271 	.word	0x410fc271
 800b1a8:	410fc270 	.word	0x410fc270
 800b1ac:	e000e400 	.word	0xe000e400
 800b1b0:	2000165c 	.word	0x2000165c
 800b1b4:	20001660 	.word	0x20001660
 800b1b8:	e000ed20 	.word	0xe000ed20
 800b1bc:	20000010 	.word	0x20000010
 800b1c0:	e000ef34 	.word	0xe000ef34

0800b1c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	607b      	str	r3, [r7, #4]
}
 800b1dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1de:	4b0f      	ldr	r3, [pc, #60]	; (800b21c <vPortEnterCritical+0x58>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	4a0d      	ldr	r2, [pc, #52]	; (800b21c <vPortEnterCritical+0x58>)
 800b1e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1e8:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <vPortEnterCritical+0x58>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d10f      	bne.n	800b210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1f0:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <vPortEnterCritical+0x5c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <vPortEnterCritical+0x4c>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	603b      	str	r3, [r7, #0]
}
 800b20c:	bf00      	nop
 800b20e:	e7fe      	b.n	800b20e <vPortEnterCritical+0x4a>
	}
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	20000010 	.word	0x20000010
 800b220:	e000ed04 	.word	0xe000ed04

0800b224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b22a:	4b12      	ldr	r3, [pc, #72]	; (800b274 <vPortExitCritical+0x50>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10a      	bne.n	800b248 <vPortExitCritical+0x24>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	f383 8811 	msr	BASEPRI, r3
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	607b      	str	r3, [r7, #4]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b248:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <vPortExitCritical+0x50>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	4a09      	ldr	r2, [pc, #36]	; (800b274 <vPortExitCritical+0x50>)
 800b250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b252:	4b08      	ldr	r3, [pc, #32]	; (800b274 <vPortExitCritical+0x50>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d105      	bne.n	800b266 <vPortExitCritical+0x42>
 800b25a:	2300      	movs	r3, #0
 800b25c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	f383 8811 	msr	BASEPRI, r3
}
 800b264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b266:	bf00      	nop
 800b268:	370c      	adds	r7, #12
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20000010 	.word	0x20000010
	...

0800b280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b280:	f3ef 8009 	mrs	r0, PSP
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	4b15      	ldr	r3, [pc, #84]	; (800b2e0 <pxCurrentTCBConst>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	f01e 0f10 	tst.w	lr, #16
 800b290:	bf08      	it	eq
 800b292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29a:	6010      	str	r0, [r2, #0]
 800b29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b2a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b2a4:	f380 8811 	msr	BASEPRI, r0
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f7fe ffba 	bl	800a228 <vTaskSwitchContext>
 800b2b4:	f04f 0000 	mov.w	r0, #0
 800b2b8:	f380 8811 	msr	BASEPRI, r0
 800b2bc:	bc09      	pop	{r0, r3}
 800b2be:	6819      	ldr	r1, [r3, #0]
 800b2c0:	6808      	ldr	r0, [r1, #0]
 800b2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c6:	f01e 0f10 	tst.w	lr, #16
 800b2ca:	bf08      	it	eq
 800b2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2d0:	f380 8809 	msr	PSP, r0
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	f3af 8000 	nop.w

0800b2e0 <pxCurrentTCBConst>:
 800b2e0:	20001030 	.word	0x20001030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2e4:	bf00      	nop
 800b2e6:	bf00      	nop

0800b2e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	607b      	str	r3, [r7, #4]
}
 800b300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b302:	f7fe fed7 	bl	800a0b4 <xTaskIncrementTick>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b30c:	4b06      	ldr	r3, [pc, #24]	; (800b328 <xPortSysTickHandler+0x40>)
 800b30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	2300      	movs	r3, #0
 800b316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	f383 8811 	msr	BASEPRI, r3
}
 800b31e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	e000ed04 	.word	0xe000ed04

0800b32c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b32c:	b480      	push	{r7}
 800b32e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <vPortSetupTimerInterrupt+0x34>)
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b336:	4b0b      	ldr	r3, [pc, #44]	; (800b364 <vPortSetupTimerInterrupt+0x38>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b33c:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <vPortSetupTimerInterrupt+0x3c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a0a      	ldr	r2, [pc, #40]	; (800b36c <vPortSetupTimerInterrupt+0x40>)
 800b342:	fba2 2303 	umull	r2, r3, r2, r3
 800b346:	099b      	lsrs	r3, r3, #6
 800b348:	4a09      	ldr	r2, [pc, #36]	; (800b370 <vPortSetupTimerInterrupt+0x44>)
 800b34a:	3b01      	subs	r3, #1
 800b34c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b34e:	4b04      	ldr	r3, [pc, #16]	; (800b360 <vPortSetupTimerInterrupt+0x34>)
 800b350:	2207      	movs	r2, #7
 800b352:	601a      	str	r2, [r3, #0]
}
 800b354:	bf00      	nop
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	e000e010 	.word	0xe000e010
 800b364:	e000e018 	.word	0xe000e018
 800b368:	20000004 	.word	0x20000004
 800b36c:	10624dd3 	.word	0x10624dd3
 800b370:	e000e014 	.word	0xe000e014

0800b374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b384 <vPortEnableVFP+0x10>
 800b378:	6801      	ldr	r1, [r0, #0]
 800b37a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b37e:	6001      	str	r1, [r0, #0]
 800b380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b382:	bf00      	nop
 800b384:	e000ed88 	.word	0xe000ed88

0800b388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b38e:	f3ef 8305 	mrs	r3, IPSR
 800b392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b0f      	cmp	r3, #15
 800b398:	d914      	bls.n	800b3c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b39a:	4a17      	ldr	r2, [pc, #92]	; (800b3f8 <vPortValidateInterruptPriority+0x70>)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3a4:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <vPortValidateInterruptPriority+0x74>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	7afa      	ldrb	r2, [r7, #11]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d20a      	bcs.n	800b3c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	607b      	str	r3, [r7, #4]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3c4:	4b0e      	ldr	r3, [pc, #56]	; (800b400 <vPortValidateInterruptPriority+0x78>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3cc:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <vPortValidateInterruptPriority+0x7c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d90a      	bls.n	800b3ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	603b      	str	r3, [r7, #0]
}
 800b3e6:	bf00      	nop
 800b3e8:	e7fe      	b.n	800b3e8 <vPortValidateInterruptPriority+0x60>
	}
 800b3ea:	bf00      	nop
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	e000e3f0 	.word	0xe000e3f0
 800b3fc:	2000165c 	.word	0x2000165c
 800b400:	e000ed0c 	.word	0xe000ed0c
 800b404:	20001660 	.word	0x20001660

0800b408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08a      	sub	sp, #40	; 0x28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b410:	2300      	movs	r3, #0
 800b412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b414:	f7fe fd92 	bl	8009f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b418:	4b5b      	ldr	r3, [pc, #364]	; (800b588 <pvPortMalloc+0x180>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d101      	bne.n	800b424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b420:	f000 f920 	bl	800b664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b424:	4b59      	ldr	r3, [pc, #356]	; (800b58c <pvPortMalloc+0x184>)
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4013      	ands	r3, r2
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f040 8093 	bne.w	800b558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d01d      	beq.n	800b474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b438:	2208      	movs	r2, #8
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4413      	add	r3, r2
 800b43e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f003 0307 	and.w	r3, r3, #7
 800b446:	2b00      	cmp	r3, #0
 800b448:	d014      	beq.n	800b474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f023 0307 	bic.w	r3, r3, #7
 800b450:	3308      	adds	r3, #8
 800b452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <pvPortMalloc+0x6c>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	617b      	str	r3, [r7, #20]
}
 800b470:	bf00      	nop
 800b472:	e7fe      	b.n	800b472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d06e      	beq.n	800b558 <pvPortMalloc+0x150>
 800b47a:	4b45      	ldr	r3, [pc, #276]	; (800b590 <pvPortMalloc+0x188>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	429a      	cmp	r2, r3
 800b482:	d869      	bhi.n	800b558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b484:	4b43      	ldr	r3, [pc, #268]	; (800b594 <pvPortMalloc+0x18c>)
 800b486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b488:	4b42      	ldr	r3, [pc, #264]	; (800b594 <pvPortMalloc+0x18c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b48e:	e004      	b.n	800b49a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d903      	bls.n	800b4ac <pvPortMalloc+0xa4>
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1f1      	bne.n	800b490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4ac:	4b36      	ldr	r3, [pc, #216]	; (800b588 <pvPortMalloc+0x180>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d050      	beq.n	800b558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	4413      	add	r3, r2
 800b4be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	6a3b      	ldr	r3, [r7, #32]
 800b4c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	1ad2      	subs	r2, r2, r3
 800b4d0:	2308      	movs	r3, #8
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d91f      	bls.n	800b518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4413      	add	r3, r2
 800b4de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	f003 0307 	and.w	r3, r3, #7
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <pvPortMalloc+0xf8>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	613b      	str	r3, [r7, #16]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	685a      	ldr	r2, [r3, #4]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	1ad2      	subs	r2, r2, r3
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b512:	69b8      	ldr	r0, [r7, #24]
 800b514:	f000 f908 	bl	800b728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b518:	4b1d      	ldr	r3, [pc, #116]	; (800b590 <pvPortMalloc+0x188>)
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	4a1b      	ldr	r2, [pc, #108]	; (800b590 <pvPortMalloc+0x188>)
 800b524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b526:	4b1a      	ldr	r3, [pc, #104]	; (800b590 <pvPortMalloc+0x188>)
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	4b1b      	ldr	r3, [pc, #108]	; (800b598 <pvPortMalloc+0x190>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d203      	bcs.n	800b53a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b532:	4b17      	ldr	r3, [pc, #92]	; (800b590 <pvPortMalloc+0x188>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a18      	ldr	r2, [pc, #96]	; (800b598 <pvPortMalloc+0x190>)
 800b538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	4b13      	ldr	r3, [pc, #76]	; (800b58c <pvPortMalloc+0x184>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	431a      	orrs	r2, r3
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b54e:	4b13      	ldr	r3, [pc, #76]	; (800b59c <pvPortMalloc+0x194>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3301      	adds	r3, #1
 800b554:	4a11      	ldr	r2, [pc, #68]	; (800b59c <pvPortMalloc+0x194>)
 800b556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b558:	f7fe fcfe 	bl	8009f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	f003 0307 	and.w	r3, r3, #7
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <pvPortMalloc+0x174>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	60fb      	str	r3, [r7, #12]
}
 800b578:	bf00      	nop
 800b57a:	e7fe      	b.n	800b57a <pvPortMalloc+0x172>
	return pvReturn;
 800b57c:	69fb      	ldr	r3, [r7, #28]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3728      	adds	r7, #40	; 0x28
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	2000526c 	.word	0x2000526c
 800b58c:	20005280 	.word	0x20005280
 800b590:	20005270 	.word	0x20005270
 800b594:	20005264 	.word	0x20005264
 800b598:	20005274 	.word	0x20005274
 800b59c:	20005278 	.word	0x20005278

0800b5a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d04d      	beq.n	800b64e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5b2:	2308      	movs	r3, #8
 800b5b4:	425b      	negs	r3, r3
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	4b24      	ldr	r3, [pc, #144]	; (800b658 <vPortFree+0xb8>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10a      	bne.n	800b5e4 <vPortFree+0x44>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	60fb      	str	r3, [r7, #12]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00a      	beq.n	800b602 <vPortFree+0x62>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	60bb      	str	r3, [r7, #8]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	4b14      	ldr	r3, [pc, #80]	; (800b658 <vPortFree+0xb8>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4013      	ands	r3, r2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d01e      	beq.n	800b64e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d11a      	bne.n	800b64e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <vPortFree+0xb8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	43db      	mvns	r3, r3
 800b622:	401a      	ands	r2, r3
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b628:	f7fe fc88 	bl	8009f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	685a      	ldr	r2, [r3, #4]
 800b630:	4b0a      	ldr	r3, [pc, #40]	; (800b65c <vPortFree+0xbc>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4413      	add	r3, r2
 800b636:	4a09      	ldr	r2, [pc, #36]	; (800b65c <vPortFree+0xbc>)
 800b638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b63a:	6938      	ldr	r0, [r7, #16]
 800b63c:	f000 f874 	bl	800b728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b640:	4b07      	ldr	r3, [pc, #28]	; (800b660 <vPortFree+0xc0>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3301      	adds	r3, #1
 800b646:	4a06      	ldr	r2, [pc, #24]	; (800b660 <vPortFree+0xc0>)
 800b648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b64a:	f7fe fc85 	bl	8009f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b64e:	bf00      	nop
 800b650:	3718      	adds	r7, #24
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20005280 	.word	0x20005280
 800b65c:	20005270 	.word	0x20005270
 800b660:	2000527c 	.word	0x2000527c

0800b664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b66a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b66e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b670:	4b27      	ldr	r3, [pc, #156]	; (800b710 <prvHeapInit+0xac>)
 800b672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00c      	beq.n	800b698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3307      	adds	r3, #7
 800b682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f023 0307 	bic.w	r3, r3, #7
 800b68a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	4a1f      	ldr	r2, [pc, #124]	; (800b710 <prvHeapInit+0xac>)
 800b694:	4413      	add	r3, r2
 800b696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b69c:	4a1d      	ldr	r2, [pc, #116]	; (800b714 <prvHeapInit+0xb0>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6a2:	4b1c      	ldr	r3, [pc, #112]	; (800b714 <prvHeapInit+0xb0>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6b0:	2208      	movs	r2, #8
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	1a9b      	subs	r3, r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f023 0307 	bic.w	r3, r3, #7
 800b6be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4a15      	ldr	r2, [pc, #84]	; (800b718 <prvHeapInit+0xb4>)
 800b6c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6c6:	4b14      	ldr	r3, [pc, #80]	; (800b718 <prvHeapInit+0xb4>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6ce:	4b12      	ldr	r3, [pc, #72]	; (800b718 <prvHeapInit+0xb4>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6e4:	4b0c      	ldr	r3, [pc, #48]	; (800b718 <prvHeapInit+0xb4>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <prvHeapInit+0xb8>)
 800b6f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	4a09      	ldr	r2, [pc, #36]	; (800b720 <prvHeapInit+0xbc>)
 800b6fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6fc:	4b09      	ldr	r3, [pc, #36]	; (800b724 <prvHeapInit+0xc0>)
 800b6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b702:	601a      	str	r2, [r3, #0]
}
 800b704:	bf00      	nop
 800b706:	3714      	adds	r7, #20
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr
 800b710:	20001664 	.word	0x20001664
 800b714:	20005264 	.word	0x20005264
 800b718:	2000526c 	.word	0x2000526c
 800b71c:	20005274 	.word	0x20005274
 800b720:	20005270 	.word	0x20005270
 800b724:	20005280 	.word	0x20005280

0800b728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b730:	4b28      	ldr	r3, [pc, #160]	; (800b7d4 <prvInsertBlockIntoFreeList+0xac>)
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e002      	b.n	800b73c <prvInsertBlockIntoFreeList+0x14>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	429a      	cmp	r2, r3
 800b744:	d8f7      	bhi.n	800b736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	4413      	add	r3, r2
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	429a      	cmp	r2, r3
 800b756:	d108      	bne.n	800b76a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	441a      	add	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	441a      	add	r2, r3
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d118      	bne.n	800b7b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	429a      	cmp	r2, r3
 800b788:	d00d      	beq.n	800b7a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	441a      	add	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	e008      	b.n	800b7b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7a6:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	601a      	str	r2, [r3, #0]
 800b7ae:	e003      	b.n	800b7b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d002      	beq.n	800b7c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7c6:	bf00      	nop
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	20005264 	.word	0x20005264
 800b7d8:	2000526c 	.word	0x2000526c

0800b7dc <__cvt>:
 800b7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7e0:	ec55 4b10 	vmov	r4, r5, d0
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	460e      	mov	r6, r1
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	462b      	mov	r3, r5
 800b7ec:	bfbb      	ittet	lt
 800b7ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7f2:	461d      	movlt	r5, r3
 800b7f4:	2300      	movge	r3, #0
 800b7f6:	232d      	movlt	r3, #45	; 0x2d
 800b7f8:	700b      	strb	r3, [r1, #0]
 800b7fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b800:	4691      	mov	r9, r2
 800b802:	f023 0820 	bic.w	r8, r3, #32
 800b806:	bfbc      	itt	lt
 800b808:	4622      	movlt	r2, r4
 800b80a:	4614      	movlt	r4, r2
 800b80c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b810:	d005      	beq.n	800b81e <__cvt+0x42>
 800b812:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b816:	d100      	bne.n	800b81a <__cvt+0x3e>
 800b818:	3601      	adds	r6, #1
 800b81a:	2102      	movs	r1, #2
 800b81c:	e000      	b.n	800b820 <__cvt+0x44>
 800b81e:	2103      	movs	r1, #3
 800b820:	ab03      	add	r3, sp, #12
 800b822:	9301      	str	r3, [sp, #4]
 800b824:	ab02      	add	r3, sp, #8
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	ec45 4b10 	vmov	d0, r4, r5
 800b82c:	4653      	mov	r3, sl
 800b82e:	4632      	mov	r2, r6
 800b830:	f000 feba 	bl	800c5a8 <_dtoa_r>
 800b834:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b838:	4607      	mov	r7, r0
 800b83a:	d102      	bne.n	800b842 <__cvt+0x66>
 800b83c:	f019 0f01 	tst.w	r9, #1
 800b840:	d022      	beq.n	800b888 <__cvt+0xac>
 800b842:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b846:	eb07 0906 	add.w	r9, r7, r6
 800b84a:	d110      	bne.n	800b86e <__cvt+0x92>
 800b84c:	783b      	ldrb	r3, [r7, #0]
 800b84e:	2b30      	cmp	r3, #48	; 0x30
 800b850:	d10a      	bne.n	800b868 <__cvt+0x8c>
 800b852:	2200      	movs	r2, #0
 800b854:	2300      	movs	r3, #0
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f5 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800b85e:	b918      	cbnz	r0, 800b868 <__cvt+0x8c>
 800b860:	f1c6 0601 	rsb	r6, r6, #1
 800b864:	f8ca 6000 	str.w	r6, [sl]
 800b868:	f8da 3000 	ldr.w	r3, [sl]
 800b86c:	4499      	add	r9, r3
 800b86e:	2200      	movs	r2, #0
 800b870:	2300      	movs	r3, #0
 800b872:	4620      	mov	r0, r4
 800b874:	4629      	mov	r1, r5
 800b876:	f7f5 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800b87a:	b108      	cbz	r0, 800b880 <__cvt+0xa4>
 800b87c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b880:	2230      	movs	r2, #48	; 0x30
 800b882:	9b03      	ldr	r3, [sp, #12]
 800b884:	454b      	cmp	r3, r9
 800b886:	d307      	bcc.n	800b898 <__cvt+0xbc>
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b88c:	1bdb      	subs	r3, r3, r7
 800b88e:	4638      	mov	r0, r7
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	b004      	add	sp, #16
 800b894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b898:	1c59      	adds	r1, r3, #1
 800b89a:	9103      	str	r1, [sp, #12]
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	e7f0      	b.n	800b882 <__cvt+0xa6>

0800b8a0 <__exponent>:
 800b8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	bfb8      	it	lt
 800b8a8:	4249      	neglt	r1, r1
 800b8aa:	f803 2b02 	strb.w	r2, [r3], #2
 800b8ae:	bfb4      	ite	lt
 800b8b0:	222d      	movlt	r2, #45	; 0x2d
 800b8b2:	222b      	movge	r2, #43	; 0x2b
 800b8b4:	2909      	cmp	r1, #9
 800b8b6:	7042      	strb	r2, [r0, #1]
 800b8b8:	dd2a      	ble.n	800b910 <__exponent+0x70>
 800b8ba:	f10d 0207 	add.w	r2, sp, #7
 800b8be:	4617      	mov	r7, r2
 800b8c0:	260a      	movs	r6, #10
 800b8c2:	4694      	mov	ip, r2
 800b8c4:	fb91 f5f6 	sdiv	r5, r1, r6
 800b8c8:	fb06 1415 	mls	r4, r6, r5, r1
 800b8cc:	3430      	adds	r4, #48	; 0x30
 800b8ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	2c63      	cmp	r4, #99	; 0x63
 800b8d6:	f102 32ff 	add.w	r2, r2, #4294967295
 800b8da:	4629      	mov	r1, r5
 800b8dc:	dcf1      	bgt.n	800b8c2 <__exponent+0x22>
 800b8de:	3130      	adds	r1, #48	; 0x30
 800b8e0:	f1ac 0402 	sub.w	r4, ip, #2
 800b8e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b8e8:	1c41      	adds	r1, r0, #1
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	42ba      	cmp	r2, r7
 800b8ee:	d30a      	bcc.n	800b906 <__exponent+0x66>
 800b8f0:	f10d 0209 	add.w	r2, sp, #9
 800b8f4:	eba2 020c 	sub.w	r2, r2, ip
 800b8f8:	42bc      	cmp	r4, r7
 800b8fa:	bf88      	it	hi
 800b8fc:	2200      	movhi	r2, #0
 800b8fe:	4413      	add	r3, r2
 800b900:	1a18      	subs	r0, r3, r0
 800b902:	b003      	add	sp, #12
 800b904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b906:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b90a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b90e:	e7ed      	b.n	800b8ec <__exponent+0x4c>
 800b910:	2330      	movs	r3, #48	; 0x30
 800b912:	3130      	adds	r1, #48	; 0x30
 800b914:	7083      	strb	r3, [r0, #2]
 800b916:	70c1      	strb	r1, [r0, #3]
 800b918:	1d03      	adds	r3, r0, #4
 800b91a:	e7f1      	b.n	800b900 <__exponent+0x60>

0800b91c <_printf_float>:
 800b91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b920:	ed2d 8b02 	vpush	{d8}
 800b924:	b08d      	sub	sp, #52	; 0x34
 800b926:	460c      	mov	r4, r1
 800b928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b92c:	4616      	mov	r6, r2
 800b92e:	461f      	mov	r7, r3
 800b930:	4605      	mov	r5, r0
 800b932:	f000 fcd5 	bl	800c2e0 <_localeconv_r>
 800b936:	f8d0 a000 	ldr.w	sl, [r0]
 800b93a:	4650      	mov	r0, sl
 800b93c:	f7f4 fc98 	bl	8000270 <strlen>
 800b940:	2300      	movs	r3, #0
 800b942:	930a      	str	r3, [sp, #40]	; 0x28
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	9305      	str	r3, [sp, #20]
 800b948:	f8d8 3000 	ldr.w	r3, [r8]
 800b94c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b950:	3307      	adds	r3, #7
 800b952:	f023 0307 	bic.w	r3, r3, #7
 800b956:	f103 0208 	add.w	r2, r3, #8
 800b95a:	f8c8 2000 	str.w	r2, [r8]
 800b95e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b962:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	f8cd 8018 	str.w	r8, [sp, #24]
 800b96c:	ee08 0a10 	vmov	s16, r0
 800b970:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b978:	4b9e      	ldr	r3, [pc, #632]	; (800bbf4 <_printf_float+0x2d8>)
 800b97a:	f04f 32ff 	mov.w	r2, #4294967295
 800b97e:	f7f5 f8d5 	bl	8000b2c <__aeabi_dcmpun>
 800b982:	bb88      	cbnz	r0, 800b9e8 <_printf_float+0xcc>
 800b984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b988:	4b9a      	ldr	r3, [pc, #616]	; (800bbf4 <_printf_float+0x2d8>)
 800b98a:	f04f 32ff 	mov.w	r2, #4294967295
 800b98e:	f7f5 f8af 	bl	8000af0 <__aeabi_dcmple>
 800b992:	bb48      	cbnz	r0, 800b9e8 <_printf_float+0xcc>
 800b994:	2200      	movs	r2, #0
 800b996:	2300      	movs	r3, #0
 800b998:	4640      	mov	r0, r8
 800b99a:	4649      	mov	r1, r9
 800b99c:	f7f5 f89e 	bl	8000adc <__aeabi_dcmplt>
 800b9a0:	b110      	cbz	r0, 800b9a8 <_printf_float+0x8c>
 800b9a2:	232d      	movs	r3, #45	; 0x2d
 800b9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9a8:	4a93      	ldr	r2, [pc, #588]	; (800bbf8 <_printf_float+0x2dc>)
 800b9aa:	4b94      	ldr	r3, [pc, #592]	; (800bbfc <_printf_float+0x2e0>)
 800b9ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b9b0:	bf94      	ite	ls
 800b9b2:	4690      	movls	r8, r2
 800b9b4:	4698      	movhi	r8, r3
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	6123      	str	r3, [r4, #16]
 800b9ba:	9b05      	ldr	r3, [sp, #20]
 800b9bc:	f023 0304 	bic.w	r3, r3, #4
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	f04f 0900 	mov.w	r9, #0
 800b9c6:	9700      	str	r7, [sp, #0]
 800b9c8:	4633      	mov	r3, r6
 800b9ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f9da 	bl	800bd88 <_printf_common>
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	f040 8090 	bne.w	800bafa <_printf_float+0x1de>
 800b9da:	f04f 30ff 	mov.w	r0, #4294967295
 800b9de:	b00d      	add	sp, #52	; 0x34
 800b9e0:	ecbd 8b02 	vpop	{d8}
 800b9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e8:	4642      	mov	r2, r8
 800b9ea:	464b      	mov	r3, r9
 800b9ec:	4640      	mov	r0, r8
 800b9ee:	4649      	mov	r1, r9
 800b9f0:	f7f5 f89c 	bl	8000b2c <__aeabi_dcmpun>
 800b9f4:	b140      	cbz	r0, 800ba08 <_printf_float+0xec>
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	bfbc      	itt	lt
 800b9fc:	232d      	movlt	r3, #45	; 0x2d
 800b9fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba02:	4a7f      	ldr	r2, [pc, #508]	; (800bc00 <_printf_float+0x2e4>)
 800ba04:	4b7f      	ldr	r3, [pc, #508]	; (800bc04 <_printf_float+0x2e8>)
 800ba06:	e7d1      	b.n	800b9ac <_printf_float+0x90>
 800ba08:	6863      	ldr	r3, [r4, #4]
 800ba0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba0e:	9206      	str	r2, [sp, #24]
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	d13f      	bne.n	800ba94 <_printf_float+0x178>
 800ba14:	2306      	movs	r3, #6
 800ba16:	6063      	str	r3, [r4, #4]
 800ba18:	9b05      	ldr	r3, [sp, #20]
 800ba1a:	6861      	ldr	r1, [r4, #4]
 800ba1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ba20:	2300      	movs	r3, #0
 800ba22:	9303      	str	r3, [sp, #12]
 800ba24:	ab0a      	add	r3, sp, #40	; 0x28
 800ba26:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ba2a:	ab09      	add	r3, sp, #36	; 0x24
 800ba2c:	ec49 8b10 	vmov	d0, r8, r9
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	6022      	str	r2, [r4, #0]
 800ba34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba38:	4628      	mov	r0, r5
 800ba3a:	f7ff fecf 	bl	800b7dc <__cvt>
 800ba3e:	9b06      	ldr	r3, [sp, #24]
 800ba40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba42:	2b47      	cmp	r3, #71	; 0x47
 800ba44:	4680      	mov	r8, r0
 800ba46:	d108      	bne.n	800ba5a <_printf_float+0x13e>
 800ba48:	1cc8      	adds	r0, r1, #3
 800ba4a:	db02      	blt.n	800ba52 <_printf_float+0x136>
 800ba4c:	6863      	ldr	r3, [r4, #4]
 800ba4e:	4299      	cmp	r1, r3
 800ba50:	dd41      	ble.n	800bad6 <_printf_float+0x1ba>
 800ba52:	f1ab 0302 	sub.w	r3, fp, #2
 800ba56:	fa5f fb83 	uxtb.w	fp, r3
 800ba5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba5e:	d820      	bhi.n	800baa2 <_printf_float+0x186>
 800ba60:	3901      	subs	r1, #1
 800ba62:	465a      	mov	r2, fp
 800ba64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba68:	9109      	str	r1, [sp, #36]	; 0x24
 800ba6a:	f7ff ff19 	bl	800b8a0 <__exponent>
 800ba6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba70:	1813      	adds	r3, r2, r0
 800ba72:	2a01      	cmp	r2, #1
 800ba74:	4681      	mov	r9, r0
 800ba76:	6123      	str	r3, [r4, #16]
 800ba78:	dc02      	bgt.n	800ba80 <_printf_float+0x164>
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	07d2      	lsls	r2, r2, #31
 800ba7e:	d501      	bpl.n	800ba84 <_printf_float+0x168>
 800ba80:	3301      	adds	r3, #1
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d09c      	beq.n	800b9c6 <_printf_float+0xaa>
 800ba8c:	232d      	movs	r3, #45	; 0x2d
 800ba8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba92:	e798      	b.n	800b9c6 <_printf_float+0xaa>
 800ba94:	9a06      	ldr	r2, [sp, #24]
 800ba96:	2a47      	cmp	r2, #71	; 0x47
 800ba98:	d1be      	bne.n	800ba18 <_printf_float+0xfc>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1bc      	bne.n	800ba18 <_printf_float+0xfc>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e7b9      	b.n	800ba16 <_printf_float+0xfa>
 800baa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800baa6:	d118      	bne.n	800bada <_printf_float+0x1be>
 800baa8:	2900      	cmp	r1, #0
 800baaa:	6863      	ldr	r3, [r4, #4]
 800baac:	dd0b      	ble.n	800bac6 <_printf_float+0x1aa>
 800baae:	6121      	str	r1, [r4, #16]
 800bab0:	b913      	cbnz	r3, 800bab8 <_printf_float+0x19c>
 800bab2:	6822      	ldr	r2, [r4, #0]
 800bab4:	07d0      	lsls	r0, r2, #31
 800bab6:	d502      	bpl.n	800babe <_printf_float+0x1a2>
 800bab8:	3301      	adds	r3, #1
 800baba:	440b      	add	r3, r1
 800babc:	6123      	str	r3, [r4, #16]
 800babe:	65a1      	str	r1, [r4, #88]	; 0x58
 800bac0:	f04f 0900 	mov.w	r9, #0
 800bac4:	e7de      	b.n	800ba84 <_printf_float+0x168>
 800bac6:	b913      	cbnz	r3, 800bace <_printf_float+0x1b2>
 800bac8:	6822      	ldr	r2, [r4, #0]
 800baca:	07d2      	lsls	r2, r2, #31
 800bacc:	d501      	bpl.n	800bad2 <_printf_float+0x1b6>
 800bace:	3302      	adds	r3, #2
 800bad0:	e7f4      	b.n	800babc <_printf_float+0x1a0>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e7f2      	b.n	800babc <_printf_float+0x1a0>
 800bad6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800badc:	4299      	cmp	r1, r3
 800bade:	db05      	blt.n	800baec <_printf_float+0x1d0>
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	6121      	str	r1, [r4, #16]
 800bae4:	07d8      	lsls	r0, r3, #31
 800bae6:	d5ea      	bpl.n	800babe <_printf_float+0x1a2>
 800bae8:	1c4b      	adds	r3, r1, #1
 800baea:	e7e7      	b.n	800babc <_printf_float+0x1a0>
 800baec:	2900      	cmp	r1, #0
 800baee:	bfd4      	ite	le
 800baf0:	f1c1 0202 	rsble	r2, r1, #2
 800baf4:	2201      	movgt	r2, #1
 800baf6:	4413      	add	r3, r2
 800baf8:	e7e0      	b.n	800babc <_printf_float+0x1a0>
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	055a      	lsls	r2, r3, #21
 800bafe:	d407      	bmi.n	800bb10 <_printf_float+0x1f4>
 800bb00:	6923      	ldr	r3, [r4, #16]
 800bb02:	4642      	mov	r2, r8
 800bb04:	4631      	mov	r1, r6
 800bb06:	4628      	mov	r0, r5
 800bb08:	47b8      	blx	r7
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	d12c      	bne.n	800bb68 <_printf_float+0x24c>
 800bb0e:	e764      	b.n	800b9da <_printf_float+0xbe>
 800bb10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb14:	f240 80e0 	bls.w	800bcd8 <_printf_float+0x3bc>
 800bb18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f7f4 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d034      	beq.n	800bb92 <_printf_float+0x276>
 800bb28:	4a37      	ldr	r2, [pc, #220]	; (800bc08 <_printf_float+0x2ec>)
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4628      	mov	r0, r5
 800bb30:	47b8      	blx	r7
 800bb32:	3001      	adds	r0, #1
 800bb34:	f43f af51 	beq.w	800b9da <_printf_float+0xbe>
 800bb38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	db02      	blt.n	800bb46 <_printf_float+0x22a>
 800bb40:	6823      	ldr	r3, [r4, #0]
 800bb42:	07d8      	lsls	r0, r3, #31
 800bb44:	d510      	bpl.n	800bb68 <_printf_float+0x24c>
 800bb46:	ee18 3a10 	vmov	r3, s16
 800bb4a:	4652      	mov	r2, sl
 800bb4c:	4631      	mov	r1, r6
 800bb4e:	4628      	mov	r0, r5
 800bb50:	47b8      	blx	r7
 800bb52:	3001      	adds	r0, #1
 800bb54:	f43f af41 	beq.w	800b9da <_printf_float+0xbe>
 800bb58:	f04f 0800 	mov.w	r8, #0
 800bb5c:	f104 091a 	add.w	r9, r4, #26
 800bb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb62:	3b01      	subs	r3, #1
 800bb64:	4543      	cmp	r3, r8
 800bb66:	dc09      	bgt.n	800bb7c <_printf_float+0x260>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	079b      	lsls	r3, r3, #30
 800bb6c:	f100 8107 	bmi.w	800bd7e <_printf_float+0x462>
 800bb70:	68e0      	ldr	r0, [r4, #12]
 800bb72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb74:	4298      	cmp	r0, r3
 800bb76:	bfb8      	it	lt
 800bb78:	4618      	movlt	r0, r3
 800bb7a:	e730      	b.n	800b9de <_printf_float+0xc2>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	464a      	mov	r2, r9
 800bb80:	4631      	mov	r1, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	f43f af27 	beq.w	800b9da <_printf_float+0xbe>
 800bb8c:	f108 0801 	add.w	r8, r8, #1
 800bb90:	e7e6      	b.n	800bb60 <_printf_float+0x244>
 800bb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dc39      	bgt.n	800bc0c <_printf_float+0x2f0>
 800bb98:	4a1b      	ldr	r2, [pc, #108]	; (800bc08 <_printf_float+0x2ec>)
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	4631      	mov	r1, r6
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b8      	blx	r7
 800bba2:	3001      	adds	r0, #1
 800bba4:	f43f af19 	beq.w	800b9da <_printf_float+0xbe>
 800bba8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bbac:	4313      	orrs	r3, r2
 800bbae:	d102      	bne.n	800bbb6 <_printf_float+0x29a>
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	07d9      	lsls	r1, r3, #31
 800bbb4:	d5d8      	bpl.n	800bb68 <_printf_float+0x24c>
 800bbb6:	ee18 3a10 	vmov	r3, s16
 800bbba:	4652      	mov	r2, sl
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f af09 	beq.w	800b9da <_printf_float+0xbe>
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	f104 0a1a 	add.w	sl, r4, #26
 800bbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd2:	425b      	negs	r3, r3
 800bbd4:	454b      	cmp	r3, r9
 800bbd6:	dc01      	bgt.n	800bbdc <_printf_float+0x2c0>
 800bbd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbda:	e792      	b.n	800bb02 <_printf_float+0x1e6>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4652      	mov	r2, sl
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	47b8      	blx	r7
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	f43f aef7 	beq.w	800b9da <_printf_float+0xbe>
 800bbec:	f109 0901 	add.w	r9, r9, #1
 800bbf0:	e7ee      	b.n	800bbd0 <_printf_float+0x2b4>
 800bbf2:	bf00      	nop
 800bbf4:	7fefffff 	.word	0x7fefffff
 800bbf8:	0800f1dc 	.word	0x0800f1dc
 800bbfc:	0800f1e0 	.word	0x0800f1e0
 800bc00:	0800f1e4 	.word	0x0800f1e4
 800bc04:	0800f1e8 	.word	0x0800f1e8
 800bc08:	0800f1ec 	.word	0x0800f1ec
 800bc0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc10:	429a      	cmp	r2, r3
 800bc12:	bfa8      	it	ge
 800bc14:	461a      	movge	r2, r3
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	4691      	mov	r9, r2
 800bc1a:	dc37      	bgt.n	800bc8c <_printf_float+0x370>
 800bc1c:	f04f 0b00 	mov.w	fp, #0
 800bc20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc24:	f104 021a 	add.w	r2, r4, #26
 800bc28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc2a:	9305      	str	r3, [sp, #20]
 800bc2c:	eba3 0309 	sub.w	r3, r3, r9
 800bc30:	455b      	cmp	r3, fp
 800bc32:	dc33      	bgt.n	800bc9c <_printf_float+0x380>
 800bc34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	db3b      	blt.n	800bcb4 <_printf_float+0x398>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	07da      	lsls	r2, r3, #31
 800bc40:	d438      	bmi.n	800bcb4 <_printf_float+0x398>
 800bc42:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bc46:	eba2 0903 	sub.w	r9, r2, r3
 800bc4a:	9b05      	ldr	r3, [sp, #20]
 800bc4c:	1ad2      	subs	r2, r2, r3
 800bc4e:	4591      	cmp	r9, r2
 800bc50:	bfa8      	it	ge
 800bc52:	4691      	movge	r9, r2
 800bc54:	f1b9 0f00 	cmp.w	r9, #0
 800bc58:	dc35      	bgt.n	800bcc6 <_printf_float+0x3aa>
 800bc5a:	f04f 0800 	mov.w	r8, #0
 800bc5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc62:	f104 0a1a 	add.w	sl, r4, #26
 800bc66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc6a:	1a9b      	subs	r3, r3, r2
 800bc6c:	eba3 0309 	sub.w	r3, r3, r9
 800bc70:	4543      	cmp	r3, r8
 800bc72:	f77f af79 	ble.w	800bb68 <_printf_float+0x24c>
 800bc76:	2301      	movs	r3, #1
 800bc78:	4652      	mov	r2, sl
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	f43f aeaa 	beq.w	800b9da <_printf_float+0xbe>
 800bc86:	f108 0801 	add.w	r8, r8, #1
 800bc8a:	e7ec      	b.n	800bc66 <_printf_float+0x34a>
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	4631      	mov	r1, r6
 800bc90:	4642      	mov	r2, r8
 800bc92:	4628      	mov	r0, r5
 800bc94:	47b8      	blx	r7
 800bc96:	3001      	adds	r0, #1
 800bc98:	d1c0      	bne.n	800bc1c <_printf_float+0x300>
 800bc9a:	e69e      	b.n	800b9da <_printf_float+0xbe>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	4631      	mov	r1, r6
 800bca0:	4628      	mov	r0, r5
 800bca2:	9205      	str	r2, [sp, #20]
 800bca4:	47b8      	blx	r7
 800bca6:	3001      	adds	r0, #1
 800bca8:	f43f ae97 	beq.w	800b9da <_printf_float+0xbe>
 800bcac:	9a05      	ldr	r2, [sp, #20]
 800bcae:	f10b 0b01 	add.w	fp, fp, #1
 800bcb2:	e7b9      	b.n	800bc28 <_printf_float+0x30c>
 800bcb4:	ee18 3a10 	vmov	r3, s16
 800bcb8:	4652      	mov	r2, sl
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d1be      	bne.n	800bc42 <_printf_float+0x326>
 800bcc4:	e689      	b.n	800b9da <_printf_float+0xbe>
 800bcc6:	9a05      	ldr	r2, [sp, #20]
 800bcc8:	464b      	mov	r3, r9
 800bcca:	4442      	add	r2, r8
 800bccc:	4631      	mov	r1, r6
 800bcce:	4628      	mov	r0, r5
 800bcd0:	47b8      	blx	r7
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	d1c1      	bne.n	800bc5a <_printf_float+0x33e>
 800bcd6:	e680      	b.n	800b9da <_printf_float+0xbe>
 800bcd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcda:	2a01      	cmp	r2, #1
 800bcdc:	dc01      	bgt.n	800bce2 <_printf_float+0x3c6>
 800bcde:	07db      	lsls	r3, r3, #31
 800bce0:	d53a      	bpl.n	800bd58 <_printf_float+0x43c>
 800bce2:	2301      	movs	r3, #1
 800bce4:	4642      	mov	r2, r8
 800bce6:	4631      	mov	r1, r6
 800bce8:	4628      	mov	r0, r5
 800bcea:	47b8      	blx	r7
 800bcec:	3001      	adds	r0, #1
 800bcee:	f43f ae74 	beq.w	800b9da <_printf_float+0xbe>
 800bcf2:	ee18 3a10 	vmov	r3, s16
 800bcf6:	4652      	mov	r2, sl
 800bcf8:	4631      	mov	r1, r6
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	47b8      	blx	r7
 800bcfe:	3001      	adds	r0, #1
 800bd00:	f43f ae6b 	beq.w	800b9da <_printf_float+0xbe>
 800bd04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bd10:	f7f4 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd14:	b9d8      	cbnz	r0, 800bd4e <_printf_float+0x432>
 800bd16:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bd1a:	f108 0201 	add.w	r2, r8, #1
 800bd1e:	4631      	mov	r1, r6
 800bd20:	4628      	mov	r0, r5
 800bd22:	47b8      	blx	r7
 800bd24:	3001      	adds	r0, #1
 800bd26:	d10e      	bne.n	800bd46 <_printf_float+0x42a>
 800bd28:	e657      	b.n	800b9da <_printf_float+0xbe>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	4652      	mov	r2, sl
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4628      	mov	r0, r5
 800bd32:	47b8      	blx	r7
 800bd34:	3001      	adds	r0, #1
 800bd36:	f43f ae50 	beq.w	800b9da <_printf_float+0xbe>
 800bd3a:	f108 0801 	add.w	r8, r8, #1
 800bd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd40:	3b01      	subs	r3, #1
 800bd42:	4543      	cmp	r3, r8
 800bd44:	dcf1      	bgt.n	800bd2a <_printf_float+0x40e>
 800bd46:	464b      	mov	r3, r9
 800bd48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd4c:	e6da      	b.n	800bb04 <_printf_float+0x1e8>
 800bd4e:	f04f 0800 	mov.w	r8, #0
 800bd52:	f104 0a1a 	add.w	sl, r4, #26
 800bd56:	e7f2      	b.n	800bd3e <_printf_float+0x422>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	4642      	mov	r2, r8
 800bd5c:	e7df      	b.n	800bd1e <_printf_float+0x402>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	464a      	mov	r2, r9
 800bd62:	4631      	mov	r1, r6
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b8      	blx	r7
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f43f ae36 	beq.w	800b9da <_printf_float+0xbe>
 800bd6e:	f108 0801 	add.w	r8, r8, #1
 800bd72:	68e3      	ldr	r3, [r4, #12]
 800bd74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd76:	1a5b      	subs	r3, r3, r1
 800bd78:	4543      	cmp	r3, r8
 800bd7a:	dcf0      	bgt.n	800bd5e <_printf_float+0x442>
 800bd7c:	e6f8      	b.n	800bb70 <_printf_float+0x254>
 800bd7e:	f04f 0800 	mov.w	r8, #0
 800bd82:	f104 0919 	add.w	r9, r4, #25
 800bd86:	e7f4      	b.n	800bd72 <_printf_float+0x456>

0800bd88 <_printf_common>:
 800bd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd8c:	4616      	mov	r6, r2
 800bd8e:	4699      	mov	r9, r3
 800bd90:	688a      	ldr	r2, [r1, #8]
 800bd92:	690b      	ldr	r3, [r1, #16]
 800bd94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	bfb8      	it	lt
 800bd9c:	4613      	movlt	r3, r2
 800bd9e:	6033      	str	r3, [r6, #0]
 800bda0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bda4:	4607      	mov	r7, r0
 800bda6:	460c      	mov	r4, r1
 800bda8:	b10a      	cbz	r2, 800bdae <_printf_common+0x26>
 800bdaa:	3301      	adds	r3, #1
 800bdac:	6033      	str	r3, [r6, #0]
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	0699      	lsls	r1, r3, #26
 800bdb2:	bf42      	ittt	mi
 800bdb4:	6833      	ldrmi	r3, [r6, #0]
 800bdb6:	3302      	addmi	r3, #2
 800bdb8:	6033      	strmi	r3, [r6, #0]
 800bdba:	6825      	ldr	r5, [r4, #0]
 800bdbc:	f015 0506 	ands.w	r5, r5, #6
 800bdc0:	d106      	bne.n	800bdd0 <_printf_common+0x48>
 800bdc2:	f104 0a19 	add.w	sl, r4, #25
 800bdc6:	68e3      	ldr	r3, [r4, #12]
 800bdc8:	6832      	ldr	r2, [r6, #0]
 800bdca:	1a9b      	subs	r3, r3, r2
 800bdcc:	42ab      	cmp	r3, r5
 800bdce:	dc26      	bgt.n	800be1e <_printf_common+0x96>
 800bdd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bdd4:	1e13      	subs	r3, r2, #0
 800bdd6:	6822      	ldr	r2, [r4, #0]
 800bdd8:	bf18      	it	ne
 800bdda:	2301      	movne	r3, #1
 800bddc:	0692      	lsls	r2, r2, #26
 800bdde:	d42b      	bmi.n	800be38 <_printf_common+0xb0>
 800bde0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bde4:	4649      	mov	r1, r9
 800bde6:	4638      	mov	r0, r7
 800bde8:	47c0      	blx	r8
 800bdea:	3001      	adds	r0, #1
 800bdec:	d01e      	beq.n	800be2c <_printf_common+0xa4>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	6922      	ldr	r2, [r4, #16]
 800bdf2:	f003 0306 	and.w	r3, r3, #6
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	bf02      	ittt	eq
 800bdfa:	68e5      	ldreq	r5, [r4, #12]
 800bdfc:	6833      	ldreq	r3, [r6, #0]
 800bdfe:	1aed      	subeq	r5, r5, r3
 800be00:	68a3      	ldr	r3, [r4, #8]
 800be02:	bf0c      	ite	eq
 800be04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be08:	2500      	movne	r5, #0
 800be0a:	4293      	cmp	r3, r2
 800be0c:	bfc4      	itt	gt
 800be0e:	1a9b      	subgt	r3, r3, r2
 800be10:	18ed      	addgt	r5, r5, r3
 800be12:	2600      	movs	r6, #0
 800be14:	341a      	adds	r4, #26
 800be16:	42b5      	cmp	r5, r6
 800be18:	d11a      	bne.n	800be50 <_printf_common+0xc8>
 800be1a:	2000      	movs	r0, #0
 800be1c:	e008      	b.n	800be30 <_printf_common+0xa8>
 800be1e:	2301      	movs	r3, #1
 800be20:	4652      	mov	r2, sl
 800be22:	4649      	mov	r1, r9
 800be24:	4638      	mov	r0, r7
 800be26:	47c0      	blx	r8
 800be28:	3001      	adds	r0, #1
 800be2a:	d103      	bne.n	800be34 <_printf_common+0xac>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be34:	3501      	adds	r5, #1
 800be36:	e7c6      	b.n	800bdc6 <_printf_common+0x3e>
 800be38:	18e1      	adds	r1, r4, r3
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	2030      	movs	r0, #48	; 0x30
 800be3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be42:	4422      	add	r2, r4
 800be44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be4c:	3302      	adds	r3, #2
 800be4e:	e7c7      	b.n	800bde0 <_printf_common+0x58>
 800be50:	2301      	movs	r3, #1
 800be52:	4622      	mov	r2, r4
 800be54:	4649      	mov	r1, r9
 800be56:	4638      	mov	r0, r7
 800be58:	47c0      	blx	r8
 800be5a:	3001      	adds	r0, #1
 800be5c:	d0e6      	beq.n	800be2c <_printf_common+0xa4>
 800be5e:	3601      	adds	r6, #1
 800be60:	e7d9      	b.n	800be16 <_printf_common+0x8e>
	...

0800be64 <_printf_i>:
 800be64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be68:	7e0f      	ldrb	r7, [r1, #24]
 800be6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be6c:	2f78      	cmp	r7, #120	; 0x78
 800be6e:	4691      	mov	r9, r2
 800be70:	4680      	mov	r8, r0
 800be72:	460c      	mov	r4, r1
 800be74:	469a      	mov	sl, r3
 800be76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be7a:	d807      	bhi.n	800be8c <_printf_i+0x28>
 800be7c:	2f62      	cmp	r7, #98	; 0x62
 800be7e:	d80a      	bhi.n	800be96 <_printf_i+0x32>
 800be80:	2f00      	cmp	r7, #0
 800be82:	f000 80d4 	beq.w	800c02e <_printf_i+0x1ca>
 800be86:	2f58      	cmp	r7, #88	; 0x58
 800be88:	f000 80c0 	beq.w	800c00c <_printf_i+0x1a8>
 800be8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be94:	e03a      	b.n	800bf0c <_printf_i+0xa8>
 800be96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be9a:	2b15      	cmp	r3, #21
 800be9c:	d8f6      	bhi.n	800be8c <_printf_i+0x28>
 800be9e:	a101      	add	r1, pc, #4	; (adr r1, 800bea4 <_printf_i+0x40>)
 800bea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bea4:	0800befd 	.word	0x0800befd
 800bea8:	0800bf11 	.word	0x0800bf11
 800beac:	0800be8d 	.word	0x0800be8d
 800beb0:	0800be8d 	.word	0x0800be8d
 800beb4:	0800be8d 	.word	0x0800be8d
 800beb8:	0800be8d 	.word	0x0800be8d
 800bebc:	0800bf11 	.word	0x0800bf11
 800bec0:	0800be8d 	.word	0x0800be8d
 800bec4:	0800be8d 	.word	0x0800be8d
 800bec8:	0800be8d 	.word	0x0800be8d
 800becc:	0800be8d 	.word	0x0800be8d
 800bed0:	0800c015 	.word	0x0800c015
 800bed4:	0800bf3d 	.word	0x0800bf3d
 800bed8:	0800bfcf 	.word	0x0800bfcf
 800bedc:	0800be8d 	.word	0x0800be8d
 800bee0:	0800be8d 	.word	0x0800be8d
 800bee4:	0800c037 	.word	0x0800c037
 800bee8:	0800be8d 	.word	0x0800be8d
 800beec:	0800bf3d 	.word	0x0800bf3d
 800bef0:	0800be8d 	.word	0x0800be8d
 800bef4:	0800be8d 	.word	0x0800be8d
 800bef8:	0800bfd7 	.word	0x0800bfd7
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	1d1a      	adds	r2, r3, #4
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	602a      	str	r2, [r5, #0]
 800bf04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e09f      	b.n	800c050 <_printf_i+0x1ec>
 800bf10:	6820      	ldr	r0, [r4, #0]
 800bf12:	682b      	ldr	r3, [r5, #0]
 800bf14:	0607      	lsls	r7, r0, #24
 800bf16:	f103 0104 	add.w	r1, r3, #4
 800bf1a:	6029      	str	r1, [r5, #0]
 800bf1c:	d501      	bpl.n	800bf22 <_printf_i+0xbe>
 800bf1e:	681e      	ldr	r6, [r3, #0]
 800bf20:	e003      	b.n	800bf2a <_printf_i+0xc6>
 800bf22:	0646      	lsls	r6, r0, #25
 800bf24:	d5fb      	bpl.n	800bf1e <_printf_i+0xba>
 800bf26:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf2a:	2e00      	cmp	r6, #0
 800bf2c:	da03      	bge.n	800bf36 <_printf_i+0xd2>
 800bf2e:	232d      	movs	r3, #45	; 0x2d
 800bf30:	4276      	negs	r6, r6
 800bf32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf36:	485a      	ldr	r0, [pc, #360]	; (800c0a0 <_printf_i+0x23c>)
 800bf38:	230a      	movs	r3, #10
 800bf3a:	e012      	b.n	800bf62 <_printf_i+0xfe>
 800bf3c:	682b      	ldr	r3, [r5, #0]
 800bf3e:	6820      	ldr	r0, [r4, #0]
 800bf40:	1d19      	adds	r1, r3, #4
 800bf42:	6029      	str	r1, [r5, #0]
 800bf44:	0605      	lsls	r5, r0, #24
 800bf46:	d501      	bpl.n	800bf4c <_printf_i+0xe8>
 800bf48:	681e      	ldr	r6, [r3, #0]
 800bf4a:	e002      	b.n	800bf52 <_printf_i+0xee>
 800bf4c:	0641      	lsls	r1, r0, #25
 800bf4e:	d5fb      	bpl.n	800bf48 <_printf_i+0xe4>
 800bf50:	881e      	ldrh	r6, [r3, #0]
 800bf52:	4853      	ldr	r0, [pc, #332]	; (800c0a0 <_printf_i+0x23c>)
 800bf54:	2f6f      	cmp	r7, #111	; 0x6f
 800bf56:	bf0c      	ite	eq
 800bf58:	2308      	moveq	r3, #8
 800bf5a:	230a      	movne	r3, #10
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf62:	6865      	ldr	r5, [r4, #4]
 800bf64:	60a5      	str	r5, [r4, #8]
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	bfa2      	ittt	ge
 800bf6a:	6821      	ldrge	r1, [r4, #0]
 800bf6c:	f021 0104 	bicge.w	r1, r1, #4
 800bf70:	6021      	strge	r1, [r4, #0]
 800bf72:	b90e      	cbnz	r6, 800bf78 <_printf_i+0x114>
 800bf74:	2d00      	cmp	r5, #0
 800bf76:	d04b      	beq.n	800c010 <_printf_i+0x1ac>
 800bf78:	4615      	mov	r5, r2
 800bf7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf7e:	fb03 6711 	mls	r7, r3, r1, r6
 800bf82:	5dc7      	ldrb	r7, [r0, r7]
 800bf84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf88:	4637      	mov	r7, r6
 800bf8a:	42bb      	cmp	r3, r7
 800bf8c:	460e      	mov	r6, r1
 800bf8e:	d9f4      	bls.n	800bf7a <_printf_i+0x116>
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d10b      	bne.n	800bfac <_printf_i+0x148>
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	07de      	lsls	r6, r3, #31
 800bf98:	d508      	bpl.n	800bfac <_printf_i+0x148>
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	6861      	ldr	r1, [r4, #4]
 800bf9e:	4299      	cmp	r1, r3
 800bfa0:	bfde      	ittt	le
 800bfa2:	2330      	movle	r3, #48	; 0x30
 800bfa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfac:	1b52      	subs	r2, r2, r5
 800bfae:	6122      	str	r2, [r4, #16]
 800bfb0:	f8cd a000 	str.w	sl, [sp]
 800bfb4:	464b      	mov	r3, r9
 800bfb6:	aa03      	add	r2, sp, #12
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4640      	mov	r0, r8
 800bfbc:	f7ff fee4 	bl	800bd88 <_printf_common>
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	d14a      	bne.n	800c05a <_printf_i+0x1f6>
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc8:	b004      	add	sp, #16
 800bfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	f043 0320 	orr.w	r3, r3, #32
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	4833      	ldr	r0, [pc, #204]	; (800c0a4 <_printf_i+0x240>)
 800bfd8:	2778      	movs	r7, #120	; 0x78
 800bfda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	6829      	ldr	r1, [r5, #0]
 800bfe2:	061f      	lsls	r7, r3, #24
 800bfe4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfe8:	d402      	bmi.n	800bff0 <_printf_i+0x18c>
 800bfea:	065f      	lsls	r7, r3, #25
 800bfec:	bf48      	it	mi
 800bfee:	b2b6      	uxthmi	r6, r6
 800bff0:	07df      	lsls	r7, r3, #31
 800bff2:	bf48      	it	mi
 800bff4:	f043 0320 	orrmi.w	r3, r3, #32
 800bff8:	6029      	str	r1, [r5, #0]
 800bffa:	bf48      	it	mi
 800bffc:	6023      	strmi	r3, [r4, #0]
 800bffe:	b91e      	cbnz	r6, 800c008 <_printf_i+0x1a4>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	f023 0320 	bic.w	r3, r3, #32
 800c006:	6023      	str	r3, [r4, #0]
 800c008:	2310      	movs	r3, #16
 800c00a:	e7a7      	b.n	800bf5c <_printf_i+0xf8>
 800c00c:	4824      	ldr	r0, [pc, #144]	; (800c0a0 <_printf_i+0x23c>)
 800c00e:	e7e4      	b.n	800bfda <_printf_i+0x176>
 800c010:	4615      	mov	r5, r2
 800c012:	e7bd      	b.n	800bf90 <_printf_i+0x12c>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	6826      	ldr	r6, [r4, #0]
 800c018:	6961      	ldr	r1, [r4, #20]
 800c01a:	1d18      	adds	r0, r3, #4
 800c01c:	6028      	str	r0, [r5, #0]
 800c01e:	0635      	lsls	r5, r6, #24
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	d501      	bpl.n	800c028 <_printf_i+0x1c4>
 800c024:	6019      	str	r1, [r3, #0]
 800c026:	e002      	b.n	800c02e <_printf_i+0x1ca>
 800c028:	0670      	lsls	r0, r6, #25
 800c02a:	d5fb      	bpl.n	800c024 <_printf_i+0x1c0>
 800c02c:	8019      	strh	r1, [r3, #0]
 800c02e:	2300      	movs	r3, #0
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	4615      	mov	r5, r2
 800c034:	e7bc      	b.n	800bfb0 <_printf_i+0x14c>
 800c036:	682b      	ldr	r3, [r5, #0]
 800c038:	1d1a      	adds	r2, r3, #4
 800c03a:	602a      	str	r2, [r5, #0]
 800c03c:	681d      	ldr	r5, [r3, #0]
 800c03e:	6862      	ldr	r2, [r4, #4]
 800c040:	2100      	movs	r1, #0
 800c042:	4628      	mov	r0, r5
 800c044:	f7f4 f8c4 	bl	80001d0 <memchr>
 800c048:	b108      	cbz	r0, 800c04e <_printf_i+0x1ea>
 800c04a:	1b40      	subs	r0, r0, r5
 800c04c:	6060      	str	r0, [r4, #4]
 800c04e:	6863      	ldr	r3, [r4, #4]
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	2300      	movs	r3, #0
 800c054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c058:	e7aa      	b.n	800bfb0 <_printf_i+0x14c>
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	462a      	mov	r2, r5
 800c05e:	4649      	mov	r1, r9
 800c060:	4640      	mov	r0, r8
 800c062:	47d0      	blx	sl
 800c064:	3001      	adds	r0, #1
 800c066:	d0ad      	beq.n	800bfc4 <_printf_i+0x160>
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	079b      	lsls	r3, r3, #30
 800c06c:	d413      	bmi.n	800c096 <_printf_i+0x232>
 800c06e:	68e0      	ldr	r0, [r4, #12]
 800c070:	9b03      	ldr	r3, [sp, #12]
 800c072:	4298      	cmp	r0, r3
 800c074:	bfb8      	it	lt
 800c076:	4618      	movlt	r0, r3
 800c078:	e7a6      	b.n	800bfc8 <_printf_i+0x164>
 800c07a:	2301      	movs	r3, #1
 800c07c:	4632      	mov	r2, r6
 800c07e:	4649      	mov	r1, r9
 800c080:	4640      	mov	r0, r8
 800c082:	47d0      	blx	sl
 800c084:	3001      	adds	r0, #1
 800c086:	d09d      	beq.n	800bfc4 <_printf_i+0x160>
 800c088:	3501      	adds	r5, #1
 800c08a:	68e3      	ldr	r3, [r4, #12]
 800c08c:	9903      	ldr	r1, [sp, #12]
 800c08e:	1a5b      	subs	r3, r3, r1
 800c090:	42ab      	cmp	r3, r5
 800c092:	dcf2      	bgt.n	800c07a <_printf_i+0x216>
 800c094:	e7eb      	b.n	800c06e <_printf_i+0x20a>
 800c096:	2500      	movs	r5, #0
 800c098:	f104 0619 	add.w	r6, r4, #25
 800c09c:	e7f5      	b.n	800c08a <_printf_i+0x226>
 800c09e:	bf00      	nop
 800c0a0:	0800f1ee 	.word	0x0800f1ee
 800c0a4:	0800f1ff 	.word	0x0800f1ff

0800c0a8 <std>:
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	b510      	push	{r4, lr}
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800c0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0b6:	6083      	str	r3, [r0, #8]
 800c0b8:	8181      	strh	r1, [r0, #12]
 800c0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800c0bc:	81c2      	strh	r2, [r0, #14]
 800c0be:	6183      	str	r3, [r0, #24]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	2208      	movs	r2, #8
 800c0c4:	305c      	adds	r0, #92	; 0x5c
 800c0c6:	f000 f902 	bl	800c2ce <memset>
 800c0ca:	4b05      	ldr	r3, [pc, #20]	; (800c0e0 <std+0x38>)
 800c0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800c0ce:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <std+0x3c>)
 800c0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0d2:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <std+0x40>)
 800c0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <std+0x44>)
 800c0d8:	6224      	str	r4, [r4, #32]
 800c0da:	6323      	str	r3, [r4, #48]	; 0x30
 800c0dc:	bd10      	pop	{r4, pc}
 800c0de:	bf00      	nop
 800c0e0:	0800c249 	.word	0x0800c249
 800c0e4:	0800c26b 	.word	0x0800c26b
 800c0e8:	0800c2a3 	.word	0x0800c2a3
 800c0ec:	0800c2c7 	.word	0x0800c2c7

0800c0f0 <stdio_exit_handler>:
 800c0f0:	4a02      	ldr	r2, [pc, #8]	; (800c0fc <stdio_exit_handler+0xc>)
 800c0f2:	4903      	ldr	r1, [pc, #12]	; (800c100 <stdio_exit_handler+0x10>)
 800c0f4:	4803      	ldr	r0, [pc, #12]	; (800c104 <stdio_exit_handler+0x14>)
 800c0f6:	f000 b869 	b.w	800c1cc <_fwalk_sglue>
 800c0fa:	bf00      	nop
 800c0fc:	20000014 	.word	0x20000014
 800c100:	0800de41 	.word	0x0800de41
 800c104:	20000020 	.word	0x20000020

0800c108 <cleanup_stdio>:
 800c108:	6841      	ldr	r1, [r0, #4]
 800c10a:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <cleanup_stdio+0x34>)
 800c10c:	4299      	cmp	r1, r3
 800c10e:	b510      	push	{r4, lr}
 800c110:	4604      	mov	r4, r0
 800c112:	d001      	beq.n	800c118 <cleanup_stdio+0x10>
 800c114:	f001 fe94 	bl	800de40 <_fflush_r>
 800c118:	68a1      	ldr	r1, [r4, #8]
 800c11a:	4b09      	ldr	r3, [pc, #36]	; (800c140 <cleanup_stdio+0x38>)
 800c11c:	4299      	cmp	r1, r3
 800c11e:	d002      	beq.n	800c126 <cleanup_stdio+0x1e>
 800c120:	4620      	mov	r0, r4
 800c122:	f001 fe8d 	bl	800de40 <_fflush_r>
 800c126:	68e1      	ldr	r1, [r4, #12]
 800c128:	4b06      	ldr	r3, [pc, #24]	; (800c144 <cleanup_stdio+0x3c>)
 800c12a:	4299      	cmp	r1, r3
 800c12c:	d004      	beq.n	800c138 <cleanup_stdio+0x30>
 800c12e:	4620      	mov	r0, r4
 800c130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c134:	f001 be84 	b.w	800de40 <_fflush_r>
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	bf00      	nop
 800c13c:	20005284 	.word	0x20005284
 800c140:	200052ec 	.word	0x200052ec
 800c144:	20005354 	.word	0x20005354

0800c148 <global_stdio_init.part.0>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <global_stdio_init.part.0+0x30>)
 800c14c:	4c0b      	ldr	r4, [pc, #44]	; (800c17c <global_stdio_init.part.0+0x34>)
 800c14e:	4a0c      	ldr	r2, [pc, #48]	; (800c180 <global_stdio_init.part.0+0x38>)
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	4620      	mov	r0, r4
 800c154:	2200      	movs	r2, #0
 800c156:	2104      	movs	r1, #4
 800c158:	f7ff ffa6 	bl	800c0a8 <std>
 800c15c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c160:	2201      	movs	r2, #1
 800c162:	2109      	movs	r1, #9
 800c164:	f7ff ffa0 	bl	800c0a8 <std>
 800c168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c16c:	2202      	movs	r2, #2
 800c16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c172:	2112      	movs	r1, #18
 800c174:	f7ff bf98 	b.w	800c0a8 <std>
 800c178:	200053bc 	.word	0x200053bc
 800c17c:	20005284 	.word	0x20005284
 800c180:	0800c0f1 	.word	0x0800c0f1

0800c184 <__sfp_lock_acquire>:
 800c184:	4801      	ldr	r0, [pc, #4]	; (800c18c <__sfp_lock_acquire+0x8>)
 800c186:	f000 b975 	b.w	800c474 <__retarget_lock_acquire_recursive>
 800c18a:	bf00      	nop
 800c18c:	200053c5 	.word	0x200053c5

0800c190 <__sfp_lock_release>:
 800c190:	4801      	ldr	r0, [pc, #4]	; (800c198 <__sfp_lock_release+0x8>)
 800c192:	f000 b970 	b.w	800c476 <__retarget_lock_release_recursive>
 800c196:	bf00      	nop
 800c198:	200053c5 	.word	0x200053c5

0800c19c <__sinit>:
 800c19c:	b510      	push	{r4, lr}
 800c19e:	4604      	mov	r4, r0
 800c1a0:	f7ff fff0 	bl	800c184 <__sfp_lock_acquire>
 800c1a4:	6a23      	ldr	r3, [r4, #32]
 800c1a6:	b11b      	cbz	r3, 800c1b0 <__sinit+0x14>
 800c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ac:	f7ff bff0 	b.w	800c190 <__sfp_lock_release>
 800c1b0:	4b04      	ldr	r3, [pc, #16]	; (800c1c4 <__sinit+0x28>)
 800c1b2:	6223      	str	r3, [r4, #32]
 800c1b4:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <__sinit+0x2c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1f5      	bne.n	800c1a8 <__sinit+0xc>
 800c1bc:	f7ff ffc4 	bl	800c148 <global_stdio_init.part.0>
 800c1c0:	e7f2      	b.n	800c1a8 <__sinit+0xc>
 800c1c2:	bf00      	nop
 800c1c4:	0800c109 	.word	0x0800c109
 800c1c8:	200053bc 	.word	0x200053bc

0800c1cc <_fwalk_sglue>:
 800c1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d0:	4607      	mov	r7, r0
 800c1d2:	4688      	mov	r8, r1
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1dc:	f1b9 0901 	subs.w	r9, r9, #1
 800c1e0:	d505      	bpl.n	800c1ee <_fwalk_sglue+0x22>
 800c1e2:	6824      	ldr	r4, [r4, #0]
 800c1e4:	2c00      	cmp	r4, #0
 800c1e6:	d1f7      	bne.n	800c1d8 <_fwalk_sglue+0xc>
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d907      	bls.n	800c204 <_fwalk_sglue+0x38>
 800c1f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	d003      	beq.n	800c204 <_fwalk_sglue+0x38>
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	4638      	mov	r0, r7
 800c200:	47c0      	blx	r8
 800c202:	4306      	orrs	r6, r0
 800c204:	3568      	adds	r5, #104	; 0x68
 800c206:	e7e9      	b.n	800c1dc <_fwalk_sglue+0x10>

0800c208 <siprintf>:
 800c208:	b40e      	push	{r1, r2, r3}
 800c20a:	b500      	push	{lr}
 800c20c:	b09c      	sub	sp, #112	; 0x70
 800c20e:	ab1d      	add	r3, sp, #116	; 0x74
 800c210:	9002      	str	r0, [sp, #8]
 800c212:	9006      	str	r0, [sp, #24]
 800c214:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c218:	4809      	ldr	r0, [pc, #36]	; (800c240 <siprintf+0x38>)
 800c21a:	9107      	str	r1, [sp, #28]
 800c21c:	9104      	str	r1, [sp, #16]
 800c21e:	4909      	ldr	r1, [pc, #36]	; (800c244 <siprintf+0x3c>)
 800c220:	f853 2b04 	ldr.w	r2, [r3], #4
 800c224:	9105      	str	r1, [sp, #20]
 800c226:	6800      	ldr	r0, [r0, #0]
 800c228:	9301      	str	r3, [sp, #4]
 800c22a:	a902      	add	r1, sp, #8
 800c22c:	f001 fc84 	bl	800db38 <_svfiprintf_r>
 800c230:	9b02      	ldr	r3, [sp, #8]
 800c232:	2200      	movs	r2, #0
 800c234:	701a      	strb	r2, [r3, #0]
 800c236:	b01c      	add	sp, #112	; 0x70
 800c238:	f85d eb04 	ldr.w	lr, [sp], #4
 800c23c:	b003      	add	sp, #12
 800c23e:	4770      	bx	lr
 800c240:	2000006c 	.word	0x2000006c
 800c244:	ffff0208 	.word	0xffff0208

0800c248 <__sread>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	460c      	mov	r4, r1
 800c24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c250:	f000 f8c2 	bl	800c3d8 <_read_r>
 800c254:	2800      	cmp	r0, #0
 800c256:	bfab      	itete	ge
 800c258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c25a:	89a3      	ldrhlt	r3, [r4, #12]
 800c25c:	181b      	addge	r3, r3, r0
 800c25e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c262:	bfac      	ite	ge
 800c264:	6563      	strge	r3, [r4, #84]	; 0x54
 800c266:	81a3      	strhlt	r3, [r4, #12]
 800c268:	bd10      	pop	{r4, pc}

0800c26a <__swrite>:
 800c26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c26e:	461f      	mov	r7, r3
 800c270:	898b      	ldrh	r3, [r1, #12]
 800c272:	05db      	lsls	r3, r3, #23
 800c274:	4605      	mov	r5, r0
 800c276:	460c      	mov	r4, r1
 800c278:	4616      	mov	r6, r2
 800c27a:	d505      	bpl.n	800c288 <__swrite+0x1e>
 800c27c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c280:	2302      	movs	r3, #2
 800c282:	2200      	movs	r2, #0
 800c284:	f000 f896 	bl	800c3b4 <_lseek_r>
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c28e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	4632      	mov	r2, r6
 800c296:	463b      	mov	r3, r7
 800c298:	4628      	mov	r0, r5
 800c29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c29e:	f000 b8ad 	b.w	800c3fc <_write_r>

0800c2a2 <__sseek>:
 800c2a2:	b510      	push	{r4, lr}
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2aa:	f000 f883 	bl	800c3b4 <_lseek_r>
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	bf15      	itete	ne
 800c2b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2be:	81a3      	strheq	r3, [r4, #12]
 800c2c0:	bf18      	it	ne
 800c2c2:	81a3      	strhne	r3, [r4, #12]
 800c2c4:	bd10      	pop	{r4, pc}

0800c2c6 <__sclose>:
 800c2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ca:	f000 b80d 	b.w	800c2e8 <_close_r>

0800c2ce <memset>:
 800c2ce:	4402      	add	r2, r0
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d100      	bne.n	800c2d8 <memset+0xa>
 800c2d6:	4770      	bx	lr
 800c2d8:	f803 1b01 	strb.w	r1, [r3], #1
 800c2dc:	e7f9      	b.n	800c2d2 <memset+0x4>
	...

0800c2e0 <_localeconv_r>:
 800c2e0:	4800      	ldr	r0, [pc, #0]	; (800c2e4 <_localeconv_r+0x4>)
 800c2e2:	4770      	bx	lr
 800c2e4:	20000160 	.word	0x20000160

0800c2e8 <_close_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d06      	ldr	r5, [pc, #24]	; (800c304 <_close_r+0x1c>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	602b      	str	r3, [r5, #0]
 800c2f4:	f7f7 fc83 	bl	8003bfe <_close>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_close_r+0x1a>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_close_r+0x1a>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	200053c0 	.word	0x200053c0

0800c308 <_reclaim_reent>:
 800c308:	4b29      	ldr	r3, [pc, #164]	; (800c3b0 <_reclaim_reent+0xa8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4283      	cmp	r3, r0
 800c30e:	b570      	push	{r4, r5, r6, lr}
 800c310:	4604      	mov	r4, r0
 800c312:	d04b      	beq.n	800c3ac <_reclaim_reent+0xa4>
 800c314:	69c3      	ldr	r3, [r0, #28]
 800c316:	b143      	cbz	r3, 800c32a <_reclaim_reent+0x22>
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d144      	bne.n	800c3a8 <_reclaim_reent+0xa0>
 800c31e:	69e3      	ldr	r3, [r4, #28]
 800c320:	6819      	ldr	r1, [r3, #0]
 800c322:	b111      	cbz	r1, 800c32a <_reclaim_reent+0x22>
 800c324:	4620      	mov	r0, r4
 800c326:	f000 ff31 	bl	800d18c <_free_r>
 800c32a:	6961      	ldr	r1, [r4, #20]
 800c32c:	b111      	cbz	r1, 800c334 <_reclaim_reent+0x2c>
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 ff2c 	bl	800d18c <_free_r>
 800c334:	69e1      	ldr	r1, [r4, #28]
 800c336:	b111      	cbz	r1, 800c33e <_reclaim_reent+0x36>
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 ff27 	bl	800d18c <_free_r>
 800c33e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c340:	b111      	cbz	r1, 800c348 <_reclaim_reent+0x40>
 800c342:	4620      	mov	r0, r4
 800c344:	f000 ff22 	bl	800d18c <_free_r>
 800c348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c34a:	b111      	cbz	r1, 800c352 <_reclaim_reent+0x4a>
 800c34c:	4620      	mov	r0, r4
 800c34e:	f000 ff1d 	bl	800d18c <_free_r>
 800c352:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c354:	b111      	cbz	r1, 800c35c <_reclaim_reent+0x54>
 800c356:	4620      	mov	r0, r4
 800c358:	f000 ff18 	bl	800d18c <_free_r>
 800c35c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c35e:	b111      	cbz	r1, 800c366 <_reclaim_reent+0x5e>
 800c360:	4620      	mov	r0, r4
 800c362:	f000 ff13 	bl	800d18c <_free_r>
 800c366:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c368:	b111      	cbz	r1, 800c370 <_reclaim_reent+0x68>
 800c36a:	4620      	mov	r0, r4
 800c36c:	f000 ff0e 	bl	800d18c <_free_r>
 800c370:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c372:	b111      	cbz	r1, 800c37a <_reclaim_reent+0x72>
 800c374:	4620      	mov	r0, r4
 800c376:	f000 ff09 	bl	800d18c <_free_r>
 800c37a:	6a23      	ldr	r3, [r4, #32]
 800c37c:	b1b3      	cbz	r3, 800c3ac <_reclaim_reent+0xa4>
 800c37e:	4620      	mov	r0, r4
 800c380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c384:	4718      	bx	r3
 800c386:	5949      	ldr	r1, [r1, r5]
 800c388:	b941      	cbnz	r1, 800c39c <_reclaim_reent+0x94>
 800c38a:	3504      	adds	r5, #4
 800c38c:	69e3      	ldr	r3, [r4, #28]
 800c38e:	2d80      	cmp	r5, #128	; 0x80
 800c390:	68d9      	ldr	r1, [r3, #12]
 800c392:	d1f8      	bne.n	800c386 <_reclaim_reent+0x7e>
 800c394:	4620      	mov	r0, r4
 800c396:	f000 fef9 	bl	800d18c <_free_r>
 800c39a:	e7c0      	b.n	800c31e <_reclaim_reent+0x16>
 800c39c:	680e      	ldr	r6, [r1, #0]
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 fef4 	bl	800d18c <_free_r>
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	e7ef      	b.n	800c388 <_reclaim_reent+0x80>
 800c3a8:	2500      	movs	r5, #0
 800c3aa:	e7ef      	b.n	800c38c <_reclaim_reent+0x84>
 800c3ac:	bd70      	pop	{r4, r5, r6, pc}
 800c3ae:	bf00      	nop
 800c3b0:	2000006c 	.word	0x2000006c

0800c3b4 <_lseek_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4d07      	ldr	r5, [pc, #28]	; (800c3d4 <_lseek_r+0x20>)
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	4608      	mov	r0, r1
 800c3bc:	4611      	mov	r1, r2
 800c3be:	2200      	movs	r2, #0
 800c3c0:	602a      	str	r2, [r5, #0]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	f7f7 fc42 	bl	8003c4c <_lseek>
 800c3c8:	1c43      	adds	r3, r0, #1
 800c3ca:	d102      	bne.n	800c3d2 <_lseek_r+0x1e>
 800c3cc:	682b      	ldr	r3, [r5, #0]
 800c3ce:	b103      	cbz	r3, 800c3d2 <_lseek_r+0x1e>
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	bd38      	pop	{r3, r4, r5, pc}
 800c3d4:	200053c0 	.word	0x200053c0

0800c3d8 <_read_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4d07      	ldr	r5, [pc, #28]	; (800c3f8 <_read_r+0x20>)
 800c3dc:	4604      	mov	r4, r0
 800c3de:	4608      	mov	r0, r1
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	602a      	str	r2, [r5, #0]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	f7f7 fbd0 	bl	8003b8c <_read>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d102      	bne.n	800c3f6 <_read_r+0x1e>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	b103      	cbz	r3, 800c3f6 <_read_r+0x1e>
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	200053c0 	.word	0x200053c0

0800c3fc <_write_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d07      	ldr	r5, [pc, #28]	; (800c41c <_write_r+0x20>)
 800c400:	4604      	mov	r4, r0
 800c402:	4608      	mov	r0, r1
 800c404:	4611      	mov	r1, r2
 800c406:	2200      	movs	r2, #0
 800c408:	602a      	str	r2, [r5, #0]
 800c40a:	461a      	mov	r2, r3
 800c40c:	f7f7 fbdb 	bl	8003bc6 <_write>
 800c410:	1c43      	adds	r3, r0, #1
 800c412:	d102      	bne.n	800c41a <_write_r+0x1e>
 800c414:	682b      	ldr	r3, [r5, #0]
 800c416:	b103      	cbz	r3, 800c41a <_write_r+0x1e>
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	200053c0 	.word	0x200053c0

0800c420 <__errno>:
 800c420:	4b01      	ldr	r3, [pc, #4]	; (800c428 <__errno+0x8>)
 800c422:	6818      	ldr	r0, [r3, #0]
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	2000006c 	.word	0x2000006c

0800c42c <__libc_init_array>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	4d0d      	ldr	r5, [pc, #52]	; (800c464 <__libc_init_array+0x38>)
 800c430:	4c0d      	ldr	r4, [pc, #52]	; (800c468 <__libc_init_array+0x3c>)
 800c432:	1b64      	subs	r4, r4, r5
 800c434:	10a4      	asrs	r4, r4, #2
 800c436:	2600      	movs	r6, #0
 800c438:	42a6      	cmp	r6, r4
 800c43a:	d109      	bne.n	800c450 <__libc_init_array+0x24>
 800c43c:	4d0b      	ldr	r5, [pc, #44]	; (800c46c <__libc_init_array+0x40>)
 800c43e:	4c0c      	ldr	r4, [pc, #48]	; (800c470 <__libc_init_array+0x44>)
 800c440:	f002 f894 	bl	800e56c <_init>
 800c444:	1b64      	subs	r4, r4, r5
 800c446:	10a4      	asrs	r4, r4, #2
 800c448:	2600      	movs	r6, #0
 800c44a:	42a6      	cmp	r6, r4
 800c44c:	d105      	bne.n	800c45a <__libc_init_array+0x2e>
 800c44e:	bd70      	pop	{r4, r5, r6, pc}
 800c450:	f855 3b04 	ldr.w	r3, [r5], #4
 800c454:	4798      	blx	r3
 800c456:	3601      	adds	r6, #1
 800c458:	e7ee      	b.n	800c438 <__libc_init_array+0xc>
 800c45a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c45e:	4798      	blx	r3
 800c460:	3601      	adds	r6, #1
 800c462:	e7f2      	b.n	800c44a <__libc_init_array+0x1e>
 800c464:	0800f554 	.word	0x0800f554
 800c468:	0800f554 	.word	0x0800f554
 800c46c:	0800f554 	.word	0x0800f554
 800c470:	0800f558 	.word	0x0800f558

0800c474 <__retarget_lock_acquire_recursive>:
 800c474:	4770      	bx	lr

0800c476 <__retarget_lock_release_recursive>:
 800c476:	4770      	bx	lr

0800c478 <memcpy>:
 800c478:	440a      	add	r2, r1
 800c47a:	4291      	cmp	r1, r2
 800c47c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c480:	d100      	bne.n	800c484 <memcpy+0xc>
 800c482:	4770      	bx	lr
 800c484:	b510      	push	{r4, lr}
 800c486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c48a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c48e:	4291      	cmp	r1, r2
 800c490:	d1f9      	bne.n	800c486 <memcpy+0xe>
 800c492:	bd10      	pop	{r4, pc}

0800c494 <quorem>:
 800c494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	6903      	ldr	r3, [r0, #16]
 800c49a:	690c      	ldr	r4, [r1, #16]
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	4607      	mov	r7, r0
 800c4a0:	db7e      	blt.n	800c5a0 <quorem+0x10c>
 800c4a2:	3c01      	subs	r4, #1
 800c4a4:	f101 0814 	add.w	r8, r1, #20
 800c4a8:	f100 0514 	add.w	r5, r0, #20
 800c4ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4b0:	9301      	str	r3, [sp, #4]
 800c4b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c4c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4ca:	d331      	bcc.n	800c530 <quorem+0x9c>
 800c4cc:	f04f 0e00 	mov.w	lr, #0
 800c4d0:	4640      	mov	r0, r8
 800c4d2:	46ac      	mov	ip, r5
 800c4d4:	46f2      	mov	sl, lr
 800c4d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c4da:	b293      	uxth	r3, r2
 800c4dc:	fb06 e303 	mla	r3, r6, r3, lr
 800c4e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c4e4:	0c1a      	lsrs	r2, r3, #16
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	ebaa 0303 	sub.w	r3, sl, r3
 800c4ec:	f8dc a000 	ldr.w	sl, [ip]
 800c4f0:	fa13 f38a 	uxtah	r3, r3, sl
 800c4f4:	fb06 220e 	mla	r2, r6, lr, r2
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c500:	b292      	uxth	r2, r2
 800c502:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c506:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c50a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c50e:	4581      	cmp	r9, r0
 800c510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c514:	f84c 3b04 	str.w	r3, [ip], #4
 800c518:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c51c:	d2db      	bcs.n	800c4d6 <quorem+0x42>
 800c51e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c522:	b92b      	cbnz	r3, 800c530 <quorem+0x9c>
 800c524:	9b01      	ldr	r3, [sp, #4]
 800c526:	3b04      	subs	r3, #4
 800c528:	429d      	cmp	r5, r3
 800c52a:	461a      	mov	r2, r3
 800c52c:	d32c      	bcc.n	800c588 <quorem+0xf4>
 800c52e:	613c      	str	r4, [r7, #16]
 800c530:	4638      	mov	r0, r7
 800c532:	f001 f9a7 	bl	800d884 <__mcmp>
 800c536:	2800      	cmp	r0, #0
 800c538:	db22      	blt.n	800c580 <quorem+0xec>
 800c53a:	3601      	adds	r6, #1
 800c53c:	4629      	mov	r1, r5
 800c53e:	2000      	movs	r0, #0
 800c540:	f858 2b04 	ldr.w	r2, [r8], #4
 800c544:	f8d1 c000 	ldr.w	ip, [r1]
 800c548:	b293      	uxth	r3, r2
 800c54a:	1ac3      	subs	r3, r0, r3
 800c54c:	0c12      	lsrs	r2, r2, #16
 800c54e:	fa13 f38c 	uxtah	r3, r3, ip
 800c552:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c556:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c560:	45c1      	cmp	r9, r8
 800c562:	f841 3b04 	str.w	r3, [r1], #4
 800c566:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c56a:	d2e9      	bcs.n	800c540 <quorem+0xac>
 800c56c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c570:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c574:	b922      	cbnz	r2, 800c580 <quorem+0xec>
 800c576:	3b04      	subs	r3, #4
 800c578:	429d      	cmp	r5, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	d30a      	bcc.n	800c594 <quorem+0x100>
 800c57e:	613c      	str	r4, [r7, #16]
 800c580:	4630      	mov	r0, r6
 800c582:	b003      	add	sp, #12
 800c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c588:	6812      	ldr	r2, [r2, #0]
 800c58a:	3b04      	subs	r3, #4
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	d1ce      	bne.n	800c52e <quorem+0x9a>
 800c590:	3c01      	subs	r4, #1
 800c592:	e7c9      	b.n	800c528 <quorem+0x94>
 800c594:	6812      	ldr	r2, [r2, #0]
 800c596:	3b04      	subs	r3, #4
 800c598:	2a00      	cmp	r2, #0
 800c59a:	d1f0      	bne.n	800c57e <quorem+0xea>
 800c59c:	3c01      	subs	r4, #1
 800c59e:	e7eb      	b.n	800c578 <quorem+0xe4>
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	e7ee      	b.n	800c582 <quorem+0xee>
 800c5a4:	0000      	movs	r0, r0
	...

0800c5a8 <_dtoa_r>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	ed2d 8b04 	vpush	{d8-d9}
 800c5b0:	69c5      	ldr	r5, [r0, #28]
 800c5b2:	b093      	sub	sp, #76	; 0x4c
 800c5b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c5b8:	ec57 6b10 	vmov	r6, r7, d0
 800c5bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c5c0:	9107      	str	r1, [sp, #28]
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	920a      	str	r2, [sp, #40]	; 0x28
 800c5c6:	930d      	str	r3, [sp, #52]	; 0x34
 800c5c8:	b975      	cbnz	r5, 800c5e8 <_dtoa_r+0x40>
 800c5ca:	2010      	movs	r0, #16
 800c5cc:	f000 fe2a 	bl	800d224 <malloc>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	61e0      	str	r0, [r4, #28]
 800c5d4:	b920      	cbnz	r0, 800c5e0 <_dtoa_r+0x38>
 800c5d6:	4bae      	ldr	r3, [pc, #696]	; (800c890 <_dtoa_r+0x2e8>)
 800c5d8:	21ef      	movs	r1, #239	; 0xef
 800c5da:	48ae      	ldr	r0, [pc, #696]	; (800c894 <_dtoa_r+0x2ec>)
 800c5dc:	f001 fc82 	bl	800dee4 <__assert_func>
 800c5e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5e4:	6005      	str	r5, [r0, #0]
 800c5e6:	60c5      	str	r5, [r0, #12]
 800c5e8:	69e3      	ldr	r3, [r4, #28]
 800c5ea:	6819      	ldr	r1, [r3, #0]
 800c5ec:	b151      	cbz	r1, 800c604 <_dtoa_r+0x5c>
 800c5ee:	685a      	ldr	r2, [r3, #4]
 800c5f0:	604a      	str	r2, [r1, #4]
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	4093      	lsls	r3, r2
 800c5f6:	608b      	str	r3, [r1, #8]
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	f000 ff07 	bl	800d40c <_Bfree>
 800c5fe:	69e3      	ldr	r3, [r4, #28]
 800c600:	2200      	movs	r2, #0
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	1e3b      	subs	r3, r7, #0
 800c606:	bfbb      	ittet	lt
 800c608:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c60c:	9303      	strlt	r3, [sp, #12]
 800c60e:	2300      	movge	r3, #0
 800c610:	2201      	movlt	r2, #1
 800c612:	bfac      	ite	ge
 800c614:	f8c8 3000 	strge.w	r3, [r8]
 800c618:	f8c8 2000 	strlt.w	r2, [r8]
 800c61c:	4b9e      	ldr	r3, [pc, #632]	; (800c898 <_dtoa_r+0x2f0>)
 800c61e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c622:	ea33 0308 	bics.w	r3, r3, r8
 800c626:	d11b      	bne.n	800c660 <_dtoa_r+0xb8>
 800c628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c62a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c634:	4333      	orrs	r3, r6
 800c636:	f000 8593 	beq.w	800d160 <_dtoa_r+0xbb8>
 800c63a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c63c:	b963      	cbnz	r3, 800c658 <_dtoa_r+0xb0>
 800c63e:	4b97      	ldr	r3, [pc, #604]	; (800c89c <_dtoa_r+0x2f4>)
 800c640:	e027      	b.n	800c692 <_dtoa_r+0xea>
 800c642:	4b97      	ldr	r3, [pc, #604]	; (800c8a0 <_dtoa_r+0x2f8>)
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	3308      	adds	r3, #8
 800c648:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	9800      	ldr	r0, [sp, #0]
 800c64e:	b013      	add	sp, #76	; 0x4c
 800c650:	ecbd 8b04 	vpop	{d8-d9}
 800c654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c658:	4b90      	ldr	r3, [pc, #576]	; (800c89c <_dtoa_r+0x2f4>)
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	3303      	adds	r3, #3
 800c65e:	e7f3      	b.n	800c648 <_dtoa_r+0xa0>
 800c660:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c664:	2200      	movs	r2, #0
 800c666:	ec51 0b17 	vmov	r0, r1, d7
 800c66a:	eeb0 8a47 	vmov.f32	s16, s14
 800c66e:	eef0 8a67 	vmov.f32	s17, s15
 800c672:	2300      	movs	r3, #0
 800c674:	f7f4 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 800c678:	4681      	mov	r9, r0
 800c67a:	b160      	cbz	r0, 800c696 <_dtoa_r+0xee>
 800c67c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c67e:	2301      	movs	r3, #1
 800c680:	6013      	str	r3, [r2, #0]
 800c682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 8568 	beq.w	800d15a <_dtoa_r+0xbb2>
 800c68a:	4b86      	ldr	r3, [pc, #536]	; (800c8a4 <_dtoa_r+0x2fc>)
 800c68c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	3b01      	subs	r3, #1
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	e7da      	b.n	800c64c <_dtoa_r+0xa4>
 800c696:	aa10      	add	r2, sp, #64	; 0x40
 800c698:	a911      	add	r1, sp, #68	; 0x44
 800c69a:	4620      	mov	r0, r4
 800c69c:	eeb0 0a48 	vmov.f32	s0, s16
 800c6a0:	eef0 0a68 	vmov.f32	s1, s17
 800c6a4:	f001 f994 	bl	800d9d0 <__d2b>
 800c6a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c6ac:	4682      	mov	sl, r0
 800c6ae:	2d00      	cmp	r5, #0
 800c6b0:	d07f      	beq.n	800c7b2 <_dtoa_r+0x20a>
 800c6b2:	ee18 3a90 	vmov	r3, s17
 800c6b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c6be:	ec51 0b18 	vmov	r0, r1, d8
 800c6c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c6ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	4b75      	ldr	r3, [pc, #468]	; (800c8a8 <_dtoa_r+0x300>)
 800c6d4:	f7f3 fdd8 	bl	8000288 <__aeabi_dsub>
 800c6d8:	a367      	add	r3, pc, #412	; (adr r3, 800c878 <_dtoa_r+0x2d0>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f3 ff8b 	bl	80005f8 <__aeabi_dmul>
 800c6e2:	a367      	add	r3, pc, #412	; (adr r3, 800c880 <_dtoa_r+0x2d8>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	f7f3 fdd0 	bl	800028c <__adddf3>
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	460f      	mov	r7, r1
 800c6f2:	f7f3 ff17 	bl	8000524 <__aeabi_i2d>
 800c6f6:	a364      	add	r3, pc, #400	; (adr r3, 800c888 <_dtoa_r+0x2e0>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 ff7c 	bl	80005f8 <__aeabi_dmul>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4630      	mov	r0, r6
 800c706:	4639      	mov	r1, r7
 800c708:	f7f3 fdc0 	bl	800028c <__adddf3>
 800c70c:	4606      	mov	r6, r0
 800c70e:	460f      	mov	r7, r1
 800c710:	f7f4 fa22 	bl	8000b58 <__aeabi_d2iz>
 800c714:	2200      	movs	r2, #0
 800c716:	4683      	mov	fp, r0
 800c718:	2300      	movs	r3, #0
 800c71a:	4630      	mov	r0, r6
 800c71c:	4639      	mov	r1, r7
 800c71e:	f7f4 f9dd 	bl	8000adc <__aeabi_dcmplt>
 800c722:	b148      	cbz	r0, 800c738 <_dtoa_r+0x190>
 800c724:	4658      	mov	r0, fp
 800c726:	f7f3 fefd 	bl	8000524 <__aeabi_i2d>
 800c72a:	4632      	mov	r2, r6
 800c72c:	463b      	mov	r3, r7
 800c72e:	f7f4 f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c732:	b908      	cbnz	r0, 800c738 <_dtoa_r+0x190>
 800c734:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c738:	f1bb 0f16 	cmp.w	fp, #22
 800c73c:	d857      	bhi.n	800c7ee <_dtoa_r+0x246>
 800c73e:	4b5b      	ldr	r3, [pc, #364]	; (800c8ac <_dtoa_r+0x304>)
 800c740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	ec51 0b18 	vmov	r0, r1, d8
 800c74c:	f7f4 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800c750:	2800      	cmp	r0, #0
 800c752:	d04e      	beq.n	800c7f2 <_dtoa_r+0x24a>
 800c754:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c758:	2300      	movs	r3, #0
 800c75a:	930c      	str	r3, [sp, #48]	; 0x30
 800c75c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c75e:	1b5b      	subs	r3, r3, r5
 800c760:	1e5a      	subs	r2, r3, #1
 800c762:	bf45      	ittet	mi
 800c764:	f1c3 0301 	rsbmi	r3, r3, #1
 800c768:	9305      	strmi	r3, [sp, #20]
 800c76a:	2300      	movpl	r3, #0
 800c76c:	2300      	movmi	r3, #0
 800c76e:	9206      	str	r2, [sp, #24]
 800c770:	bf54      	ite	pl
 800c772:	9305      	strpl	r3, [sp, #20]
 800c774:	9306      	strmi	r3, [sp, #24]
 800c776:	f1bb 0f00 	cmp.w	fp, #0
 800c77a:	db3c      	blt.n	800c7f6 <_dtoa_r+0x24e>
 800c77c:	9b06      	ldr	r3, [sp, #24]
 800c77e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c782:	445b      	add	r3, fp
 800c784:	9306      	str	r3, [sp, #24]
 800c786:	2300      	movs	r3, #0
 800c788:	9308      	str	r3, [sp, #32]
 800c78a:	9b07      	ldr	r3, [sp, #28]
 800c78c:	2b09      	cmp	r3, #9
 800c78e:	d868      	bhi.n	800c862 <_dtoa_r+0x2ba>
 800c790:	2b05      	cmp	r3, #5
 800c792:	bfc4      	itt	gt
 800c794:	3b04      	subgt	r3, #4
 800c796:	9307      	strgt	r3, [sp, #28]
 800c798:	9b07      	ldr	r3, [sp, #28]
 800c79a:	f1a3 0302 	sub.w	r3, r3, #2
 800c79e:	bfcc      	ite	gt
 800c7a0:	2500      	movgt	r5, #0
 800c7a2:	2501      	movle	r5, #1
 800c7a4:	2b03      	cmp	r3, #3
 800c7a6:	f200 8085 	bhi.w	800c8b4 <_dtoa_r+0x30c>
 800c7aa:	e8df f003 	tbb	[pc, r3]
 800c7ae:	3b2e      	.short	0x3b2e
 800c7b0:	5839      	.short	0x5839
 800c7b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c7b6:	441d      	add	r5, r3
 800c7b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c7bc:	2b20      	cmp	r3, #32
 800c7be:	bfc1      	itttt	gt
 800c7c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c7c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c7c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c7cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c7d0:	bfd6      	itet	le
 800c7d2:	f1c3 0320 	rsble	r3, r3, #32
 800c7d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c7da:	fa06 f003 	lslle.w	r0, r6, r3
 800c7de:	f7f3 fe91 	bl	8000504 <__aeabi_ui2d>
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c7e8:	3d01      	subs	r5, #1
 800c7ea:	920e      	str	r2, [sp, #56]	; 0x38
 800c7ec:	e76f      	b.n	800c6ce <_dtoa_r+0x126>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e7b3      	b.n	800c75a <_dtoa_r+0x1b2>
 800c7f2:	900c      	str	r0, [sp, #48]	; 0x30
 800c7f4:	e7b2      	b.n	800c75c <_dtoa_r+0x1b4>
 800c7f6:	9b05      	ldr	r3, [sp, #20]
 800c7f8:	eba3 030b 	sub.w	r3, r3, fp
 800c7fc:	9305      	str	r3, [sp, #20]
 800c7fe:	f1cb 0300 	rsb	r3, fp, #0
 800c802:	9308      	str	r3, [sp, #32]
 800c804:	2300      	movs	r3, #0
 800c806:	930b      	str	r3, [sp, #44]	; 0x2c
 800c808:	e7bf      	b.n	800c78a <_dtoa_r+0x1e2>
 800c80a:	2300      	movs	r3, #0
 800c80c:	9309      	str	r3, [sp, #36]	; 0x24
 800c80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c810:	2b00      	cmp	r3, #0
 800c812:	dc52      	bgt.n	800c8ba <_dtoa_r+0x312>
 800c814:	2301      	movs	r3, #1
 800c816:	9301      	str	r3, [sp, #4]
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	461a      	mov	r2, r3
 800c81c:	920a      	str	r2, [sp, #40]	; 0x28
 800c81e:	e00b      	b.n	800c838 <_dtoa_r+0x290>
 800c820:	2301      	movs	r3, #1
 800c822:	e7f3      	b.n	800c80c <_dtoa_r+0x264>
 800c824:	2300      	movs	r3, #0
 800c826:	9309      	str	r3, [sp, #36]	; 0x24
 800c828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c82a:	445b      	add	r3, fp
 800c82c:	9301      	str	r3, [sp, #4]
 800c82e:	3301      	adds	r3, #1
 800c830:	2b01      	cmp	r3, #1
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	bfb8      	it	lt
 800c836:	2301      	movlt	r3, #1
 800c838:	69e0      	ldr	r0, [r4, #28]
 800c83a:	2100      	movs	r1, #0
 800c83c:	2204      	movs	r2, #4
 800c83e:	f102 0614 	add.w	r6, r2, #20
 800c842:	429e      	cmp	r6, r3
 800c844:	d93d      	bls.n	800c8c2 <_dtoa_r+0x31a>
 800c846:	6041      	str	r1, [r0, #4]
 800c848:	4620      	mov	r0, r4
 800c84a:	f000 fd9f 	bl	800d38c <_Balloc>
 800c84e:	9000      	str	r0, [sp, #0]
 800c850:	2800      	cmp	r0, #0
 800c852:	d139      	bne.n	800c8c8 <_dtoa_r+0x320>
 800c854:	4b16      	ldr	r3, [pc, #88]	; (800c8b0 <_dtoa_r+0x308>)
 800c856:	4602      	mov	r2, r0
 800c858:	f240 11af 	movw	r1, #431	; 0x1af
 800c85c:	e6bd      	b.n	800c5da <_dtoa_r+0x32>
 800c85e:	2301      	movs	r3, #1
 800c860:	e7e1      	b.n	800c826 <_dtoa_r+0x27e>
 800c862:	2501      	movs	r5, #1
 800c864:	2300      	movs	r3, #0
 800c866:	9307      	str	r3, [sp, #28]
 800c868:	9509      	str	r5, [sp, #36]	; 0x24
 800c86a:	f04f 33ff 	mov.w	r3, #4294967295
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	9304      	str	r3, [sp, #16]
 800c872:	2200      	movs	r2, #0
 800c874:	2312      	movs	r3, #18
 800c876:	e7d1      	b.n	800c81c <_dtoa_r+0x274>
 800c878:	636f4361 	.word	0x636f4361
 800c87c:	3fd287a7 	.word	0x3fd287a7
 800c880:	8b60c8b3 	.word	0x8b60c8b3
 800c884:	3fc68a28 	.word	0x3fc68a28
 800c888:	509f79fb 	.word	0x509f79fb
 800c88c:	3fd34413 	.word	0x3fd34413
 800c890:	0800f21d 	.word	0x0800f21d
 800c894:	0800f234 	.word	0x0800f234
 800c898:	7ff00000 	.word	0x7ff00000
 800c89c:	0800f219 	.word	0x0800f219
 800c8a0:	0800f210 	.word	0x0800f210
 800c8a4:	0800f1ed 	.word	0x0800f1ed
 800c8a8:	3ff80000 	.word	0x3ff80000
 800c8ac:	0800f320 	.word	0x0800f320
 800c8b0:	0800f28c 	.word	0x0800f28c
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b8:	e7d7      	b.n	800c86a <_dtoa_r+0x2c2>
 800c8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	9304      	str	r3, [sp, #16]
 800c8c0:	e7ba      	b.n	800c838 <_dtoa_r+0x290>
 800c8c2:	3101      	adds	r1, #1
 800c8c4:	0052      	lsls	r2, r2, #1
 800c8c6:	e7ba      	b.n	800c83e <_dtoa_r+0x296>
 800c8c8:	69e3      	ldr	r3, [r4, #28]
 800c8ca:	9a00      	ldr	r2, [sp, #0]
 800c8cc:	601a      	str	r2, [r3, #0]
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	2b0e      	cmp	r3, #14
 800c8d2:	f200 80a8 	bhi.w	800ca26 <_dtoa_r+0x47e>
 800c8d6:	2d00      	cmp	r5, #0
 800c8d8:	f000 80a5 	beq.w	800ca26 <_dtoa_r+0x47e>
 800c8dc:	f1bb 0f00 	cmp.w	fp, #0
 800c8e0:	dd38      	ble.n	800c954 <_dtoa_r+0x3ac>
 800c8e2:	4bc0      	ldr	r3, [pc, #768]	; (800cbe4 <_dtoa_r+0x63c>)
 800c8e4:	f00b 020f 	and.w	r2, fp, #15
 800c8e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c8f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c8f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c8f8:	d019      	beq.n	800c92e <_dtoa_r+0x386>
 800c8fa:	4bbb      	ldr	r3, [pc, #748]	; (800cbe8 <_dtoa_r+0x640>)
 800c8fc:	ec51 0b18 	vmov	r0, r1, d8
 800c900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c904:	f7f3 ffa2 	bl	800084c <__aeabi_ddiv>
 800c908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c90c:	f008 080f 	and.w	r8, r8, #15
 800c910:	2503      	movs	r5, #3
 800c912:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cbe8 <_dtoa_r+0x640>
 800c916:	f1b8 0f00 	cmp.w	r8, #0
 800c91a:	d10a      	bne.n	800c932 <_dtoa_r+0x38a>
 800c91c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c920:	4632      	mov	r2, r6
 800c922:	463b      	mov	r3, r7
 800c924:	f7f3 ff92 	bl	800084c <__aeabi_ddiv>
 800c928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c92c:	e02b      	b.n	800c986 <_dtoa_r+0x3de>
 800c92e:	2502      	movs	r5, #2
 800c930:	e7ef      	b.n	800c912 <_dtoa_r+0x36a>
 800c932:	f018 0f01 	tst.w	r8, #1
 800c936:	d008      	beq.n	800c94a <_dtoa_r+0x3a2>
 800c938:	4630      	mov	r0, r6
 800c93a:	4639      	mov	r1, r7
 800c93c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c940:	f7f3 fe5a 	bl	80005f8 <__aeabi_dmul>
 800c944:	3501      	adds	r5, #1
 800c946:	4606      	mov	r6, r0
 800c948:	460f      	mov	r7, r1
 800c94a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c94e:	f109 0908 	add.w	r9, r9, #8
 800c952:	e7e0      	b.n	800c916 <_dtoa_r+0x36e>
 800c954:	f000 809f 	beq.w	800ca96 <_dtoa_r+0x4ee>
 800c958:	f1cb 0600 	rsb	r6, fp, #0
 800c95c:	4ba1      	ldr	r3, [pc, #644]	; (800cbe4 <_dtoa_r+0x63c>)
 800c95e:	4fa2      	ldr	r7, [pc, #648]	; (800cbe8 <_dtoa_r+0x640>)
 800c960:	f006 020f 	and.w	r2, r6, #15
 800c964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	ec51 0b18 	vmov	r0, r1, d8
 800c970:	f7f3 fe42 	bl	80005f8 <__aeabi_dmul>
 800c974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c978:	1136      	asrs	r6, r6, #4
 800c97a:	2300      	movs	r3, #0
 800c97c:	2502      	movs	r5, #2
 800c97e:	2e00      	cmp	r6, #0
 800c980:	d17e      	bne.n	800ca80 <_dtoa_r+0x4d8>
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1d0      	bne.n	800c928 <_dtoa_r+0x380>
 800c986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c988:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 8084 	beq.w	800ca9a <_dtoa_r+0x4f2>
 800c992:	4b96      	ldr	r3, [pc, #600]	; (800cbec <_dtoa_r+0x644>)
 800c994:	2200      	movs	r2, #0
 800c996:	4640      	mov	r0, r8
 800c998:	4649      	mov	r1, r9
 800c99a:	f7f4 f89f 	bl	8000adc <__aeabi_dcmplt>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d07b      	beq.n	800ca9a <_dtoa_r+0x4f2>
 800c9a2:	9b04      	ldr	r3, [sp, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d078      	beq.n	800ca9a <_dtoa_r+0x4f2>
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	dd39      	ble.n	800ca22 <_dtoa_r+0x47a>
 800c9ae:	4b90      	ldr	r3, [pc, #576]	; (800cbf0 <_dtoa_r+0x648>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	4649      	mov	r1, r9
 800c9b6:	f7f3 fe1f 	bl	80005f8 <__aeabi_dmul>
 800c9ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9be:	9e01      	ldr	r6, [sp, #4]
 800c9c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c9c4:	3501      	adds	r5, #1
 800c9c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f7f3 fdaa 	bl	8000524 <__aeabi_i2d>
 800c9d0:	4642      	mov	r2, r8
 800c9d2:	464b      	mov	r3, r9
 800c9d4:	f7f3 fe10 	bl	80005f8 <__aeabi_dmul>
 800c9d8:	4b86      	ldr	r3, [pc, #536]	; (800cbf4 <_dtoa_r+0x64c>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f7f3 fc56 	bl	800028c <__adddf3>
 800c9e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9e8:	9303      	str	r3, [sp, #12]
 800c9ea:	2e00      	cmp	r6, #0
 800c9ec:	d158      	bne.n	800caa0 <_dtoa_r+0x4f8>
 800c9ee:	4b82      	ldr	r3, [pc, #520]	; (800cbf8 <_dtoa_r+0x650>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	f7f3 fc47 	bl	8000288 <__aeabi_dsub>
 800c9fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9fe:	4680      	mov	r8, r0
 800ca00:	4689      	mov	r9, r1
 800ca02:	f7f4 f889 	bl	8000b18 <__aeabi_dcmpgt>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	f040 8296 	bne.w	800cf38 <_dtoa_r+0x990>
 800ca0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca10:	4640      	mov	r0, r8
 800ca12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca16:	4649      	mov	r1, r9
 800ca18:	f7f4 f860 	bl	8000adc <__aeabi_dcmplt>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	f040 8289 	bne.w	800cf34 <_dtoa_r+0x98c>
 800ca22:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f2c0 814e 	blt.w	800ccca <_dtoa_r+0x722>
 800ca2e:	f1bb 0f0e 	cmp.w	fp, #14
 800ca32:	f300 814a 	bgt.w	800ccca <_dtoa_r+0x722>
 800ca36:	4b6b      	ldr	r3, [pc, #428]	; (800cbe4 <_dtoa_r+0x63c>)
 800ca38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f280 80dc 	bge.w	800cc00 <_dtoa_r+0x658>
 800ca48:	9b04      	ldr	r3, [sp, #16]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f300 80d8 	bgt.w	800cc00 <_dtoa_r+0x658>
 800ca50:	f040 826f 	bne.w	800cf32 <_dtoa_r+0x98a>
 800ca54:	4b68      	ldr	r3, [pc, #416]	; (800cbf8 <_dtoa_r+0x650>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	4640      	mov	r0, r8
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	f7f3 fdcc 	bl	80005f8 <__aeabi_dmul>
 800ca60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca64:	f7f4 f84e 	bl	8000b04 <__aeabi_dcmpge>
 800ca68:	9e04      	ldr	r6, [sp, #16]
 800ca6a:	4637      	mov	r7, r6
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	f040 8245 	bne.w	800cefc <_dtoa_r+0x954>
 800ca72:	9d00      	ldr	r5, [sp, #0]
 800ca74:	2331      	movs	r3, #49	; 0x31
 800ca76:	f805 3b01 	strb.w	r3, [r5], #1
 800ca7a:	f10b 0b01 	add.w	fp, fp, #1
 800ca7e:	e241      	b.n	800cf04 <_dtoa_r+0x95c>
 800ca80:	07f2      	lsls	r2, r6, #31
 800ca82:	d505      	bpl.n	800ca90 <_dtoa_r+0x4e8>
 800ca84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca88:	f7f3 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	2301      	movs	r3, #1
 800ca90:	1076      	asrs	r6, r6, #1
 800ca92:	3708      	adds	r7, #8
 800ca94:	e773      	b.n	800c97e <_dtoa_r+0x3d6>
 800ca96:	2502      	movs	r5, #2
 800ca98:	e775      	b.n	800c986 <_dtoa_r+0x3de>
 800ca9a:	9e04      	ldr	r6, [sp, #16]
 800ca9c:	465f      	mov	r7, fp
 800ca9e:	e792      	b.n	800c9c6 <_dtoa_r+0x41e>
 800caa0:	9900      	ldr	r1, [sp, #0]
 800caa2:	4b50      	ldr	r3, [pc, #320]	; (800cbe4 <_dtoa_r+0x63c>)
 800caa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800caa8:	4431      	add	r1, r6
 800caaa:	9102      	str	r1, [sp, #8]
 800caac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800caae:	eeb0 9a47 	vmov.f32	s18, s14
 800cab2:	eef0 9a67 	vmov.f32	s19, s15
 800cab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800caba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cabe:	2900      	cmp	r1, #0
 800cac0:	d044      	beq.n	800cb4c <_dtoa_r+0x5a4>
 800cac2:	494e      	ldr	r1, [pc, #312]	; (800cbfc <_dtoa_r+0x654>)
 800cac4:	2000      	movs	r0, #0
 800cac6:	f7f3 fec1 	bl	800084c <__aeabi_ddiv>
 800caca:	ec53 2b19 	vmov	r2, r3, d9
 800cace:	f7f3 fbdb 	bl	8000288 <__aeabi_dsub>
 800cad2:	9d00      	ldr	r5, [sp, #0]
 800cad4:	ec41 0b19 	vmov	d9, r0, r1
 800cad8:	4649      	mov	r1, r9
 800cada:	4640      	mov	r0, r8
 800cadc:	f7f4 f83c 	bl	8000b58 <__aeabi_d2iz>
 800cae0:	4606      	mov	r6, r0
 800cae2:	f7f3 fd1f 	bl	8000524 <__aeabi_i2d>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	4640      	mov	r0, r8
 800caec:	4649      	mov	r1, r9
 800caee:	f7f3 fbcb 	bl	8000288 <__aeabi_dsub>
 800caf2:	3630      	adds	r6, #48	; 0x30
 800caf4:	f805 6b01 	strb.w	r6, [r5], #1
 800caf8:	ec53 2b19 	vmov	r2, r3, d9
 800cafc:	4680      	mov	r8, r0
 800cafe:	4689      	mov	r9, r1
 800cb00:	f7f3 ffec 	bl	8000adc <__aeabi_dcmplt>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d164      	bne.n	800cbd2 <_dtoa_r+0x62a>
 800cb08:	4642      	mov	r2, r8
 800cb0a:	464b      	mov	r3, r9
 800cb0c:	4937      	ldr	r1, [pc, #220]	; (800cbec <_dtoa_r+0x644>)
 800cb0e:	2000      	movs	r0, #0
 800cb10:	f7f3 fbba 	bl	8000288 <__aeabi_dsub>
 800cb14:	ec53 2b19 	vmov	r2, r3, d9
 800cb18:	f7f3 ffe0 	bl	8000adc <__aeabi_dcmplt>
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	f040 80b6 	bne.w	800cc8e <_dtoa_r+0x6e6>
 800cb22:	9b02      	ldr	r3, [sp, #8]
 800cb24:	429d      	cmp	r5, r3
 800cb26:	f43f af7c 	beq.w	800ca22 <_dtoa_r+0x47a>
 800cb2a:	4b31      	ldr	r3, [pc, #196]	; (800cbf0 <_dtoa_r+0x648>)
 800cb2c:	ec51 0b19 	vmov	r0, r1, d9
 800cb30:	2200      	movs	r2, #0
 800cb32:	f7f3 fd61 	bl	80005f8 <__aeabi_dmul>
 800cb36:	4b2e      	ldr	r3, [pc, #184]	; (800cbf0 <_dtoa_r+0x648>)
 800cb38:	ec41 0b19 	vmov	d9, r0, r1
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	4640      	mov	r0, r8
 800cb40:	4649      	mov	r1, r9
 800cb42:	f7f3 fd59 	bl	80005f8 <__aeabi_dmul>
 800cb46:	4680      	mov	r8, r0
 800cb48:	4689      	mov	r9, r1
 800cb4a:	e7c5      	b.n	800cad8 <_dtoa_r+0x530>
 800cb4c:	ec51 0b17 	vmov	r0, r1, d7
 800cb50:	f7f3 fd52 	bl	80005f8 <__aeabi_dmul>
 800cb54:	9b02      	ldr	r3, [sp, #8]
 800cb56:	9d00      	ldr	r5, [sp, #0]
 800cb58:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb5a:	ec41 0b19 	vmov	d9, r0, r1
 800cb5e:	4649      	mov	r1, r9
 800cb60:	4640      	mov	r0, r8
 800cb62:	f7f3 fff9 	bl	8000b58 <__aeabi_d2iz>
 800cb66:	4606      	mov	r6, r0
 800cb68:	f7f3 fcdc 	bl	8000524 <__aeabi_i2d>
 800cb6c:	3630      	adds	r6, #48	; 0x30
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4640      	mov	r0, r8
 800cb74:	4649      	mov	r1, r9
 800cb76:	f7f3 fb87 	bl	8000288 <__aeabi_dsub>
 800cb7a:	f805 6b01 	strb.w	r6, [r5], #1
 800cb7e:	9b02      	ldr	r3, [sp, #8]
 800cb80:	429d      	cmp	r5, r3
 800cb82:	4680      	mov	r8, r0
 800cb84:	4689      	mov	r9, r1
 800cb86:	f04f 0200 	mov.w	r2, #0
 800cb8a:	d124      	bne.n	800cbd6 <_dtoa_r+0x62e>
 800cb8c:	4b1b      	ldr	r3, [pc, #108]	; (800cbfc <_dtoa_r+0x654>)
 800cb8e:	ec51 0b19 	vmov	r0, r1, d9
 800cb92:	f7f3 fb7b 	bl	800028c <__adddf3>
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	4640      	mov	r0, r8
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	f7f3 ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d173      	bne.n	800cc8e <_dtoa_r+0x6e6>
 800cba6:	ec53 2b19 	vmov	r2, r3, d9
 800cbaa:	4914      	ldr	r1, [pc, #80]	; (800cbfc <_dtoa_r+0x654>)
 800cbac:	2000      	movs	r0, #0
 800cbae:	f7f3 fb6b 	bl	8000288 <__aeabi_dsub>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	4649      	mov	r1, r9
 800cbba:	f7f3 ff8f 	bl	8000adc <__aeabi_dcmplt>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f43f af2f 	beq.w	800ca22 <_dtoa_r+0x47a>
 800cbc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cbc6:	1e6b      	subs	r3, r5, #1
 800cbc8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cbce:	2b30      	cmp	r3, #48	; 0x30
 800cbd0:	d0f8      	beq.n	800cbc4 <_dtoa_r+0x61c>
 800cbd2:	46bb      	mov	fp, r7
 800cbd4:	e04a      	b.n	800cc6c <_dtoa_r+0x6c4>
 800cbd6:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <_dtoa_r+0x648>)
 800cbd8:	f7f3 fd0e 	bl	80005f8 <__aeabi_dmul>
 800cbdc:	4680      	mov	r8, r0
 800cbde:	4689      	mov	r9, r1
 800cbe0:	e7bd      	b.n	800cb5e <_dtoa_r+0x5b6>
 800cbe2:	bf00      	nop
 800cbe4:	0800f320 	.word	0x0800f320
 800cbe8:	0800f2f8 	.word	0x0800f2f8
 800cbec:	3ff00000 	.word	0x3ff00000
 800cbf0:	40240000 	.word	0x40240000
 800cbf4:	401c0000 	.word	0x401c0000
 800cbf8:	40140000 	.word	0x40140000
 800cbfc:	3fe00000 	.word	0x3fe00000
 800cc00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc04:	9d00      	ldr	r5, [sp, #0]
 800cc06:	4642      	mov	r2, r8
 800cc08:	464b      	mov	r3, r9
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	4639      	mov	r1, r7
 800cc0e:	f7f3 fe1d 	bl	800084c <__aeabi_ddiv>
 800cc12:	f7f3 ffa1 	bl	8000b58 <__aeabi_d2iz>
 800cc16:	9001      	str	r0, [sp, #4]
 800cc18:	f7f3 fc84 	bl	8000524 <__aeabi_i2d>
 800cc1c:	4642      	mov	r2, r8
 800cc1e:	464b      	mov	r3, r9
 800cc20:	f7f3 fcea 	bl	80005f8 <__aeabi_dmul>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	4630      	mov	r0, r6
 800cc2a:	4639      	mov	r1, r7
 800cc2c:	f7f3 fb2c 	bl	8000288 <__aeabi_dsub>
 800cc30:	9e01      	ldr	r6, [sp, #4]
 800cc32:	9f04      	ldr	r7, [sp, #16]
 800cc34:	3630      	adds	r6, #48	; 0x30
 800cc36:	f805 6b01 	strb.w	r6, [r5], #1
 800cc3a:	9e00      	ldr	r6, [sp, #0]
 800cc3c:	1bae      	subs	r6, r5, r6
 800cc3e:	42b7      	cmp	r7, r6
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	d134      	bne.n	800ccb0 <_dtoa_r+0x708>
 800cc46:	f7f3 fb21 	bl	800028c <__adddf3>
 800cc4a:	4642      	mov	r2, r8
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	4606      	mov	r6, r0
 800cc50:	460f      	mov	r7, r1
 800cc52:	f7f3 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 800cc56:	b9c8      	cbnz	r0, 800cc8c <_dtoa_r+0x6e4>
 800cc58:	4642      	mov	r2, r8
 800cc5a:	464b      	mov	r3, r9
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	4639      	mov	r1, r7
 800cc60:	f7f3 ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc64:	b110      	cbz	r0, 800cc6c <_dtoa_r+0x6c4>
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	07db      	lsls	r3, r3, #31
 800cc6a:	d40f      	bmi.n	800cc8c <_dtoa_r+0x6e4>
 800cc6c:	4651      	mov	r1, sl
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f000 fbcc 	bl	800d40c <_Bfree>
 800cc74:	2300      	movs	r3, #0
 800cc76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc78:	702b      	strb	r3, [r5, #0]
 800cc7a:	f10b 0301 	add.w	r3, fp, #1
 800cc7e:	6013      	str	r3, [r2, #0]
 800cc80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f43f ace2 	beq.w	800c64c <_dtoa_r+0xa4>
 800cc88:	601d      	str	r5, [r3, #0]
 800cc8a:	e4df      	b.n	800c64c <_dtoa_r+0xa4>
 800cc8c:	465f      	mov	r7, fp
 800cc8e:	462b      	mov	r3, r5
 800cc90:	461d      	mov	r5, r3
 800cc92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc96:	2a39      	cmp	r2, #57	; 0x39
 800cc98:	d106      	bne.n	800cca8 <_dtoa_r+0x700>
 800cc9a:	9a00      	ldr	r2, [sp, #0]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d1f7      	bne.n	800cc90 <_dtoa_r+0x6e8>
 800cca0:	9900      	ldr	r1, [sp, #0]
 800cca2:	2230      	movs	r2, #48	; 0x30
 800cca4:	3701      	adds	r7, #1
 800cca6:	700a      	strb	r2, [r1, #0]
 800cca8:	781a      	ldrb	r2, [r3, #0]
 800ccaa:	3201      	adds	r2, #1
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	e790      	b.n	800cbd2 <_dtoa_r+0x62a>
 800ccb0:	4ba3      	ldr	r3, [pc, #652]	; (800cf40 <_dtoa_r+0x998>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f7f3 fca0 	bl	80005f8 <__aeabi_dmul>
 800ccb8:	2200      	movs	r2, #0
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	460f      	mov	r7, r1
 800ccc0:	f7f3 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d09e      	beq.n	800cc06 <_dtoa_r+0x65e>
 800ccc8:	e7d0      	b.n	800cc6c <_dtoa_r+0x6c4>
 800ccca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cccc:	2a00      	cmp	r2, #0
 800ccce:	f000 80ca 	beq.w	800ce66 <_dtoa_r+0x8be>
 800ccd2:	9a07      	ldr	r2, [sp, #28]
 800ccd4:	2a01      	cmp	r2, #1
 800ccd6:	f300 80ad 	bgt.w	800ce34 <_dtoa_r+0x88c>
 800ccda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccdc:	2a00      	cmp	r2, #0
 800ccde:	f000 80a5 	beq.w	800ce2c <_dtoa_r+0x884>
 800cce2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cce6:	9e08      	ldr	r6, [sp, #32]
 800cce8:	9d05      	ldr	r5, [sp, #20]
 800ccea:	9a05      	ldr	r2, [sp, #20]
 800ccec:	441a      	add	r2, r3
 800ccee:	9205      	str	r2, [sp, #20]
 800ccf0:	9a06      	ldr	r2, [sp, #24]
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	441a      	add	r2, r3
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	9206      	str	r2, [sp, #24]
 800ccfa:	f000 fc3d 	bl	800d578 <__i2b>
 800ccfe:	4607      	mov	r7, r0
 800cd00:	b165      	cbz	r5, 800cd1c <_dtoa_r+0x774>
 800cd02:	9b06      	ldr	r3, [sp, #24]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dd09      	ble.n	800cd1c <_dtoa_r+0x774>
 800cd08:	42ab      	cmp	r3, r5
 800cd0a:	9a05      	ldr	r2, [sp, #20]
 800cd0c:	bfa8      	it	ge
 800cd0e:	462b      	movge	r3, r5
 800cd10:	1ad2      	subs	r2, r2, r3
 800cd12:	9205      	str	r2, [sp, #20]
 800cd14:	9a06      	ldr	r2, [sp, #24]
 800cd16:	1aed      	subs	r5, r5, r3
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	9306      	str	r3, [sp, #24]
 800cd1c:	9b08      	ldr	r3, [sp, #32]
 800cd1e:	b1f3      	cbz	r3, 800cd5e <_dtoa_r+0x7b6>
 800cd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 80a3 	beq.w	800ce6e <_dtoa_r+0x8c6>
 800cd28:	2e00      	cmp	r6, #0
 800cd2a:	dd10      	ble.n	800cd4e <_dtoa_r+0x7a6>
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	4632      	mov	r2, r6
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 fce1 	bl	800d6f8 <__pow5mult>
 800cd36:	4652      	mov	r2, sl
 800cd38:	4601      	mov	r1, r0
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 fc31 	bl	800d5a4 <__multiply>
 800cd42:	4651      	mov	r1, sl
 800cd44:	4680      	mov	r8, r0
 800cd46:	4620      	mov	r0, r4
 800cd48:	f000 fb60 	bl	800d40c <_Bfree>
 800cd4c:	46c2      	mov	sl, r8
 800cd4e:	9b08      	ldr	r3, [sp, #32]
 800cd50:	1b9a      	subs	r2, r3, r6
 800cd52:	d004      	beq.n	800cd5e <_dtoa_r+0x7b6>
 800cd54:	4651      	mov	r1, sl
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 fcce 	bl	800d6f8 <__pow5mult>
 800cd5c:	4682      	mov	sl, r0
 800cd5e:	2101      	movs	r1, #1
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fc09 	bl	800d578 <__i2b>
 800cd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	f340 8081 	ble.w	800ce72 <_dtoa_r+0x8ca>
 800cd70:	461a      	mov	r2, r3
 800cd72:	4601      	mov	r1, r0
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 fcbf 	bl	800d6f8 <__pow5mult>
 800cd7a:	9b07      	ldr	r3, [sp, #28]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	4606      	mov	r6, r0
 800cd80:	dd7a      	ble.n	800ce78 <_dtoa_r+0x8d0>
 800cd82:	f04f 0800 	mov.w	r8, #0
 800cd86:	6933      	ldr	r3, [r6, #16]
 800cd88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cd8c:	6918      	ldr	r0, [r3, #16]
 800cd8e:	f000 fba5 	bl	800d4dc <__hi0bits>
 800cd92:	f1c0 0020 	rsb	r0, r0, #32
 800cd96:	9b06      	ldr	r3, [sp, #24]
 800cd98:	4418      	add	r0, r3
 800cd9a:	f010 001f 	ands.w	r0, r0, #31
 800cd9e:	f000 8094 	beq.w	800ceca <_dtoa_r+0x922>
 800cda2:	f1c0 0320 	rsb	r3, r0, #32
 800cda6:	2b04      	cmp	r3, #4
 800cda8:	f340 8085 	ble.w	800ceb6 <_dtoa_r+0x90e>
 800cdac:	9b05      	ldr	r3, [sp, #20]
 800cdae:	f1c0 001c 	rsb	r0, r0, #28
 800cdb2:	4403      	add	r3, r0
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	9b06      	ldr	r3, [sp, #24]
 800cdb8:	4403      	add	r3, r0
 800cdba:	4405      	add	r5, r0
 800cdbc:	9306      	str	r3, [sp, #24]
 800cdbe:	9b05      	ldr	r3, [sp, #20]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dd05      	ble.n	800cdd0 <_dtoa_r+0x828>
 800cdc4:	4651      	mov	r1, sl
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f000 fcef 	bl	800d7ac <__lshift>
 800cdce:	4682      	mov	sl, r0
 800cdd0:	9b06      	ldr	r3, [sp, #24]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dd05      	ble.n	800cde2 <_dtoa_r+0x83a>
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	461a      	mov	r2, r3
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 fce6 	bl	800d7ac <__lshift>
 800cde0:	4606      	mov	r6, r0
 800cde2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d072      	beq.n	800cece <_dtoa_r+0x926>
 800cde8:	4631      	mov	r1, r6
 800cdea:	4650      	mov	r0, sl
 800cdec:	f000 fd4a 	bl	800d884 <__mcmp>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	da6c      	bge.n	800cece <_dtoa_r+0x926>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4651      	mov	r1, sl
 800cdf8:	220a      	movs	r2, #10
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f000 fb28 	bl	800d450 <__multadd>
 800ce00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce06:	4682      	mov	sl, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 81b0 	beq.w	800d16e <_dtoa_r+0xbc6>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	4639      	mov	r1, r7
 800ce12:	220a      	movs	r2, #10
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fb1b 	bl	800d450 <__multadd>
 800ce1a:	9b01      	ldr	r3, [sp, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	4607      	mov	r7, r0
 800ce20:	f300 8096 	bgt.w	800cf50 <_dtoa_r+0x9a8>
 800ce24:	9b07      	ldr	r3, [sp, #28]
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	dc59      	bgt.n	800cede <_dtoa_r+0x936>
 800ce2a:	e091      	b.n	800cf50 <_dtoa_r+0x9a8>
 800ce2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce32:	e758      	b.n	800cce6 <_dtoa_r+0x73e>
 800ce34:	9b04      	ldr	r3, [sp, #16]
 800ce36:	1e5e      	subs	r6, r3, #1
 800ce38:	9b08      	ldr	r3, [sp, #32]
 800ce3a:	42b3      	cmp	r3, r6
 800ce3c:	bfbf      	itttt	lt
 800ce3e:	9b08      	ldrlt	r3, [sp, #32]
 800ce40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ce42:	9608      	strlt	r6, [sp, #32]
 800ce44:	1af3      	sublt	r3, r6, r3
 800ce46:	bfb4      	ite	lt
 800ce48:	18d2      	addlt	r2, r2, r3
 800ce4a:	1b9e      	subge	r6, r3, r6
 800ce4c:	9b04      	ldr	r3, [sp, #16]
 800ce4e:	bfbc      	itt	lt
 800ce50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ce52:	2600      	movlt	r6, #0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	bfb7      	itett	lt
 800ce58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ce5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ce60:	1a9d      	sublt	r5, r3, r2
 800ce62:	2300      	movlt	r3, #0
 800ce64:	e741      	b.n	800ccea <_dtoa_r+0x742>
 800ce66:	9e08      	ldr	r6, [sp, #32]
 800ce68:	9d05      	ldr	r5, [sp, #20]
 800ce6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ce6c:	e748      	b.n	800cd00 <_dtoa_r+0x758>
 800ce6e:	9a08      	ldr	r2, [sp, #32]
 800ce70:	e770      	b.n	800cd54 <_dtoa_r+0x7ac>
 800ce72:	9b07      	ldr	r3, [sp, #28]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	dc19      	bgt.n	800ceac <_dtoa_r+0x904>
 800ce78:	9b02      	ldr	r3, [sp, #8]
 800ce7a:	b9bb      	cbnz	r3, 800ceac <_dtoa_r+0x904>
 800ce7c:	9b03      	ldr	r3, [sp, #12]
 800ce7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce82:	b99b      	cbnz	r3, 800ceac <_dtoa_r+0x904>
 800ce84:	9b03      	ldr	r3, [sp, #12]
 800ce86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce8a:	0d1b      	lsrs	r3, r3, #20
 800ce8c:	051b      	lsls	r3, r3, #20
 800ce8e:	b183      	cbz	r3, 800ceb2 <_dtoa_r+0x90a>
 800ce90:	9b05      	ldr	r3, [sp, #20]
 800ce92:	3301      	adds	r3, #1
 800ce94:	9305      	str	r3, [sp, #20]
 800ce96:	9b06      	ldr	r3, [sp, #24]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	9306      	str	r3, [sp, #24]
 800ce9c:	f04f 0801 	mov.w	r8, #1
 800cea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f47f af6f 	bne.w	800cd86 <_dtoa_r+0x7de>
 800cea8:	2001      	movs	r0, #1
 800ceaa:	e774      	b.n	800cd96 <_dtoa_r+0x7ee>
 800ceac:	f04f 0800 	mov.w	r8, #0
 800ceb0:	e7f6      	b.n	800cea0 <_dtoa_r+0x8f8>
 800ceb2:	4698      	mov	r8, r3
 800ceb4:	e7f4      	b.n	800cea0 <_dtoa_r+0x8f8>
 800ceb6:	d082      	beq.n	800cdbe <_dtoa_r+0x816>
 800ceb8:	9a05      	ldr	r2, [sp, #20]
 800ceba:	331c      	adds	r3, #28
 800cebc:	441a      	add	r2, r3
 800cebe:	9205      	str	r2, [sp, #20]
 800cec0:	9a06      	ldr	r2, [sp, #24]
 800cec2:	441a      	add	r2, r3
 800cec4:	441d      	add	r5, r3
 800cec6:	9206      	str	r2, [sp, #24]
 800cec8:	e779      	b.n	800cdbe <_dtoa_r+0x816>
 800ceca:	4603      	mov	r3, r0
 800cecc:	e7f4      	b.n	800ceb8 <_dtoa_r+0x910>
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	dc37      	bgt.n	800cf44 <_dtoa_r+0x99c>
 800ced4:	9b07      	ldr	r3, [sp, #28]
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	dd34      	ble.n	800cf44 <_dtoa_r+0x99c>
 800ceda:	9b04      	ldr	r3, [sp, #16]
 800cedc:	9301      	str	r3, [sp, #4]
 800cede:	9b01      	ldr	r3, [sp, #4]
 800cee0:	b963      	cbnz	r3, 800cefc <_dtoa_r+0x954>
 800cee2:	4631      	mov	r1, r6
 800cee4:	2205      	movs	r2, #5
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 fab2 	bl	800d450 <__multadd>
 800ceec:	4601      	mov	r1, r0
 800ceee:	4606      	mov	r6, r0
 800cef0:	4650      	mov	r0, sl
 800cef2:	f000 fcc7 	bl	800d884 <__mcmp>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	f73f adbb 	bgt.w	800ca72 <_dtoa_r+0x4ca>
 800cefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cefe:	9d00      	ldr	r5, [sp, #0]
 800cf00:	ea6f 0b03 	mvn.w	fp, r3
 800cf04:	f04f 0800 	mov.w	r8, #0
 800cf08:	4631      	mov	r1, r6
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f000 fa7e 	bl	800d40c <_Bfree>
 800cf10:	2f00      	cmp	r7, #0
 800cf12:	f43f aeab 	beq.w	800cc6c <_dtoa_r+0x6c4>
 800cf16:	f1b8 0f00 	cmp.w	r8, #0
 800cf1a:	d005      	beq.n	800cf28 <_dtoa_r+0x980>
 800cf1c:	45b8      	cmp	r8, r7
 800cf1e:	d003      	beq.n	800cf28 <_dtoa_r+0x980>
 800cf20:	4641      	mov	r1, r8
 800cf22:	4620      	mov	r0, r4
 800cf24:	f000 fa72 	bl	800d40c <_Bfree>
 800cf28:	4639      	mov	r1, r7
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 fa6e 	bl	800d40c <_Bfree>
 800cf30:	e69c      	b.n	800cc6c <_dtoa_r+0x6c4>
 800cf32:	2600      	movs	r6, #0
 800cf34:	4637      	mov	r7, r6
 800cf36:	e7e1      	b.n	800cefc <_dtoa_r+0x954>
 800cf38:	46bb      	mov	fp, r7
 800cf3a:	4637      	mov	r7, r6
 800cf3c:	e599      	b.n	800ca72 <_dtoa_r+0x4ca>
 800cf3e:	bf00      	nop
 800cf40:	40240000 	.word	0x40240000
 800cf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f000 80c8 	beq.w	800d0dc <_dtoa_r+0xb34>
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	2d00      	cmp	r5, #0
 800cf52:	dd05      	ble.n	800cf60 <_dtoa_r+0x9b8>
 800cf54:	4639      	mov	r1, r7
 800cf56:	462a      	mov	r2, r5
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 fc27 	bl	800d7ac <__lshift>
 800cf5e:	4607      	mov	r7, r0
 800cf60:	f1b8 0f00 	cmp.w	r8, #0
 800cf64:	d05b      	beq.n	800d01e <_dtoa_r+0xa76>
 800cf66:	6879      	ldr	r1, [r7, #4]
 800cf68:	4620      	mov	r0, r4
 800cf6a:	f000 fa0f 	bl	800d38c <_Balloc>
 800cf6e:	4605      	mov	r5, r0
 800cf70:	b928      	cbnz	r0, 800cf7e <_dtoa_r+0x9d6>
 800cf72:	4b83      	ldr	r3, [pc, #524]	; (800d180 <_dtoa_r+0xbd8>)
 800cf74:	4602      	mov	r2, r0
 800cf76:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cf7a:	f7ff bb2e 	b.w	800c5da <_dtoa_r+0x32>
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	3202      	adds	r2, #2
 800cf82:	0092      	lsls	r2, r2, #2
 800cf84:	f107 010c 	add.w	r1, r7, #12
 800cf88:	300c      	adds	r0, #12
 800cf8a:	f7ff fa75 	bl	800c478 <memcpy>
 800cf8e:	2201      	movs	r2, #1
 800cf90:	4629      	mov	r1, r5
 800cf92:	4620      	mov	r0, r4
 800cf94:	f000 fc0a 	bl	800d7ac <__lshift>
 800cf98:	9b00      	ldr	r3, [sp, #0]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	9304      	str	r3, [sp, #16]
 800cf9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	9308      	str	r3, [sp, #32]
 800cfa6:	9b02      	ldr	r3, [sp, #8]
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	46b8      	mov	r8, r7
 800cfae:	9306      	str	r3, [sp, #24]
 800cfb0:	4607      	mov	r7, r0
 800cfb2:	9b04      	ldr	r3, [sp, #16]
 800cfb4:	4631      	mov	r1, r6
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	4650      	mov	r0, sl
 800cfba:	9301      	str	r3, [sp, #4]
 800cfbc:	f7ff fa6a 	bl	800c494 <quorem>
 800cfc0:	4641      	mov	r1, r8
 800cfc2:	9002      	str	r0, [sp, #8]
 800cfc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cfc8:	4650      	mov	r0, sl
 800cfca:	f000 fc5b 	bl	800d884 <__mcmp>
 800cfce:	463a      	mov	r2, r7
 800cfd0:	9005      	str	r0, [sp, #20]
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 fc71 	bl	800d8bc <__mdiff>
 800cfda:	68c2      	ldr	r2, [r0, #12]
 800cfdc:	4605      	mov	r5, r0
 800cfde:	bb02      	cbnz	r2, 800d022 <_dtoa_r+0xa7a>
 800cfe0:	4601      	mov	r1, r0
 800cfe2:	4650      	mov	r0, sl
 800cfe4:	f000 fc4e 	bl	800d884 <__mcmp>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	4629      	mov	r1, r5
 800cfec:	4620      	mov	r0, r4
 800cfee:	9209      	str	r2, [sp, #36]	; 0x24
 800cff0:	f000 fa0c 	bl	800d40c <_Bfree>
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cff8:	9d04      	ldr	r5, [sp, #16]
 800cffa:	ea43 0102 	orr.w	r1, r3, r2
 800cffe:	9b06      	ldr	r3, [sp, #24]
 800d000:	4319      	orrs	r1, r3
 800d002:	d110      	bne.n	800d026 <_dtoa_r+0xa7e>
 800d004:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d008:	d029      	beq.n	800d05e <_dtoa_r+0xab6>
 800d00a:	9b05      	ldr	r3, [sp, #20]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	dd02      	ble.n	800d016 <_dtoa_r+0xa6e>
 800d010:	9b02      	ldr	r3, [sp, #8]
 800d012:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d016:	9b01      	ldr	r3, [sp, #4]
 800d018:	f883 9000 	strb.w	r9, [r3]
 800d01c:	e774      	b.n	800cf08 <_dtoa_r+0x960>
 800d01e:	4638      	mov	r0, r7
 800d020:	e7ba      	b.n	800cf98 <_dtoa_r+0x9f0>
 800d022:	2201      	movs	r2, #1
 800d024:	e7e1      	b.n	800cfea <_dtoa_r+0xa42>
 800d026:	9b05      	ldr	r3, [sp, #20]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	db04      	blt.n	800d036 <_dtoa_r+0xa8e>
 800d02c:	9907      	ldr	r1, [sp, #28]
 800d02e:	430b      	orrs	r3, r1
 800d030:	9906      	ldr	r1, [sp, #24]
 800d032:	430b      	orrs	r3, r1
 800d034:	d120      	bne.n	800d078 <_dtoa_r+0xad0>
 800d036:	2a00      	cmp	r2, #0
 800d038:	dded      	ble.n	800d016 <_dtoa_r+0xa6e>
 800d03a:	4651      	mov	r1, sl
 800d03c:	2201      	movs	r2, #1
 800d03e:	4620      	mov	r0, r4
 800d040:	f000 fbb4 	bl	800d7ac <__lshift>
 800d044:	4631      	mov	r1, r6
 800d046:	4682      	mov	sl, r0
 800d048:	f000 fc1c 	bl	800d884 <__mcmp>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	dc03      	bgt.n	800d058 <_dtoa_r+0xab0>
 800d050:	d1e1      	bne.n	800d016 <_dtoa_r+0xa6e>
 800d052:	f019 0f01 	tst.w	r9, #1
 800d056:	d0de      	beq.n	800d016 <_dtoa_r+0xa6e>
 800d058:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d05c:	d1d8      	bne.n	800d010 <_dtoa_r+0xa68>
 800d05e:	9a01      	ldr	r2, [sp, #4]
 800d060:	2339      	movs	r3, #57	; 0x39
 800d062:	7013      	strb	r3, [r2, #0]
 800d064:	462b      	mov	r3, r5
 800d066:	461d      	mov	r5, r3
 800d068:	3b01      	subs	r3, #1
 800d06a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d06e:	2a39      	cmp	r2, #57	; 0x39
 800d070:	d06c      	beq.n	800d14c <_dtoa_r+0xba4>
 800d072:	3201      	adds	r2, #1
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	e747      	b.n	800cf08 <_dtoa_r+0x960>
 800d078:	2a00      	cmp	r2, #0
 800d07a:	dd07      	ble.n	800d08c <_dtoa_r+0xae4>
 800d07c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d080:	d0ed      	beq.n	800d05e <_dtoa_r+0xab6>
 800d082:	9a01      	ldr	r2, [sp, #4]
 800d084:	f109 0301 	add.w	r3, r9, #1
 800d088:	7013      	strb	r3, [r2, #0]
 800d08a:	e73d      	b.n	800cf08 <_dtoa_r+0x960>
 800d08c:	9b04      	ldr	r3, [sp, #16]
 800d08e:	9a08      	ldr	r2, [sp, #32]
 800d090:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d094:	4293      	cmp	r3, r2
 800d096:	d043      	beq.n	800d120 <_dtoa_r+0xb78>
 800d098:	4651      	mov	r1, sl
 800d09a:	2300      	movs	r3, #0
 800d09c:	220a      	movs	r2, #10
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f000 f9d6 	bl	800d450 <__multadd>
 800d0a4:	45b8      	cmp	r8, r7
 800d0a6:	4682      	mov	sl, r0
 800d0a8:	f04f 0300 	mov.w	r3, #0
 800d0ac:	f04f 020a 	mov.w	r2, #10
 800d0b0:	4641      	mov	r1, r8
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	d107      	bne.n	800d0c6 <_dtoa_r+0xb1e>
 800d0b6:	f000 f9cb 	bl	800d450 <__multadd>
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	4607      	mov	r7, r0
 800d0be:	9b04      	ldr	r3, [sp, #16]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	9304      	str	r3, [sp, #16]
 800d0c4:	e775      	b.n	800cfb2 <_dtoa_r+0xa0a>
 800d0c6:	f000 f9c3 	bl	800d450 <__multadd>
 800d0ca:	4639      	mov	r1, r7
 800d0cc:	4680      	mov	r8, r0
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	220a      	movs	r2, #10
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f000 f9bc 	bl	800d450 <__multadd>
 800d0d8:	4607      	mov	r7, r0
 800d0da:	e7f0      	b.n	800d0be <_dtoa_r+0xb16>
 800d0dc:	9b04      	ldr	r3, [sp, #16]
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	9d00      	ldr	r5, [sp, #0]
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4650      	mov	r0, sl
 800d0e6:	f7ff f9d5 	bl	800c494 <quorem>
 800d0ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d0ee:	9b00      	ldr	r3, [sp, #0]
 800d0f0:	f805 9b01 	strb.w	r9, [r5], #1
 800d0f4:	1aea      	subs	r2, r5, r3
 800d0f6:	9b01      	ldr	r3, [sp, #4]
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	dd07      	ble.n	800d10c <_dtoa_r+0xb64>
 800d0fc:	4651      	mov	r1, sl
 800d0fe:	2300      	movs	r3, #0
 800d100:	220a      	movs	r2, #10
 800d102:	4620      	mov	r0, r4
 800d104:	f000 f9a4 	bl	800d450 <__multadd>
 800d108:	4682      	mov	sl, r0
 800d10a:	e7ea      	b.n	800d0e2 <_dtoa_r+0xb3a>
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bfc8      	it	gt
 800d112:	461d      	movgt	r5, r3
 800d114:	9b00      	ldr	r3, [sp, #0]
 800d116:	bfd8      	it	le
 800d118:	2501      	movle	r5, #1
 800d11a:	441d      	add	r5, r3
 800d11c:	f04f 0800 	mov.w	r8, #0
 800d120:	4651      	mov	r1, sl
 800d122:	2201      	movs	r2, #1
 800d124:	4620      	mov	r0, r4
 800d126:	f000 fb41 	bl	800d7ac <__lshift>
 800d12a:	4631      	mov	r1, r6
 800d12c:	4682      	mov	sl, r0
 800d12e:	f000 fba9 	bl	800d884 <__mcmp>
 800d132:	2800      	cmp	r0, #0
 800d134:	dc96      	bgt.n	800d064 <_dtoa_r+0xabc>
 800d136:	d102      	bne.n	800d13e <_dtoa_r+0xb96>
 800d138:	f019 0f01 	tst.w	r9, #1
 800d13c:	d192      	bne.n	800d064 <_dtoa_r+0xabc>
 800d13e:	462b      	mov	r3, r5
 800d140:	461d      	mov	r5, r3
 800d142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d146:	2a30      	cmp	r2, #48	; 0x30
 800d148:	d0fa      	beq.n	800d140 <_dtoa_r+0xb98>
 800d14a:	e6dd      	b.n	800cf08 <_dtoa_r+0x960>
 800d14c:	9a00      	ldr	r2, [sp, #0]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d189      	bne.n	800d066 <_dtoa_r+0xabe>
 800d152:	f10b 0b01 	add.w	fp, fp, #1
 800d156:	2331      	movs	r3, #49	; 0x31
 800d158:	e796      	b.n	800d088 <_dtoa_r+0xae0>
 800d15a:	4b0a      	ldr	r3, [pc, #40]	; (800d184 <_dtoa_r+0xbdc>)
 800d15c:	f7ff ba99 	b.w	800c692 <_dtoa_r+0xea>
 800d160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d162:	2b00      	cmp	r3, #0
 800d164:	f47f aa6d 	bne.w	800c642 <_dtoa_r+0x9a>
 800d168:	4b07      	ldr	r3, [pc, #28]	; (800d188 <_dtoa_r+0xbe0>)
 800d16a:	f7ff ba92 	b.w	800c692 <_dtoa_r+0xea>
 800d16e:	9b01      	ldr	r3, [sp, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	dcb5      	bgt.n	800d0e0 <_dtoa_r+0xb38>
 800d174:	9b07      	ldr	r3, [sp, #28]
 800d176:	2b02      	cmp	r3, #2
 800d178:	f73f aeb1 	bgt.w	800cede <_dtoa_r+0x936>
 800d17c:	e7b0      	b.n	800d0e0 <_dtoa_r+0xb38>
 800d17e:	bf00      	nop
 800d180:	0800f28c 	.word	0x0800f28c
 800d184:	0800f1ec 	.word	0x0800f1ec
 800d188:	0800f210 	.word	0x0800f210

0800d18c <_free_r>:
 800d18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d18e:	2900      	cmp	r1, #0
 800d190:	d044      	beq.n	800d21c <_free_r+0x90>
 800d192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d196:	9001      	str	r0, [sp, #4]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f1a1 0404 	sub.w	r4, r1, #4
 800d19e:	bfb8      	it	lt
 800d1a0:	18e4      	addlt	r4, r4, r3
 800d1a2:	f000 f8e7 	bl	800d374 <__malloc_lock>
 800d1a6:	4a1e      	ldr	r2, [pc, #120]	; (800d220 <_free_r+0x94>)
 800d1a8:	9801      	ldr	r0, [sp, #4]
 800d1aa:	6813      	ldr	r3, [r2, #0]
 800d1ac:	b933      	cbnz	r3, 800d1bc <_free_r+0x30>
 800d1ae:	6063      	str	r3, [r4, #4]
 800d1b0:	6014      	str	r4, [r2, #0]
 800d1b2:	b003      	add	sp, #12
 800d1b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1b8:	f000 b8e2 	b.w	800d380 <__malloc_unlock>
 800d1bc:	42a3      	cmp	r3, r4
 800d1be:	d908      	bls.n	800d1d2 <_free_r+0x46>
 800d1c0:	6825      	ldr	r5, [r4, #0]
 800d1c2:	1961      	adds	r1, r4, r5
 800d1c4:	428b      	cmp	r3, r1
 800d1c6:	bf01      	itttt	eq
 800d1c8:	6819      	ldreq	r1, [r3, #0]
 800d1ca:	685b      	ldreq	r3, [r3, #4]
 800d1cc:	1949      	addeq	r1, r1, r5
 800d1ce:	6021      	streq	r1, [r4, #0]
 800d1d0:	e7ed      	b.n	800d1ae <_free_r+0x22>
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	b10b      	cbz	r3, 800d1dc <_free_r+0x50>
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	d9fa      	bls.n	800d1d2 <_free_r+0x46>
 800d1dc:	6811      	ldr	r1, [r2, #0]
 800d1de:	1855      	adds	r5, r2, r1
 800d1e0:	42a5      	cmp	r5, r4
 800d1e2:	d10b      	bne.n	800d1fc <_free_r+0x70>
 800d1e4:	6824      	ldr	r4, [r4, #0]
 800d1e6:	4421      	add	r1, r4
 800d1e8:	1854      	adds	r4, r2, r1
 800d1ea:	42a3      	cmp	r3, r4
 800d1ec:	6011      	str	r1, [r2, #0]
 800d1ee:	d1e0      	bne.n	800d1b2 <_free_r+0x26>
 800d1f0:	681c      	ldr	r4, [r3, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	6053      	str	r3, [r2, #4]
 800d1f6:	440c      	add	r4, r1
 800d1f8:	6014      	str	r4, [r2, #0]
 800d1fa:	e7da      	b.n	800d1b2 <_free_r+0x26>
 800d1fc:	d902      	bls.n	800d204 <_free_r+0x78>
 800d1fe:	230c      	movs	r3, #12
 800d200:	6003      	str	r3, [r0, #0]
 800d202:	e7d6      	b.n	800d1b2 <_free_r+0x26>
 800d204:	6825      	ldr	r5, [r4, #0]
 800d206:	1961      	adds	r1, r4, r5
 800d208:	428b      	cmp	r3, r1
 800d20a:	bf04      	itt	eq
 800d20c:	6819      	ldreq	r1, [r3, #0]
 800d20e:	685b      	ldreq	r3, [r3, #4]
 800d210:	6063      	str	r3, [r4, #4]
 800d212:	bf04      	itt	eq
 800d214:	1949      	addeq	r1, r1, r5
 800d216:	6021      	streq	r1, [r4, #0]
 800d218:	6054      	str	r4, [r2, #4]
 800d21a:	e7ca      	b.n	800d1b2 <_free_r+0x26>
 800d21c:	b003      	add	sp, #12
 800d21e:	bd30      	pop	{r4, r5, pc}
 800d220:	200053c8 	.word	0x200053c8

0800d224 <malloc>:
 800d224:	4b02      	ldr	r3, [pc, #8]	; (800d230 <malloc+0xc>)
 800d226:	4601      	mov	r1, r0
 800d228:	6818      	ldr	r0, [r3, #0]
 800d22a:	f000 b823 	b.w	800d274 <_malloc_r>
 800d22e:	bf00      	nop
 800d230:	2000006c 	.word	0x2000006c

0800d234 <sbrk_aligned>:
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	4e0e      	ldr	r6, [pc, #56]	; (800d270 <sbrk_aligned+0x3c>)
 800d238:	460c      	mov	r4, r1
 800d23a:	6831      	ldr	r1, [r6, #0]
 800d23c:	4605      	mov	r5, r0
 800d23e:	b911      	cbnz	r1, 800d246 <sbrk_aligned+0x12>
 800d240:	f000 fe40 	bl	800dec4 <_sbrk_r>
 800d244:	6030      	str	r0, [r6, #0]
 800d246:	4621      	mov	r1, r4
 800d248:	4628      	mov	r0, r5
 800d24a:	f000 fe3b 	bl	800dec4 <_sbrk_r>
 800d24e:	1c43      	adds	r3, r0, #1
 800d250:	d00a      	beq.n	800d268 <sbrk_aligned+0x34>
 800d252:	1cc4      	adds	r4, r0, #3
 800d254:	f024 0403 	bic.w	r4, r4, #3
 800d258:	42a0      	cmp	r0, r4
 800d25a:	d007      	beq.n	800d26c <sbrk_aligned+0x38>
 800d25c:	1a21      	subs	r1, r4, r0
 800d25e:	4628      	mov	r0, r5
 800d260:	f000 fe30 	bl	800dec4 <_sbrk_r>
 800d264:	3001      	adds	r0, #1
 800d266:	d101      	bne.n	800d26c <sbrk_aligned+0x38>
 800d268:	f04f 34ff 	mov.w	r4, #4294967295
 800d26c:	4620      	mov	r0, r4
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	200053cc 	.word	0x200053cc

0800d274 <_malloc_r>:
 800d274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d278:	1ccd      	adds	r5, r1, #3
 800d27a:	f025 0503 	bic.w	r5, r5, #3
 800d27e:	3508      	adds	r5, #8
 800d280:	2d0c      	cmp	r5, #12
 800d282:	bf38      	it	cc
 800d284:	250c      	movcc	r5, #12
 800d286:	2d00      	cmp	r5, #0
 800d288:	4607      	mov	r7, r0
 800d28a:	db01      	blt.n	800d290 <_malloc_r+0x1c>
 800d28c:	42a9      	cmp	r1, r5
 800d28e:	d905      	bls.n	800d29c <_malloc_r+0x28>
 800d290:	230c      	movs	r3, #12
 800d292:	603b      	str	r3, [r7, #0]
 800d294:	2600      	movs	r6, #0
 800d296:	4630      	mov	r0, r6
 800d298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d29c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d370 <_malloc_r+0xfc>
 800d2a0:	f000 f868 	bl	800d374 <__malloc_lock>
 800d2a4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a8:	461c      	mov	r4, r3
 800d2aa:	bb5c      	cbnz	r4, 800d304 <_malloc_r+0x90>
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f7ff ffc0 	bl	800d234 <sbrk_aligned>
 800d2b4:	1c43      	adds	r3, r0, #1
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	d155      	bne.n	800d366 <_malloc_r+0xf2>
 800d2ba:	f8d8 4000 	ldr.w	r4, [r8]
 800d2be:	4626      	mov	r6, r4
 800d2c0:	2e00      	cmp	r6, #0
 800d2c2:	d145      	bne.n	800d350 <_malloc_r+0xdc>
 800d2c4:	2c00      	cmp	r4, #0
 800d2c6:	d048      	beq.n	800d35a <_malloc_r+0xe6>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4638      	mov	r0, r7
 800d2ce:	eb04 0903 	add.w	r9, r4, r3
 800d2d2:	f000 fdf7 	bl	800dec4 <_sbrk_r>
 800d2d6:	4581      	cmp	r9, r0
 800d2d8:	d13f      	bne.n	800d35a <_malloc_r+0xe6>
 800d2da:	6821      	ldr	r1, [r4, #0]
 800d2dc:	1a6d      	subs	r5, r5, r1
 800d2de:	4629      	mov	r1, r5
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f7ff ffa7 	bl	800d234 <sbrk_aligned>
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	d037      	beq.n	800d35a <_malloc_r+0xe6>
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	442b      	add	r3, r5
 800d2ee:	6023      	str	r3, [r4, #0]
 800d2f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d038      	beq.n	800d36a <_malloc_r+0xf6>
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	42a2      	cmp	r2, r4
 800d2fc:	d12b      	bne.n	800d356 <_malloc_r+0xe2>
 800d2fe:	2200      	movs	r2, #0
 800d300:	605a      	str	r2, [r3, #4]
 800d302:	e00f      	b.n	800d324 <_malloc_r+0xb0>
 800d304:	6822      	ldr	r2, [r4, #0]
 800d306:	1b52      	subs	r2, r2, r5
 800d308:	d41f      	bmi.n	800d34a <_malloc_r+0xd6>
 800d30a:	2a0b      	cmp	r2, #11
 800d30c:	d917      	bls.n	800d33e <_malloc_r+0xca>
 800d30e:	1961      	adds	r1, r4, r5
 800d310:	42a3      	cmp	r3, r4
 800d312:	6025      	str	r5, [r4, #0]
 800d314:	bf18      	it	ne
 800d316:	6059      	strne	r1, [r3, #4]
 800d318:	6863      	ldr	r3, [r4, #4]
 800d31a:	bf08      	it	eq
 800d31c:	f8c8 1000 	streq.w	r1, [r8]
 800d320:	5162      	str	r2, [r4, r5]
 800d322:	604b      	str	r3, [r1, #4]
 800d324:	4638      	mov	r0, r7
 800d326:	f104 060b 	add.w	r6, r4, #11
 800d32a:	f000 f829 	bl	800d380 <__malloc_unlock>
 800d32e:	f026 0607 	bic.w	r6, r6, #7
 800d332:	1d23      	adds	r3, r4, #4
 800d334:	1af2      	subs	r2, r6, r3
 800d336:	d0ae      	beq.n	800d296 <_malloc_r+0x22>
 800d338:	1b9b      	subs	r3, r3, r6
 800d33a:	50a3      	str	r3, [r4, r2]
 800d33c:	e7ab      	b.n	800d296 <_malloc_r+0x22>
 800d33e:	42a3      	cmp	r3, r4
 800d340:	6862      	ldr	r2, [r4, #4]
 800d342:	d1dd      	bne.n	800d300 <_malloc_r+0x8c>
 800d344:	f8c8 2000 	str.w	r2, [r8]
 800d348:	e7ec      	b.n	800d324 <_malloc_r+0xb0>
 800d34a:	4623      	mov	r3, r4
 800d34c:	6864      	ldr	r4, [r4, #4]
 800d34e:	e7ac      	b.n	800d2aa <_malloc_r+0x36>
 800d350:	4634      	mov	r4, r6
 800d352:	6876      	ldr	r6, [r6, #4]
 800d354:	e7b4      	b.n	800d2c0 <_malloc_r+0x4c>
 800d356:	4613      	mov	r3, r2
 800d358:	e7cc      	b.n	800d2f4 <_malloc_r+0x80>
 800d35a:	230c      	movs	r3, #12
 800d35c:	603b      	str	r3, [r7, #0]
 800d35e:	4638      	mov	r0, r7
 800d360:	f000 f80e 	bl	800d380 <__malloc_unlock>
 800d364:	e797      	b.n	800d296 <_malloc_r+0x22>
 800d366:	6025      	str	r5, [r4, #0]
 800d368:	e7dc      	b.n	800d324 <_malloc_r+0xb0>
 800d36a:	605b      	str	r3, [r3, #4]
 800d36c:	deff      	udf	#255	; 0xff
 800d36e:	bf00      	nop
 800d370:	200053c8 	.word	0x200053c8

0800d374 <__malloc_lock>:
 800d374:	4801      	ldr	r0, [pc, #4]	; (800d37c <__malloc_lock+0x8>)
 800d376:	f7ff b87d 	b.w	800c474 <__retarget_lock_acquire_recursive>
 800d37a:	bf00      	nop
 800d37c:	200053c4 	.word	0x200053c4

0800d380 <__malloc_unlock>:
 800d380:	4801      	ldr	r0, [pc, #4]	; (800d388 <__malloc_unlock+0x8>)
 800d382:	f7ff b878 	b.w	800c476 <__retarget_lock_release_recursive>
 800d386:	bf00      	nop
 800d388:	200053c4 	.word	0x200053c4

0800d38c <_Balloc>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	69c6      	ldr	r6, [r0, #28]
 800d390:	4604      	mov	r4, r0
 800d392:	460d      	mov	r5, r1
 800d394:	b976      	cbnz	r6, 800d3b4 <_Balloc+0x28>
 800d396:	2010      	movs	r0, #16
 800d398:	f7ff ff44 	bl	800d224 <malloc>
 800d39c:	4602      	mov	r2, r0
 800d39e:	61e0      	str	r0, [r4, #28]
 800d3a0:	b920      	cbnz	r0, 800d3ac <_Balloc+0x20>
 800d3a2:	4b18      	ldr	r3, [pc, #96]	; (800d404 <_Balloc+0x78>)
 800d3a4:	4818      	ldr	r0, [pc, #96]	; (800d408 <_Balloc+0x7c>)
 800d3a6:	216b      	movs	r1, #107	; 0x6b
 800d3a8:	f000 fd9c 	bl	800dee4 <__assert_func>
 800d3ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b0:	6006      	str	r6, [r0, #0]
 800d3b2:	60c6      	str	r6, [r0, #12]
 800d3b4:	69e6      	ldr	r6, [r4, #28]
 800d3b6:	68f3      	ldr	r3, [r6, #12]
 800d3b8:	b183      	cbz	r3, 800d3dc <_Balloc+0x50>
 800d3ba:	69e3      	ldr	r3, [r4, #28]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3c2:	b9b8      	cbnz	r0, 800d3f4 <_Balloc+0x68>
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ca:	1d72      	adds	r2, r6, #5
 800d3cc:	0092      	lsls	r2, r2, #2
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 fda6 	bl	800df20 <_calloc_r>
 800d3d4:	b160      	cbz	r0, 800d3f0 <_Balloc+0x64>
 800d3d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3da:	e00e      	b.n	800d3fa <_Balloc+0x6e>
 800d3dc:	2221      	movs	r2, #33	; 0x21
 800d3de:	2104      	movs	r1, #4
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f000 fd9d 	bl	800df20 <_calloc_r>
 800d3e6:	69e3      	ldr	r3, [r4, #28]
 800d3e8:	60f0      	str	r0, [r6, #12]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e4      	bne.n	800d3ba <_Balloc+0x2e>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
 800d3f4:	6802      	ldr	r2, [r0, #0]
 800d3f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d400:	e7f7      	b.n	800d3f2 <_Balloc+0x66>
 800d402:	bf00      	nop
 800d404:	0800f21d 	.word	0x0800f21d
 800d408:	0800f29d 	.word	0x0800f29d

0800d40c <_Bfree>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	69c6      	ldr	r6, [r0, #28]
 800d410:	4605      	mov	r5, r0
 800d412:	460c      	mov	r4, r1
 800d414:	b976      	cbnz	r6, 800d434 <_Bfree+0x28>
 800d416:	2010      	movs	r0, #16
 800d418:	f7ff ff04 	bl	800d224 <malloc>
 800d41c:	4602      	mov	r2, r0
 800d41e:	61e8      	str	r0, [r5, #28]
 800d420:	b920      	cbnz	r0, 800d42c <_Bfree+0x20>
 800d422:	4b09      	ldr	r3, [pc, #36]	; (800d448 <_Bfree+0x3c>)
 800d424:	4809      	ldr	r0, [pc, #36]	; (800d44c <_Bfree+0x40>)
 800d426:	218f      	movs	r1, #143	; 0x8f
 800d428:	f000 fd5c 	bl	800dee4 <__assert_func>
 800d42c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d430:	6006      	str	r6, [r0, #0]
 800d432:	60c6      	str	r6, [r0, #12]
 800d434:	b13c      	cbz	r4, 800d446 <_Bfree+0x3a>
 800d436:	69eb      	ldr	r3, [r5, #28]
 800d438:	6862      	ldr	r2, [r4, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d440:	6021      	str	r1, [r4, #0]
 800d442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d446:	bd70      	pop	{r4, r5, r6, pc}
 800d448:	0800f21d 	.word	0x0800f21d
 800d44c:	0800f29d 	.word	0x0800f29d

0800d450 <__multadd>:
 800d450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d454:	690d      	ldr	r5, [r1, #16]
 800d456:	4607      	mov	r7, r0
 800d458:	460c      	mov	r4, r1
 800d45a:	461e      	mov	r6, r3
 800d45c:	f101 0c14 	add.w	ip, r1, #20
 800d460:	2000      	movs	r0, #0
 800d462:	f8dc 3000 	ldr.w	r3, [ip]
 800d466:	b299      	uxth	r1, r3
 800d468:	fb02 6101 	mla	r1, r2, r1, r6
 800d46c:	0c1e      	lsrs	r6, r3, #16
 800d46e:	0c0b      	lsrs	r3, r1, #16
 800d470:	fb02 3306 	mla	r3, r2, r6, r3
 800d474:	b289      	uxth	r1, r1
 800d476:	3001      	adds	r0, #1
 800d478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d47c:	4285      	cmp	r5, r0
 800d47e:	f84c 1b04 	str.w	r1, [ip], #4
 800d482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d486:	dcec      	bgt.n	800d462 <__multadd+0x12>
 800d488:	b30e      	cbz	r6, 800d4ce <__multadd+0x7e>
 800d48a:	68a3      	ldr	r3, [r4, #8]
 800d48c:	42ab      	cmp	r3, r5
 800d48e:	dc19      	bgt.n	800d4c4 <__multadd+0x74>
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	4638      	mov	r0, r7
 800d494:	3101      	adds	r1, #1
 800d496:	f7ff ff79 	bl	800d38c <_Balloc>
 800d49a:	4680      	mov	r8, r0
 800d49c:	b928      	cbnz	r0, 800d4aa <__multadd+0x5a>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <__multadd+0x84>)
 800d4a2:	480d      	ldr	r0, [pc, #52]	; (800d4d8 <__multadd+0x88>)
 800d4a4:	21ba      	movs	r1, #186	; 0xba
 800d4a6:	f000 fd1d 	bl	800dee4 <__assert_func>
 800d4aa:	6922      	ldr	r2, [r4, #16]
 800d4ac:	3202      	adds	r2, #2
 800d4ae:	f104 010c 	add.w	r1, r4, #12
 800d4b2:	0092      	lsls	r2, r2, #2
 800d4b4:	300c      	adds	r0, #12
 800d4b6:	f7fe ffdf 	bl	800c478 <memcpy>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff ffa5 	bl	800d40c <_Bfree>
 800d4c2:	4644      	mov	r4, r8
 800d4c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4c8:	3501      	adds	r5, #1
 800d4ca:	615e      	str	r6, [r3, #20]
 800d4cc:	6125      	str	r5, [r4, #16]
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d4:	0800f28c 	.word	0x0800f28c
 800d4d8:	0800f29d 	.word	0x0800f29d

0800d4dc <__hi0bits>:
 800d4dc:	0c03      	lsrs	r3, r0, #16
 800d4de:	041b      	lsls	r3, r3, #16
 800d4e0:	b9d3      	cbnz	r3, 800d518 <__hi0bits+0x3c>
 800d4e2:	0400      	lsls	r0, r0, #16
 800d4e4:	2310      	movs	r3, #16
 800d4e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d4ea:	bf04      	itt	eq
 800d4ec:	0200      	lsleq	r0, r0, #8
 800d4ee:	3308      	addeq	r3, #8
 800d4f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d4f4:	bf04      	itt	eq
 800d4f6:	0100      	lsleq	r0, r0, #4
 800d4f8:	3304      	addeq	r3, #4
 800d4fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d4fe:	bf04      	itt	eq
 800d500:	0080      	lsleq	r0, r0, #2
 800d502:	3302      	addeq	r3, #2
 800d504:	2800      	cmp	r0, #0
 800d506:	db05      	blt.n	800d514 <__hi0bits+0x38>
 800d508:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d50c:	f103 0301 	add.w	r3, r3, #1
 800d510:	bf08      	it	eq
 800d512:	2320      	moveq	r3, #32
 800d514:	4618      	mov	r0, r3
 800d516:	4770      	bx	lr
 800d518:	2300      	movs	r3, #0
 800d51a:	e7e4      	b.n	800d4e6 <__hi0bits+0xa>

0800d51c <__lo0bits>:
 800d51c:	6803      	ldr	r3, [r0, #0]
 800d51e:	f013 0207 	ands.w	r2, r3, #7
 800d522:	d00c      	beq.n	800d53e <__lo0bits+0x22>
 800d524:	07d9      	lsls	r1, r3, #31
 800d526:	d422      	bmi.n	800d56e <__lo0bits+0x52>
 800d528:	079a      	lsls	r2, r3, #30
 800d52a:	bf49      	itett	mi
 800d52c:	085b      	lsrmi	r3, r3, #1
 800d52e:	089b      	lsrpl	r3, r3, #2
 800d530:	6003      	strmi	r3, [r0, #0]
 800d532:	2201      	movmi	r2, #1
 800d534:	bf5c      	itt	pl
 800d536:	6003      	strpl	r3, [r0, #0]
 800d538:	2202      	movpl	r2, #2
 800d53a:	4610      	mov	r0, r2
 800d53c:	4770      	bx	lr
 800d53e:	b299      	uxth	r1, r3
 800d540:	b909      	cbnz	r1, 800d546 <__lo0bits+0x2a>
 800d542:	0c1b      	lsrs	r3, r3, #16
 800d544:	2210      	movs	r2, #16
 800d546:	b2d9      	uxtb	r1, r3
 800d548:	b909      	cbnz	r1, 800d54e <__lo0bits+0x32>
 800d54a:	3208      	adds	r2, #8
 800d54c:	0a1b      	lsrs	r3, r3, #8
 800d54e:	0719      	lsls	r1, r3, #28
 800d550:	bf04      	itt	eq
 800d552:	091b      	lsreq	r3, r3, #4
 800d554:	3204      	addeq	r2, #4
 800d556:	0799      	lsls	r1, r3, #30
 800d558:	bf04      	itt	eq
 800d55a:	089b      	lsreq	r3, r3, #2
 800d55c:	3202      	addeq	r2, #2
 800d55e:	07d9      	lsls	r1, r3, #31
 800d560:	d403      	bmi.n	800d56a <__lo0bits+0x4e>
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	f102 0201 	add.w	r2, r2, #1
 800d568:	d003      	beq.n	800d572 <__lo0bits+0x56>
 800d56a:	6003      	str	r3, [r0, #0]
 800d56c:	e7e5      	b.n	800d53a <__lo0bits+0x1e>
 800d56e:	2200      	movs	r2, #0
 800d570:	e7e3      	b.n	800d53a <__lo0bits+0x1e>
 800d572:	2220      	movs	r2, #32
 800d574:	e7e1      	b.n	800d53a <__lo0bits+0x1e>
	...

0800d578 <__i2b>:
 800d578:	b510      	push	{r4, lr}
 800d57a:	460c      	mov	r4, r1
 800d57c:	2101      	movs	r1, #1
 800d57e:	f7ff ff05 	bl	800d38c <_Balloc>
 800d582:	4602      	mov	r2, r0
 800d584:	b928      	cbnz	r0, 800d592 <__i2b+0x1a>
 800d586:	4b05      	ldr	r3, [pc, #20]	; (800d59c <__i2b+0x24>)
 800d588:	4805      	ldr	r0, [pc, #20]	; (800d5a0 <__i2b+0x28>)
 800d58a:	f240 1145 	movw	r1, #325	; 0x145
 800d58e:	f000 fca9 	bl	800dee4 <__assert_func>
 800d592:	2301      	movs	r3, #1
 800d594:	6144      	str	r4, [r0, #20]
 800d596:	6103      	str	r3, [r0, #16]
 800d598:	bd10      	pop	{r4, pc}
 800d59a:	bf00      	nop
 800d59c:	0800f28c 	.word	0x0800f28c
 800d5a0:	0800f29d 	.word	0x0800f29d

0800d5a4 <__multiply>:
 800d5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a8:	4691      	mov	r9, r2
 800d5aa:	690a      	ldr	r2, [r1, #16]
 800d5ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	bfb8      	it	lt
 800d5b4:	460b      	movlt	r3, r1
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	bfbc      	itt	lt
 800d5ba:	464c      	movlt	r4, r9
 800d5bc:	4699      	movlt	r9, r3
 800d5be:	6927      	ldr	r7, [r4, #16]
 800d5c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d5c4:	68a3      	ldr	r3, [r4, #8]
 800d5c6:	6861      	ldr	r1, [r4, #4]
 800d5c8:	eb07 060a 	add.w	r6, r7, sl
 800d5cc:	42b3      	cmp	r3, r6
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	bfb8      	it	lt
 800d5d2:	3101      	addlt	r1, #1
 800d5d4:	f7ff feda 	bl	800d38c <_Balloc>
 800d5d8:	b930      	cbnz	r0, 800d5e8 <__multiply+0x44>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	4b44      	ldr	r3, [pc, #272]	; (800d6f0 <__multiply+0x14c>)
 800d5de:	4845      	ldr	r0, [pc, #276]	; (800d6f4 <__multiply+0x150>)
 800d5e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d5e4:	f000 fc7e 	bl	800dee4 <__assert_func>
 800d5e8:	f100 0514 	add.w	r5, r0, #20
 800d5ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5f0:	462b      	mov	r3, r5
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	4543      	cmp	r3, r8
 800d5f6:	d321      	bcc.n	800d63c <__multiply+0x98>
 800d5f8:	f104 0314 	add.w	r3, r4, #20
 800d5fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d600:	f109 0314 	add.w	r3, r9, #20
 800d604:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d608:	9202      	str	r2, [sp, #8]
 800d60a:	1b3a      	subs	r2, r7, r4
 800d60c:	3a15      	subs	r2, #21
 800d60e:	f022 0203 	bic.w	r2, r2, #3
 800d612:	3204      	adds	r2, #4
 800d614:	f104 0115 	add.w	r1, r4, #21
 800d618:	428f      	cmp	r7, r1
 800d61a:	bf38      	it	cc
 800d61c:	2204      	movcc	r2, #4
 800d61e:	9201      	str	r2, [sp, #4]
 800d620:	9a02      	ldr	r2, [sp, #8]
 800d622:	9303      	str	r3, [sp, #12]
 800d624:	429a      	cmp	r2, r3
 800d626:	d80c      	bhi.n	800d642 <__multiply+0x9e>
 800d628:	2e00      	cmp	r6, #0
 800d62a:	dd03      	ble.n	800d634 <__multiply+0x90>
 800d62c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d630:	2b00      	cmp	r3, #0
 800d632:	d05b      	beq.n	800d6ec <__multiply+0x148>
 800d634:	6106      	str	r6, [r0, #16]
 800d636:	b005      	add	sp, #20
 800d638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d63c:	f843 2b04 	str.w	r2, [r3], #4
 800d640:	e7d8      	b.n	800d5f4 <__multiply+0x50>
 800d642:	f8b3 a000 	ldrh.w	sl, [r3]
 800d646:	f1ba 0f00 	cmp.w	sl, #0
 800d64a:	d024      	beq.n	800d696 <__multiply+0xf2>
 800d64c:	f104 0e14 	add.w	lr, r4, #20
 800d650:	46a9      	mov	r9, r5
 800d652:	f04f 0c00 	mov.w	ip, #0
 800d656:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d65a:	f8d9 1000 	ldr.w	r1, [r9]
 800d65e:	fa1f fb82 	uxth.w	fp, r2
 800d662:	b289      	uxth	r1, r1
 800d664:	fb0a 110b 	mla	r1, sl, fp, r1
 800d668:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d66c:	f8d9 2000 	ldr.w	r2, [r9]
 800d670:	4461      	add	r1, ip
 800d672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d676:	fb0a c20b 	mla	r2, sl, fp, ip
 800d67a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d67e:	b289      	uxth	r1, r1
 800d680:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d684:	4577      	cmp	r7, lr
 800d686:	f849 1b04 	str.w	r1, [r9], #4
 800d68a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d68e:	d8e2      	bhi.n	800d656 <__multiply+0xb2>
 800d690:	9a01      	ldr	r2, [sp, #4]
 800d692:	f845 c002 	str.w	ip, [r5, r2]
 800d696:	9a03      	ldr	r2, [sp, #12]
 800d698:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d69c:	3304      	adds	r3, #4
 800d69e:	f1b9 0f00 	cmp.w	r9, #0
 800d6a2:	d021      	beq.n	800d6e8 <__multiply+0x144>
 800d6a4:	6829      	ldr	r1, [r5, #0]
 800d6a6:	f104 0c14 	add.w	ip, r4, #20
 800d6aa:	46ae      	mov	lr, r5
 800d6ac:	f04f 0a00 	mov.w	sl, #0
 800d6b0:	f8bc b000 	ldrh.w	fp, [ip]
 800d6b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6b8:	fb09 220b 	mla	r2, r9, fp, r2
 800d6bc:	4452      	add	r2, sl
 800d6be:	b289      	uxth	r1, r1
 800d6c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6c4:	f84e 1b04 	str.w	r1, [lr], #4
 800d6c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d6cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6d0:	f8be 1000 	ldrh.w	r1, [lr]
 800d6d4:	fb09 110a 	mla	r1, r9, sl, r1
 800d6d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d6dc:	4567      	cmp	r7, ip
 800d6de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d6e2:	d8e5      	bhi.n	800d6b0 <__multiply+0x10c>
 800d6e4:	9a01      	ldr	r2, [sp, #4]
 800d6e6:	50a9      	str	r1, [r5, r2]
 800d6e8:	3504      	adds	r5, #4
 800d6ea:	e799      	b.n	800d620 <__multiply+0x7c>
 800d6ec:	3e01      	subs	r6, #1
 800d6ee:	e79b      	b.n	800d628 <__multiply+0x84>
 800d6f0:	0800f28c 	.word	0x0800f28c
 800d6f4:	0800f29d 	.word	0x0800f29d

0800d6f8 <__pow5mult>:
 800d6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6fc:	4615      	mov	r5, r2
 800d6fe:	f012 0203 	ands.w	r2, r2, #3
 800d702:	4606      	mov	r6, r0
 800d704:	460f      	mov	r7, r1
 800d706:	d007      	beq.n	800d718 <__pow5mult+0x20>
 800d708:	4c25      	ldr	r4, [pc, #148]	; (800d7a0 <__pow5mult+0xa8>)
 800d70a:	3a01      	subs	r2, #1
 800d70c:	2300      	movs	r3, #0
 800d70e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d712:	f7ff fe9d 	bl	800d450 <__multadd>
 800d716:	4607      	mov	r7, r0
 800d718:	10ad      	asrs	r5, r5, #2
 800d71a:	d03d      	beq.n	800d798 <__pow5mult+0xa0>
 800d71c:	69f4      	ldr	r4, [r6, #28]
 800d71e:	b97c      	cbnz	r4, 800d740 <__pow5mult+0x48>
 800d720:	2010      	movs	r0, #16
 800d722:	f7ff fd7f 	bl	800d224 <malloc>
 800d726:	4602      	mov	r2, r0
 800d728:	61f0      	str	r0, [r6, #28]
 800d72a:	b928      	cbnz	r0, 800d738 <__pow5mult+0x40>
 800d72c:	4b1d      	ldr	r3, [pc, #116]	; (800d7a4 <__pow5mult+0xac>)
 800d72e:	481e      	ldr	r0, [pc, #120]	; (800d7a8 <__pow5mult+0xb0>)
 800d730:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d734:	f000 fbd6 	bl	800dee4 <__assert_func>
 800d738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d73c:	6004      	str	r4, [r0, #0]
 800d73e:	60c4      	str	r4, [r0, #12]
 800d740:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d748:	b94c      	cbnz	r4, 800d75e <__pow5mult+0x66>
 800d74a:	f240 2171 	movw	r1, #625	; 0x271
 800d74e:	4630      	mov	r0, r6
 800d750:	f7ff ff12 	bl	800d578 <__i2b>
 800d754:	2300      	movs	r3, #0
 800d756:	f8c8 0008 	str.w	r0, [r8, #8]
 800d75a:	4604      	mov	r4, r0
 800d75c:	6003      	str	r3, [r0, #0]
 800d75e:	f04f 0900 	mov.w	r9, #0
 800d762:	07eb      	lsls	r3, r5, #31
 800d764:	d50a      	bpl.n	800d77c <__pow5mult+0x84>
 800d766:	4639      	mov	r1, r7
 800d768:	4622      	mov	r2, r4
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7ff ff1a 	bl	800d5a4 <__multiply>
 800d770:	4639      	mov	r1, r7
 800d772:	4680      	mov	r8, r0
 800d774:	4630      	mov	r0, r6
 800d776:	f7ff fe49 	bl	800d40c <_Bfree>
 800d77a:	4647      	mov	r7, r8
 800d77c:	106d      	asrs	r5, r5, #1
 800d77e:	d00b      	beq.n	800d798 <__pow5mult+0xa0>
 800d780:	6820      	ldr	r0, [r4, #0]
 800d782:	b938      	cbnz	r0, 800d794 <__pow5mult+0x9c>
 800d784:	4622      	mov	r2, r4
 800d786:	4621      	mov	r1, r4
 800d788:	4630      	mov	r0, r6
 800d78a:	f7ff ff0b 	bl	800d5a4 <__multiply>
 800d78e:	6020      	str	r0, [r4, #0]
 800d790:	f8c0 9000 	str.w	r9, [r0]
 800d794:	4604      	mov	r4, r0
 800d796:	e7e4      	b.n	800d762 <__pow5mult+0x6a>
 800d798:	4638      	mov	r0, r7
 800d79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d79e:	bf00      	nop
 800d7a0:	0800f3e8 	.word	0x0800f3e8
 800d7a4:	0800f21d 	.word	0x0800f21d
 800d7a8:	0800f29d 	.word	0x0800f29d

0800d7ac <__lshift>:
 800d7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b0:	460c      	mov	r4, r1
 800d7b2:	6849      	ldr	r1, [r1, #4]
 800d7b4:	6923      	ldr	r3, [r4, #16]
 800d7b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7ba:	68a3      	ldr	r3, [r4, #8]
 800d7bc:	4607      	mov	r7, r0
 800d7be:	4691      	mov	r9, r2
 800d7c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7c4:	f108 0601 	add.w	r6, r8, #1
 800d7c8:	42b3      	cmp	r3, r6
 800d7ca:	db0b      	blt.n	800d7e4 <__lshift+0x38>
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	f7ff fddd 	bl	800d38c <_Balloc>
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	b948      	cbnz	r0, 800d7ea <__lshift+0x3e>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	4b28      	ldr	r3, [pc, #160]	; (800d87c <__lshift+0xd0>)
 800d7da:	4829      	ldr	r0, [pc, #164]	; (800d880 <__lshift+0xd4>)
 800d7dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d7e0:	f000 fb80 	bl	800dee4 <__assert_func>
 800d7e4:	3101      	adds	r1, #1
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	e7ee      	b.n	800d7c8 <__lshift+0x1c>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f100 0114 	add.w	r1, r0, #20
 800d7f0:	f100 0210 	add.w	r2, r0, #16
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	4553      	cmp	r3, sl
 800d7f8:	db33      	blt.n	800d862 <__lshift+0xb6>
 800d7fa:	6920      	ldr	r0, [r4, #16]
 800d7fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d800:	f104 0314 	add.w	r3, r4, #20
 800d804:	f019 091f 	ands.w	r9, r9, #31
 800d808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d80c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d810:	d02b      	beq.n	800d86a <__lshift+0xbe>
 800d812:	f1c9 0e20 	rsb	lr, r9, #32
 800d816:	468a      	mov	sl, r1
 800d818:	2200      	movs	r2, #0
 800d81a:	6818      	ldr	r0, [r3, #0]
 800d81c:	fa00 f009 	lsl.w	r0, r0, r9
 800d820:	4310      	orrs	r0, r2
 800d822:	f84a 0b04 	str.w	r0, [sl], #4
 800d826:	f853 2b04 	ldr.w	r2, [r3], #4
 800d82a:	459c      	cmp	ip, r3
 800d82c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d830:	d8f3      	bhi.n	800d81a <__lshift+0x6e>
 800d832:	ebac 0304 	sub.w	r3, ip, r4
 800d836:	3b15      	subs	r3, #21
 800d838:	f023 0303 	bic.w	r3, r3, #3
 800d83c:	3304      	adds	r3, #4
 800d83e:	f104 0015 	add.w	r0, r4, #21
 800d842:	4584      	cmp	ip, r0
 800d844:	bf38      	it	cc
 800d846:	2304      	movcc	r3, #4
 800d848:	50ca      	str	r2, [r1, r3]
 800d84a:	b10a      	cbz	r2, 800d850 <__lshift+0xa4>
 800d84c:	f108 0602 	add.w	r6, r8, #2
 800d850:	3e01      	subs	r6, #1
 800d852:	4638      	mov	r0, r7
 800d854:	612e      	str	r6, [r5, #16]
 800d856:	4621      	mov	r1, r4
 800d858:	f7ff fdd8 	bl	800d40c <_Bfree>
 800d85c:	4628      	mov	r0, r5
 800d85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d862:	f842 0f04 	str.w	r0, [r2, #4]!
 800d866:	3301      	adds	r3, #1
 800d868:	e7c5      	b.n	800d7f6 <__lshift+0x4a>
 800d86a:	3904      	subs	r1, #4
 800d86c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d870:	f841 2f04 	str.w	r2, [r1, #4]!
 800d874:	459c      	cmp	ip, r3
 800d876:	d8f9      	bhi.n	800d86c <__lshift+0xc0>
 800d878:	e7ea      	b.n	800d850 <__lshift+0xa4>
 800d87a:	bf00      	nop
 800d87c:	0800f28c 	.word	0x0800f28c
 800d880:	0800f29d 	.word	0x0800f29d

0800d884 <__mcmp>:
 800d884:	b530      	push	{r4, r5, lr}
 800d886:	6902      	ldr	r2, [r0, #16]
 800d888:	690c      	ldr	r4, [r1, #16]
 800d88a:	1b12      	subs	r2, r2, r4
 800d88c:	d10e      	bne.n	800d8ac <__mcmp+0x28>
 800d88e:	f100 0314 	add.w	r3, r0, #20
 800d892:	3114      	adds	r1, #20
 800d894:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d898:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d89c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8a4:	42a5      	cmp	r5, r4
 800d8a6:	d003      	beq.n	800d8b0 <__mcmp+0x2c>
 800d8a8:	d305      	bcc.n	800d8b6 <__mcmp+0x32>
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	bd30      	pop	{r4, r5, pc}
 800d8b0:	4283      	cmp	r3, r0
 800d8b2:	d3f3      	bcc.n	800d89c <__mcmp+0x18>
 800d8b4:	e7fa      	b.n	800d8ac <__mcmp+0x28>
 800d8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ba:	e7f7      	b.n	800d8ac <__mcmp+0x28>

0800d8bc <__mdiff>:
 800d8bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c0:	460c      	mov	r4, r1
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	4690      	mov	r8, r2
 800d8ca:	f7ff ffdb 	bl	800d884 <__mcmp>
 800d8ce:	1e05      	subs	r5, r0, #0
 800d8d0:	d110      	bne.n	800d8f4 <__mdiff+0x38>
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	f7ff fd59 	bl	800d38c <_Balloc>
 800d8da:	b930      	cbnz	r0, 800d8ea <__mdiff+0x2e>
 800d8dc:	4b3a      	ldr	r3, [pc, #232]	; (800d9c8 <__mdiff+0x10c>)
 800d8de:	4602      	mov	r2, r0
 800d8e0:	f240 2137 	movw	r1, #567	; 0x237
 800d8e4:	4839      	ldr	r0, [pc, #228]	; (800d9cc <__mdiff+0x110>)
 800d8e6:	f000 fafd 	bl	800dee4 <__assert_func>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f4:	bfa4      	itt	ge
 800d8f6:	4643      	movge	r3, r8
 800d8f8:	46a0      	movge	r8, r4
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d900:	bfa6      	itte	ge
 800d902:	461c      	movge	r4, r3
 800d904:	2500      	movge	r5, #0
 800d906:	2501      	movlt	r5, #1
 800d908:	f7ff fd40 	bl	800d38c <_Balloc>
 800d90c:	b920      	cbnz	r0, 800d918 <__mdiff+0x5c>
 800d90e:	4b2e      	ldr	r3, [pc, #184]	; (800d9c8 <__mdiff+0x10c>)
 800d910:	4602      	mov	r2, r0
 800d912:	f240 2145 	movw	r1, #581	; 0x245
 800d916:	e7e5      	b.n	800d8e4 <__mdiff+0x28>
 800d918:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d91c:	6926      	ldr	r6, [r4, #16]
 800d91e:	60c5      	str	r5, [r0, #12]
 800d920:	f104 0914 	add.w	r9, r4, #20
 800d924:	f108 0514 	add.w	r5, r8, #20
 800d928:	f100 0e14 	add.w	lr, r0, #20
 800d92c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d930:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d934:	f108 0210 	add.w	r2, r8, #16
 800d938:	46f2      	mov	sl, lr
 800d93a:	2100      	movs	r1, #0
 800d93c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d940:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d944:	fa11 f88b 	uxtah	r8, r1, fp
 800d948:	b299      	uxth	r1, r3
 800d94a:	0c1b      	lsrs	r3, r3, #16
 800d94c:	eba8 0801 	sub.w	r8, r8, r1
 800d950:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d954:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d958:	fa1f f888 	uxth.w	r8, r8
 800d95c:	1419      	asrs	r1, r3, #16
 800d95e:	454e      	cmp	r6, r9
 800d960:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d964:	f84a 3b04 	str.w	r3, [sl], #4
 800d968:	d8e8      	bhi.n	800d93c <__mdiff+0x80>
 800d96a:	1b33      	subs	r3, r6, r4
 800d96c:	3b15      	subs	r3, #21
 800d96e:	f023 0303 	bic.w	r3, r3, #3
 800d972:	3304      	adds	r3, #4
 800d974:	3415      	adds	r4, #21
 800d976:	42a6      	cmp	r6, r4
 800d978:	bf38      	it	cc
 800d97a:	2304      	movcc	r3, #4
 800d97c:	441d      	add	r5, r3
 800d97e:	4473      	add	r3, lr
 800d980:	469e      	mov	lr, r3
 800d982:	462e      	mov	r6, r5
 800d984:	4566      	cmp	r6, ip
 800d986:	d30e      	bcc.n	800d9a6 <__mdiff+0xea>
 800d988:	f10c 0203 	add.w	r2, ip, #3
 800d98c:	1b52      	subs	r2, r2, r5
 800d98e:	f022 0203 	bic.w	r2, r2, #3
 800d992:	3d03      	subs	r5, #3
 800d994:	45ac      	cmp	ip, r5
 800d996:	bf38      	it	cc
 800d998:	2200      	movcc	r2, #0
 800d99a:	4413      	add	r3, r2
 800d99c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d9a0:	b17a      	cbz	r2, 800d9c2 <__mdiff+0x106>
 800d9a2:	6107      	str	r7, [r0, #16]
 800d9a4:	e7a4      	b.n	800d8f0 <__mdiff+0x34>
 800d9a6:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9aa:	fa11 f288 	uxtah	r2, r1, r8
 800d9ae:	1414      	asrs	r4, r2, #16
 800d9b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9ba:	f84e 2b04 	str.w	r2, [lr], #4
 800d9be:	1421      	asrs	r1, r4, #16
 800d9c0:	e7e0      	b.n	800d984 <__mdiff+0xc8>
 800d9c2:	3f01      	subs	r7, #1
 800d9c4:	e7ea      	b.n	800d99c <__mdiff+0xe0>
 800d9c6:	bf00      	nop
 800d9c8:	0800f28c 	.word	0x0800f28c
 800d9cc:	0800f29d 	.word	0x0800f29d

0800d9d0 <__d2b>:
 800d9d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9d4:	460f      	mov	r7, r1
 800d9d6:	2101      	movs	r1, #1
 800d9d8:	ec59 8b10 	vmov	r8, r9, d0
 800d9dc:	4616      	mov	r6, r2
 800d9de:	f7ff fcd5 	bl	800d38c <_Balloc>
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	b930      	cbnz	r0, 800d9f4 <__d2b+0x24>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	4b24      	ldr	r3, [pc, #144]	; (800da7c <__d2b+0xac>)
 800d9ea:	4825      	ldr	r0, [pc, #148]	; (800da80 <__d2b+0xb0>)
 800d9ec:	f240 310f 	movw	r1, #783	; 0x30f
 800d9f0:	f000 fa78 	bl	800dee4 <__assert_func>
 800d9f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d9f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9fc:	bb2d      	cbnz	r5, 800da4a <__d2b+0x7a>
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	f1b8 0300 	subs.w	r3, r8, #0
 800da04:	d026      	beq.n	800da54 <__d2b+0x84>
 800da06:	4668      	mov	r0, sp
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	f7ff fd87 	bl	800d51c <__lo0bits>
 800da0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da12:	b1e8      	cbz	r0, 800da50 <__d2b+0x80>
 800da14:	f1c0 0320 	rsb	r3, r0, #32
 800da18:	fa02 f303 	lsl.w	r3, r2, r3
 800da1c:	430b      	orrs	r3, r1
 800da1e:	40c2      	lsrs	r2, r0
 800da20:	6163      	str	r3, [r4, #20]
 800da22:	9201      	str	r2, [sp, #4]
 800da24:	9b01      	ldr	r3, [sp, #4]
 800da26:	61a3      	str	r3, [r4, #24]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	bf14      	ite	ne
 800da2c:	2202      	movne	r2, #2
 800da2e:	2201      	moveq	r2, #1
 800da30:	6122      	str	r2, [r4, #16]
 800da32:	b1bd      	cbz	r5, 800da64 <__d2b+0x94>
 800da34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da38:	4405      	add	r5, r0
 800da3a:	603d      	str	r5, [r7, #0]
 800da3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da40:	6030      	str	r0, [r6, #0]
 800da42:	4620      	mov	r0, r4
 800da44:	b003      	add	sp, #12
 800da46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da4e:	e7d6      	b.n	800d9fe <__d2b+0x2e>
 800da50:	6161      	str	r1, [r4, #20]
 800da52:	e7e7      	b.n	800da24 <__d2b+0x54>
 800da54:	a801      	add	r0, sp, #4
 800da56:	f7ff fd61 	bl	800d51c <__lo0bits>
 800da5a:	9b01      	ldr	r3, [sp, #4]
 800da5c:	6163      	str	r3, [r4, #20]
 800da5e:	3020      	adds	r0, #32
 800da60:	2201      	movs	r2, #1
 800da62:	e7e5      	b.n	800da30 <__d2b+0x60>
 800da64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da6c:	6038      	str	r0, [r7, #0]
 800da6e:	6918      	ldr	r0, [r3, #16]
 800da70:	f7ff fd34 	bl	800d4dc <__hi0bits>
 800da74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da78:	e7e2      	b.n	800da40 <__d2b+0x70>
 800da7a:	bf00      	nop
 800da7c:	0800f28c 	.word	0x0800f28c
 800da80:	0800f29d 	.word	0x0800f29d

0800da84 <__ssputs_r>:
 800da84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	688e      	ldr	r6, [r1, #8]
 800da8a:	461f      	mov	r7, r3
 800da8c:	42be      	cmp	r6, r7
 800da8e:	680b      	ldr	r3, [r1, #0]
 800da90:	4682      	mov	sl, r0
 800da92:	460c      	mov	r4, r1
 800da94:	4690      	mov	r8, r2
 800da96:	d82c      	bhi.n	800daf2 <__ssputs_r+0x6e>
 800da98:	898a      	ldrh	r2, [r1, #12]
 800da9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da9e:	d026      	beq.n	800daee <__ssputs_r+0x6a>
 800daa0:	6965      	ldr	r5, [r4, #20]
 800daa2:	6909      	ldr	r1, [r1, #16]
 800daa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daa8:	eba3 0901 	sub.w	r9, r3, r1
 800daac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dab0:	1c7b      	adds	r3, r7, #1
 800dab2:	444b      	add	r3, r9
 800dab4:	106d      	asrs	r5, r5, #1
 800dab6:	429d      	cmp	r5, r3
 800dab8:	bf38      	it	cc
 800daba:	461d      	movcc	r5, r3
 800dabc:	0553      	lsls	r3, r2, #21
 800dabe:	d527      	bpl.n	800db10 <__ssputs_r+0x8c>
 800dac0:	4629      	mov	r1, r5
 800dac2:	f7ff fbd7 	bl	800d274 <_malloc_r>
 800dac6:	4606      	mov	r6, r0
 800dac8:	b360      	cbz	r0, 800db24 <__ssputs_r+0xa0>
 800daca:	6921      	ldr	r1, [r4, #16]
 800dacc:	464a      	mov	r2, r9
 800dace:	f7fe fcd3 	bl	800c478 <memcpy>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dadc:	81a3      	strh	r3, [r4, #12]
 800dade:	6126      	str	r6, [r4, #16]
 800dae0:	6165      	str	r5, [r4, #20]
 800dae2:	444e      	add	r6, r9
 800dae4:	eba5 0509 	sub.w	r5, r5, r9
 800dae8:	6026      	str	r6, [r4, #0]
 800daea:	60a5      	str	r5, [r4, #8]
 800daec:	463e      	mov	r6, r7
 800daee:	42be      	cmp	r6, r7
 800daf0:	d900      	bls.n	800daf4 <__ssputs_r+0x70>
 800daf2:	463e      	mov	r6, r7
 800daf4:	6820      	ldr	r0, [r4, #0]
 800daf6:	4632      	mov	r2, r6
 800daf8:	4641      	mov	r1, r8
 800dafa:	f000 f9c9 	bl	800de90 <memmove>
 800dafe:	68a3      	ldr	r3, [r4, #8]
 800db00:	1b9b      	subs	r3, r3, r6
 800db02:	60a3      	str	r3, [r4, #8]
 800db04:	6823      	ldr	r3, [r4, #0]
 800db06:	4433      	add	r3, r6
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	2000      	movs	r0, #0
 800db0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db10:	462a      	mov	r2, r5
 800db12:	f000 fa2d 	bl	800df70 <_realloc_r>
 800db16:	4606      	mov	r6, r0
 800db18:	2800      	cmp	r0, #0
 800db1a:	d1e0      	bne.n	800dade <__ssputs_r+0x5a>
 800db1c:	6921      	ldr	r1, [r4, #16]
 800db1e:	4650      	mov	r0, sl
 800db20:	f7ff fb34 	bl	800d18c <_free_r>
 800db24:	230c      	movs	r3, #12
 800db26:	f8ca 3000 	str.w	r3, [sl]
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db30:	81a3      	strh	r3, [r4, #12]
 800db32:	f04f 30ff 	mov.w	r0, #4294967295
 800db36:	e7e9      	b.n	800db0c <__ssputs_r+0x88>

0800db38 <_svfiprintf_r>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	4698      	mov	r8, r3
 800db3e:	898b      	ldrh	r3, [r1, #12]
 800db40:	061b      	lsls	r3, r3, #24
 800db42:	b09d      	sub	sp, #116	; 0x74
 800db44:	4607      	mov	r7, r0
 800db46:	460d      	mov	r5, r1
 800db48:	4614      	mov	r4, r2
 800db4a:	d50e      	bpl.n	800db6a <_svfiprintf_r+0x32>
 800db4c:	690b      	ldr	r3, [r1, #16]
 800db4e:	b963      	cbnz	r3, 800db6a <_svfiprintf_r+0x32>
 800db50:	2140      	movs	r1, #64	; 0x40
 800db52:	f7ff fb8f 	bl	800d274 <_malloc_r>
 800db56:	6028      	str	r0, [r5, #0]
 800db58:	6128      	str	r0, [r5, #16]
 800db5a:	b920      	cbnz	r0, 800db66 <_svfiprintf_r+0x2e>
 800db5c:	230c      	movs	r3, #12
 800db5e:	603b      	str	r3, [r7, #0]
 800db60:	f04f 30ff 	mov.w	r0, #4294967295
 800db64:	e0d0      	b.n	800dd08 <_svfiprintf_r+0x1d0>
 800db66:	2340      	movs	r3, #64	; 0x40
 800db68:	616b      	str	r3, [r5, #20]
 800db6a:	2300      	movs	r3, #0
 800db6c:	9309      	str	r3, [sp, #36]	; 0x24
 800db6e:	2320      	movs	r3, #32
 800db70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db74:	f8cd 800c 	str.w	r8, [sp, #12]
 800db78:	2330      	movs	r3, #48	; 0x30
 800db7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dd20 <_svfiprintf_r+0x1e8>
 800db7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db82:	f04f 0901 	mov.w	r9, #1
 800db86:	4623      	mov	r3, r4
 800db88:	469a      	mov	sl, r3
 800db8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db8e:	b10a      	cbz	r2, 800db94 <_svfiprintf_r+0x5c>
 800db90:	2a25      	cmp	r2, #37	; 0x25
 800db92:	d1f9      	bne.n	800db88 <_svfiprintf_r+0x50>
 800db94:	ebba 0b04 	subs.w	fp, sl, r4
 800db98:	d00b      	beq.n	800dbb2 <_svfiprintf_r+0x7a>
 800db9a:	465b      	mov	r3, fp
 800db9c:	4622      	mov	r2, r4
 800db9e:	4629      	mov	r1, r5
 800dba0:	4638      	mov	r0, r7
 800dba2:	f7ff ff6f 	bl	800da84 <__ssputs_r>
 800dba6:	3001      	adds	r0, #1
 800dba8:	f000 80a9 	beq.w	800dcfe <_svfiprintf_r+0x1c6>
 800dbac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbae:	445a      	add	r2, fp
 800dbb0:	9209      	str	r2, [sp, #36]	; 0x24
 800dbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 80a1 	beq.w	800dcfe <_svfiprintf_r+0x1c6>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbc6:	f10a 0a01 	add.w	sl, sl, #1
 800dbca:	9304      	str	r3, [sp, #16]
 800dbcc:	9307      	str	r3, [sp, #28]
 800dbce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbd2:	931a      	str	r3, [sp, #104]	; 0x68
 800dbd4:	4654      	mov	r4, sl
 800dbd6:	2205      	movs	r2, #5
 800dbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbdc:	4850      	ldr	r0, [pc, #320]	; (800dd20 <_svfiprintf_r+0x1e8>)
 800dbde:	f7f2 faf7 	bl	80001d0 <memchr>
 800dbe2:	9a04      	ldr	r2, [sp, #16]
 800dbe4:	b9d8      	cbnz	r0, 800dc1e <_svfiprintf_r+0xe6>
 800dbe6:	06d0      	lsls	r0, r2, #27
 800dbe8:	bf44      	itt	mi
 800dbea:	2320      	movmi	r3, #32
 800dbec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbf0:	0711      	lsls	r1, r2, #28
 800dbf2:	bf44      	itt	mi
 800dbf4:	232b      	movmi	r3, #43	; 0x2b
 800dbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800dc00:	d015      	beq.n	800dc2e <_svfiprintf_r+0xf6>
 800dc02:	9a07      	ldr	r2, [sp, #28]
 800dc04:	4654      	mov	r4, sl
 800dc06:	2000      	movs	r0, #0
 800dc08:	f04f 0c0a 	mov.w	ip, #10
 800dc0c:	4621      	mov	r1, r4
 800dc0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc12:	3b30      	subs	r3, #48	; 0x30
 800dc14:	2b09      	cmp	r3, #9
 800dc16:	d94d      	bls.n	800dcb4 <_svfiprintf_r+0x17c>
 800dc18:	b1b0      	cbz	r0, 800dc48 <_svfiprintf_r+0x110>
 800dc1a:	9207      	str	r2, [sp, #28]
 800dc1c:	e014      	b.n	800dc48 <_svfiprintf_r+0x110>
 800dc1e:	eba0 0308 	sub.w	r3, r0, r8
 800dc22:	fa09 f303 	lsl.w	r3, r9, r3
 800dc26:	4313      	orrs	r3, r2
 800dc28:	9304      	str	r3, [sp, #16]
 800dc2a:	46a2      	mov	sl, r4
 800dc2c:	e7d2      	b.n	800dbd4 <_svfiprintf_r+0x9c>
 800dc2e:	9b03      	ldr	r3, [sp, #12]
 800dc30:	1d19      	adds	r1, r3, #4
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	9103      	str	r1, [sp, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	bfbb      	ittet	lt
 800dc3a:	425b      	neglt	r3, r3
 800dc3c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc40:	9307      	strge	r3, [sp, #28]
 800dc42:	9307      	strlt	r3, [sp, #28]
 800dc44:	bfb8      	it	lt
 800dc46:	9204      	strlt	r2, [sp, #16]
 800dc48:	7823      	ldrb	r3, [r4, #0]
 800dc4a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc4c:	d10c      	bne.n	800dc68 <_svfiprintf_r+0x130>
 800dc4e:	7863      	ldrb	r3, [r4, #1]
 800dc50:	2b2a      	cmp	r3, #42	; 0x2a
 800dc52:	d134      	bne.n	800dcbe <_svfiprintf_r+0x186>
 800dc54:	9b03      	ldr	r3, [sp, #12]
 800dc56:	1d1a      	adds	r2, r3, #4
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	9203      	str	r2, [sp, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	bfb8      	it	lt
 800dc60:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc64:	3402      	adds	r4, #2
 800dc66:	9305      	str	r3, [sp, #20]
 800dc68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dd30 <_svfiprintf_r+0x1f8>
 800dc6c:	7821      	ldrb	r1, [r4, #0]
 800dc6e:	2203      	movs	r2, #3
 800dc70:	4650      	mov	r0, sl
 800dc72:	f7f2 faad 	bl	80001d0 <memchr>
 800dc76:	b138      	cbz	r0, 800dc88 <_svfiprintf_r+0x150>
 800dc78:	9b04      	ldr	r3, [sp, #16]
 800dc7a:	eba0 000a 	sub.w	r0, r0, sl
 800dc7e:	2240      	movs	r2, #64	; 0x40
 800dc80:	4082      	lsls	r2, r0
 800dc82:	4313      	orrs	r3, r2
 800dc84:	3401      	adds	r4, #1
 800dc86:	9304      	str	r3, [sp, #16]
 800dc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8c:	4825      	ldr	r0, [pc, #148]	; (800dd24 <_svfiprintf_r+0x1ec>)
 800dc8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc92:	2206      	movs	r2, #6
 800dc94:	f7f2 fa9c 	bl	80001d0 <memchr>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d038      	beq.n	800dd0e <_svfiprintf_r+0x1d6>
 800dc9c:	4b22      	ldr	r3, [pc, #136]	; (800dd28 <_svfiprintf_r+0x1f0>)
 800dc9e:	bb1b      	cbnz	r3, 800dce8 <_svfiprintf_r+0x1b0>
 800dca0:	9b03      	ldr	r3, [sp, #12]
 800dca2:	3307      	adds	r3, #7
 800dca4:	f023 0307 	bic.w	r3, r3, #7
 800dca8:	3308      	adds	r3, #8
 800dcaa:	9303      	str	r3, [sp, #12]
 800dcac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcae:	4433      	add	r3, r6
 800dcb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcb2:	e768      	b.n	800db86 <_svfiprintf_r+0x4e>
 800dcb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcb8:	460c      	mov	r4, r1
 800dcba:	2001      	movs	r0, #1
 800dcbc:	e7a6      	b.n	800dc0c <_svfiprintf_r+0xd4>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	3401      	adds	r4, #1
 800dcc2:	9305      	str	r3, [sp, #20]
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	f04f 0c0a 	mov.w	ip, #10
 800dcca:	4620      	mov	r0, r4
 800dccc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcd0:	3a30      	subs	r2, #48	; 0x30
 800dcd2:	2a09      	cmp	r2, #9
 800dcd4:	d903      	bls.n	800dcde <_svfiprintf_r+0x1a6>
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d0c6      	beq.n	800dc68 <_svfiprintf_r+0x130>
 800dcda:	9105      	str	r1, [sp, #20]
 800dcdc:	e7c4      	b.n	800dc68 <_svfiprintf_r+0x130>
 800dcde:	fb0c 2101 	mla	r1, ip, r1, r2
 800dce2:	4604      	mov	r4, r0
 800dce4:	2301      	movs	r3, #1
 800dce6:	e7f0      	b.n	800dcca <_svfiprintf_r+0x192>
 800dce8:	ab03      	add	r3, sp, #12
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	462a      	mov	r2, r5
 800dcee:	4b0f      	ldr	r3, [pc, #60]	; (800dd2c <_svfiprintf_r+0x1f4>)
 800dcf0:	a904      	add	r1, sp, #16
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	f7fd fe12 	bl	800b91c <_printf_float>
 800dcf8:	1c42      	adds	r2, r0, #1
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	d1d6      	bne.n	800dcac <_svfiprintf_r+0x174>
 800dcfe:	89ab      	ldrh	r3, [r5, #12]
 800dd00:	065b      	lsls	r3, r3, #25
 800dd02:	f53f af2d 	bmi.w	800db60 <_svfiprintf_r+0x28>
 800dd06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd08:	b01d      	add	sp, #116	; 0x74
 800dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0e:	ab03      	add	r3, sp, #12
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	462a      	mov	r2, r5
 800dd14:	4b05      	ldr	r3, [pc, #20]	; (800dd2c <_svfiprintf_r+0x1f4>)
 800dd16:	a904      	add	r1, sp, #16
 800dd18:	4638      	mov	r0, r7
 800dd1a:	f7fe f8a3 	bl	800be64 <_printf_i>
 800dd1e:	e7eb      	b.n	800dcf8 <_svfiprintf_r+0x1c0>
 800dd20:	0800f3f4 	.word	0x0800f3f4
 800dd24:	0800f3fe 	.word	0x0800f3fe
 800dd28:	0800b91d 	.word	0x0800b91d
 800dd2c:	0800da85 	.word	0x0800da85
 800dd30:	0800f3fa 	.word	0x0800f3fa

0800dd34 <__sflush_r>:
 800dd34:	898a      	ldrh	r2, [r1, #12]
 800dd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	4605      	mov	r5, r0
 800dd3c:	0710      	lsls	r0, r2, #28
 800dd3e:	460c      	mov	r4, r1
 800dd40:	d458      	bmi.n	800ddf4 <__sflush_r+0xc0>
 800dd42:	684b      	ldr	r3, [r1, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	dc05      	bgt.n	800dd54 <__sflush_r+0x20>
 800dd48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	dc02      	bgt.n	800dd54 <__sflush_r+0x20>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd56:	2e00      	cmp	r6, #0
 800dd58:	d0f9      	beq.n	800dd4e <__sflush_r+0x1a>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd60:	682f      	ldr	r7, [r5, #0]
 800dd62:	6a21      	ldr	r1, [r4, #32]
 800dd64:	602b      	str	r3, [r5, #0]
 800dd66:	d032      	beq.n	800ddce <__sflush_r+0x9a>
 800dd68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	075a      	lsls	r2, r3, #29
 800dd6e:	d505      	bpl.n	800dd7c <__sflush_r+0x48>
 800dd70:	6863      	ldr	r3, [r4, #4]
 800dd72:	1ac0      	subs	r0, r0, r3
 800dd74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd76:	b10b      	cbz	r3, 800dd7c <__sflush_r+0x48>
 800dd78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd7a:	1ac0      	subs	r0, r0, r3
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	4602      	mov	r2, r0
 800dd80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd82:	6a21      	ldr	r1, [r4, #32]
 800dd84:	4628      	mov	r0, r5
 800dd86:	47b0      	blx	r6
 800dd88:	1c43      	adds	r3, r0, #1
 800dd8a:	89a3      	ldrh	r3, [r4, #12]
 800dd8c:	d106      	bne.n	800dd9c <__sflush_r+0x68>
 800dd8e:	6829      	ldr	r1, [r5, #0]
 800dd90:	291d      	cmp	r1, #29
 800dd92:	d82b      	bhi.n	800ddec <__sflush_r+0xb8>
 800dd94:	4a29      	ldr	r2, [pc, #164]	; (800de3c <__sflush_r+0x108>)
 800dd96:	410a      	asrs	r2, r1
 800dd98:	07d6      	lsls	r6, r2, #31
 800dd9a:	d427      	bmi.n	800ddec <__sflush_r+0xb8>
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	6062      	str	r2, [r4, #4]
 800dda0:	04d9      	lsls	r1, r3, #19
 800dda2:	6922      	ldr	r2, [r4, #16]
 800dda4:	6022      	str	r2, [r4, #0]
 800dda6:	d504      	bpl.n	800ddb2 <__sflush_r+0x7e>
 800dda8:	1c42      	adds	r2, r0, #1
 800ddaa:	d101      	bne.n	800ddb0 <__sflush_r+0x7c>
 800ddac:	682b      	ldr	r3, [r5, #0]
 800ddae:	b903      	cbnz	r3, 800ddb2 <__sflush_r+0x7e>
 800ddb0:	6560      	str	r0, [r4, #84]	; 0x54
 800ddb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddb4:	602f      	str	r7, [r5, #0]
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	d0c9      	beq.n	800dd4e <__sflush_r+0x1a>
 800ddba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddbe:	4299      	cmp	r1, r3
 800ddc0:	d002      	beq.n	800ddc8 <__sflush_r+0x94>
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f7ff f9e2 	bl	800d18c <_free_r>
 800ddc8:	2000      	movs	r0, #0
 800ddca:	6360      	str	r0, [r4, #52]	; 0x34
 800ddcc:	e7c0      	b.n	800dd50 <__sflush_r+0x1c>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	47b0      	blx	r6
 800ddd4:	1c41      	adds	r1, r0, #1
 800ddd6:	d1c8      	bne.n	800dd6a <__sflush_r+0x36>
 800ddd8:	682b      	ldr	r3, [r5, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0c5      	beq.n	800dd6a <__sflush_r+0x36>
 800ddde:	2b1d      	cmp	r3, #29
 800dde0:	d001      	beq.n	800dde6 <__sflush_r+0xb2>
 800dde2:	2b16      	cmp	r3, #22
 800dde4:	d101      	bne.n	800ddea <__sflush_r+0xb6>
 800dde6:	602f      	str	r7, [r5, #0]
 800dde8:	e7b1      	b.n	800dd4e <__sflush_r+0x1a>
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddf0:	81a3      	strh	r3, [r4, #12]
 800ddf2:	e7ad      	b.n	800dd50 <__sflush_r+0x1c>
 800ddf4:	690f      	ldr	r7, [r1, #16]
 800ddf6:	2f00      	cmp	r7, #0
 800ddf8:	d0a9      	beq.n	800dd4e <__sflush_r+0x1a>
 800ddfa:	0793      	lsls	r3, r2, #30
 800ddfc:	680e      	ldr	r6, [r1, #0]
 800ddfe:	bf08      	it	eq
 800de00:	694b      	ldreq	r3, [r1, #20]
 800de02:	600f      	str	r7, [r1, #0]
 800de04:	bf18      	it	ne
 800de06:	2300      	movne	r3, #0
 800de08:	eba6 0807 	sub.w	r8, r6, r7
 800de0c:	608b      	str	r3, [r1, #8]
 800de0e:	f1b8 0f00 	cmp.w	r8, #0
 800de12:	dd9c      	ble.n	800dd4e <__sflush_r+0x1a>
 800de14:	6a21      	ldr	r1, [r4, #32]
 800de16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de18:	4643      	mov	r3, r8
 800de1a:	463a      	mov	r2, r7
 800de1c:	4628      	mov	r0, r5
 800de1e:	47b0      	blx	r6
 800de20:	2800      	cmp	r0, #0
 800de22:	dc06      	bgt.n	800de32 <__sflush_r+0xfe>
 800de24:	89a3      	ldrh	r3, [r4, #12]
 800de26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de2a:	81a3      	strh	r3, [r4, #12]
 800de2c:	f04f 30ff 	mov.w	r0, #4294967295
 800de30:	e78e      	b.n	800dd50 <__sflush_r+0x1c>
 800de32:	4407      	add	r7, r0
 800de34:	eba8 0800 	sub.w	r8, r8, r0
 800de38:	e7e9      	b.n	800de0e <__sflush_r+0xda>
 800de3a:	bf00      	nop
 800de3c:	dfbffffe 	.word	0xdfbffffe

0800de40 <_fflush_r>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	690b      	ldr	r3, [r1, #16]
 800de44:	4605      	mov	r5, r0
 800de46:	460c      	mov	r4, r1
 800de48:	b913      	cbnz	r3, 800de50 <_fflush_r+0x10>
 800de4a:	2500      	movs	r5, #0
 800de4c:	4628      	mov	r0, r5
 800de4e:	bd38      	pop	{r3, r4, r5, pc}
 800de50:	b118      	cbz	r0, 800de5a <_fflush_r+0x1a>
 800de52:	6a03      	ldr	r3, [r0, #32]
 800de54:	b90b      	cbnz	r3, 800de5a <_fflush_r+0x1a>
 800de56:	f7fe f9a1 	bl	800c19c <__sinit>
 800de5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d0f3      	beq.n	800de4a <_fflush_r+0xa>
 800de62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de64:	07d0      	lsls	r0, r2, #31
 800de66:	d404      	bmi.n	800de72 <_fflush_r+0x32>
 800de68:	0599      	lsls	r1, r3, #22
 800de6a:	d402      	bmi.n	800de72 <_fflush_r+0x32>
 800de6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de6e:	f7fe fb01 	bl	800c474 <__retarget_lock_acquire_recursive>
 800de72:	4628      	mov	r0, r5
 800de74:	4621      	mov	r1, r4
 800de76:	f7ff ff5d 	bl	800dd34 <__sflush_r>
 800de7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de7c:	07da      	lsls	r2, r3, #31
 800de7e:	4605      	mov	r5, r0
 800de80:	d4e4      	bmi.n	800de4c <_fflush_r+0xc>
 800de82:	89a3      	ldrh	r3, [r4, #12]
 800de84:	059b      	lsls	r3, r3, #22
 800de86:	d4e1      	bmi.n	800de4c <_fflush_r+0xc>
 800de88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de8a:	f7fe faf4 	bl	800c476 <__retarget_lock_release_recursive>
 800de8e:	e7dd      	b.n	800de4c <_fflush_r+0xc>

0800de90 <memmove>:
 800de90:	4288      	cmp	r0, r1
 800de92:	b510      	push	{r4, lr}
 800de94:	eb01 0402 	add.w	r4, r1, r2
 800de98:	d902      	bls.n	800dea0 <memmove+0x10>
 800de9a:	4284      	cmp	r4, r0
 800de9c:	4623      	mov	r3, r4
 800de9e:	d807      	bhi.n	800deb0 <memmove+0x20>
 800dea0:	1e43      	subs	r3, r0, #1
 800dea2:	42a1      	cmp	r1, r4
 800dea4:	d008      	beq.n	800deb8 <memmove+0x28>
 800dea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800deaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deae:	e7f8      	b.n	800dea2 <memmove+0x12>
 800deb0:	4402      	add	r2, r0
 800deb2:	4601      	mov	r1, r0
 800deb4:	428a      	cmp	r2, r1
 800deb6:	d100      	bne.n	800deba <memmove+0x2a>
 800deb8:	bd10      	pop	{r4, pc}
 800deba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800debe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dec2:	e7f7      	b.n	800deb4 <memmove+0x24>

0800dec4 <_sbrk_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d06      	ldr	r5, [pc, #24]	; (800dee0 <_sbrk_r+0x1c>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	602b      	str	r3, [r5, #0]
 800ded0:	f7f5 feca 	bl	8003c68 <_sbrk>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_sbrk_r+0x1a>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	b103      	cbz	r3, 800dede <_sbrk_r+0x1a>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	200053c0 	.word	0x200053c0

0800dee4 <__assert_func>:
 800dee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dee6:	4614      	mov	r4, r2
 800dee8:	461a      	mov	r2, r3
 800deea:	4b09      	ldr	r3, [pc, #36]	; (800df10 <__assert_func+0x2c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4605      	mov	r5, r0
 800def0:	68d8      	ldr	r0, [r3, #12]
 800def2:	b14c      	cbz	r4, 800df08 <__assert_func+0x24>
 800def4:	4b07      	ldr	r3, [pc, #28]	; (800df14 <__assert_func+0x30>)
 800def6:	9100      	str	r1, [sp, #0]
 800def8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800defc:	4906      	ldr	r1, [pc, #24]	; (800df18 <__assert_func+0x34>)
 800defe:	462b      	mov	r3, r5
 800df00:	f000 f872 	bl	800dfe8 <fiprintf>
 800df04:	f000 f882 	bl	800e00c <abort>
 800df08:	4b04      	ldr	r3, [pc, #16]	; (800df1c <__assert_func+0x38>)
 800df0a:	461c      	mov	r4, r3
 800df0c:	e7f3      	b.n	800def6 <__assert_func+0x12>
 800df0e:	bf00      	nop
 800df10:	2000006c 	.word	0x2000006c
 800df14:	0800f40f 	.word	0x0800f40f
 800df18:	0800f41c 	.word	0x0800f41c
 800df1c:	0800f44a 	.word	0x0800f44a

0800df20 <_calloc_r>:
 800df20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df22:	fba1 2402 	umull	r2, r4, r1, r2
 800df26:	b94c      	cbnz	r4, 800df3c <_calloc_r+0x1c>
 800df28:	4611      	mov	r1, r2
 800df2a:	9201      	str	r2, [sp, #4]
 800df2c:	f7ff f9a2 	bl	800d274 <_malloc_r>
 800df30:	9a01      	ldr	r2, [sp, #4]
 800df32:	4605      	mov	r5, r0
 800df34:	b930      	cbnz	r0, 800df44 <_calloc_r+0x24>
 800df36:	4628      	mov	r0, r5
 800df38:	b003      	add	sp, #12
 800df3a:	bd30      	pop	{r4, r5, pc}
 800df3c:	220c      	movs	r2, #12
 800df3e:	6002      	str	r2, [r0, #0]
 800df40:	2500      	movs	r5, #0
 800df42:	e7f8      	b.n	800df36 <_calloc_r+0x16>
 800df44:	4621      	mov	r1, r4
 800df46:	f7fe f9c2 	bl	800c2ce <memset>
 800df4a:	e7f4      	b.n	800df36 <_calloc_r+0x16>

0800df4c <__ascii_mbtowc>:
 800df4c:	b082      	sub	sp, #8
 800df4e:	b901      	cbnz	r1, 800df52 <__ascii_mbtowc+0x6>
 800df50:	a901      	add	r1, sp, #4
 800df52:	b142      	cbz	r2, 800df66 <__ascii_mbtowc+0x1a>
 800df54:	b14b      	cbz	r3, 800df6a <__ascii_mbtowc+0x1e>
 800df56:	7813      	ldrb	r3, [r2, #0]
 800df58:	600b      	str	r3, [r1, #0]
 800df5a:	7812      	ldrb	r2, [r2, #0]
 800df5c:	1e10      	subs	r0, r2, #0
 800df5e:	bf18      	it	ne
 800df60:	2001      	movne	r0, #1
 800df62:	b002      	add	sp, #8
 800df64:	4770      	bx	lr
 800df66:	4610      	mov	r0, r2
 800df68:	e7fb      	b.n	800df62 <__ascii_mbtowc+0x16>
 800df6a:	f06f 0001 	mvn.w	r0, #1
 800df6e:	e7f8      	b.n	800df62 <__ascii_mbtowc+0x16>

0800df70 <_realloc_r>:
 800df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df74:	4680      	mov	r8, r0
 800df76:	4614      	mov	r4, r2
 800df78:	460e      	mov	r6, r1
 800df7a:	b921      	cbnz	r1, 800df86 <_realloc_r+0x16>
 800df7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	4611      	mov	r1, r2
 800df82:	f7ff b977 	b.w	800d274 <_malloc_r>
 800df86:	b92a      	cbnz	r2, 800df94 <_realloc_r+0x24>
 800df88:	f7ff f900 	bl	800d18c <_free_r>
 800df8c:	4625      	mov	r5, r4
 800df8e:	4628      	mov	r0, r5
 800df90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df94:	f000 f841 	bl	800e01a <_malloc_usable_size_r>
 800df98:	4284      	cmp	r4, r0
 800df9a:	4607      	mov	r7, r0
 800df9c:	d802      	bhi.n	800dfa4 <_realloc_r+0x34>
 800df9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfa2:	d812      	bhi.n	800dfca <_realloc_r+0x5a>
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	f7ff f964 	bl	800d274 <_malloc_r>
 800dfac:	4605      	mov	r5, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d0ed      	beq.n	800df8e <_realloc_r+0x1e>
 800dfb2:	42bc      	cmp	r4, r7
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	bf28      	it	cs
 800dfba:	463a      	movcs	r2, r7
 800dfbc:	f7fe fa5c 	bl	800c478 <memcpy>
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	f7ff f8e2 	bl	800d18c <_free_r>
 800dfc8:	e7e1      	b.n	800df8e <_realloc_r+0x1e>
 800dfca:	4635      	mov	r5, r6
 800dfcc:	e7df      	b.n	800df8e <_realloc_r+0x1e>

0800dfce <__ascii_wctomb>:
 800dfce:	b149      	cbz	r1, 800dfe4 <__ascii_wctomb+0x16>
 800dfd0:	2aff      	cmp	r2, #255	; 0xff
 800dfd2:	bf85      	ittet	hi
 800dfd4:	238a      	movhi	r3, #138	; 0x8a
 800dfd6:	6003      	strhi	r3, [r0, #0]
 800dfd8:	700a      	strbls	r2, [r1, #0]
 800dfda:	f04f 30ff 	movhi.w	r0, #4294967295
 800dfde:	bf98      	it	ls
 800dfe0:	2001      	movls	r0, #1
 800dfe2:	4770      	bx	lr
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	4770      	bx	lr

0800dfe8 <fiprintf>:
 800dfe8:	b40e      	push	{r1, r2, r3}
 800dfea:	b503      	push	{r0, r1, lr}
 800dfec:	4601      	mov	r1, r0
 800dfee:	ab03      	add	r3, sp, #12
 800dff0:	4805      	ldr	r0, [pc, #20]	; (800e008 <fiprintf+0x20>)
 800dff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff6:	6800      	ldr	r0, [r0, #0]
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	f000 f83f 	bl	800e07c <_vfiprintf_r>
 800dffe:	b002      	add	sp, #8
 800e000:	f85d eb04 	ldr.w	lr, [sp], #4
 800e004:	b003      	add	sp, #12
 800e006:	4770      	bx	lr
 800e008:	2000006c 	.word	0x2000006c

0800e00c <abort>:
 800e00c:	b508      	push	{r3, lr}
 800e00e:	2006      	movs	r0, #6
 800e010:	f000 fa0c 	bl	800e42c <raise>
 800e014:	2001      	movs	r0, #1
 800e016:	f7f5 fdaf 	bl	8003b78 <_exit>

0800e01a <_malloc_usable_size_r>:
 800e01a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e01e:	1f18      	subs	r0, r3, #4
 800e020:	2b00      	cmp	r3, #0
 800e022:	bfbc      	itt	lt
 800e024:	580b      	ldrlt	r3, [r1, r0]
 800e026:	18c0      	addlt	r0, r0, r3
 800e028:	4770      	bx	lr

0800e02a <__sfputc_r>:
 800e02a:	6893      	ldr	r3, [r2, #8]
 800e02c:	3b01      	subs	r3, #1
 800e02e:	2b00      	cmp	r3, #0
 800e030:	b410      	push	{r4}
 800e032:	6093      	str	r3, [r2, #8]
 800e034:	da08      	bge.n	800e048 <__sfputc_r+0x1e>
 800e036:	6994      	ldr	r4, [r2, #24]
 800e038:	42a3      	cmp	r3, r4
 800e03a:	db01      	blt.n	800e040 <__sfputc_r+0x16>
 800e03c:	290a      	cmp	r1, #10
 800e03e:	d103      	bne.n	800e048 <__sfputc_r+0x1e>
 800e040:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e044:	f000 b934 	b.w	800e2b0 <__swbuf_r>
 800e048:	6813      	ldr	r3, [r2, #0]
 800e04a:	1c58      	adds	r0, r3, #1
 800e04c:	6010      	str	r0, [r2, #0]
 800e04e:	7019      	strb	r1, [r3, #0]
 800e050:	4608      	mov	r0, r1
 800e052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <__sfputs_r>:
 800e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e05a:	4606      	mov	r6, r0
 800e05c:	460f      	mov	r7, r1
 800e05e:	4614      	mov	r4, r2
 800e060:	18d5      	adds	r5, r2, r3
 800e062:	42ac      	cmp	r4, r5
 800e064:	d101      	bne.n	800e06a <__sfputs_r+0x12>
 800e066:	2000      	movs	r0, #0
 800e068:	e007      	b.n	800e07a <__sfputs_r+0x22>
 800e06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06e:	463a      	mov	r2, r7
 800e070:	4630      	mov	r0, r6
 800e072:	f7ff ffda 	bl	800e02a <__sfputc_r>
 800e076:	1c43      	adds	r3, r0, #1
 800e078:	d1f3      	bne.n	800e062 <__sfputs_r+0xa>
 800e07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e07c <_vfiprintf_r>:
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	460d      	mov	r5, r1
 800e082:	b09d      	sub	sp, #116	; 0x74
 800e084:	4614      	mov	r4, r2
 800e086:	4698      	mov	r8, r3
 800e088:	4606      	mov	r6, r0
 800e08a:	b118      	cbz	r0, 800e094 <_vfiprintf_r+0x18>
 800e08c:	6a03      	ldr	r3, [r0, #32]
 800e08e:	b90b      	cbnz	r3, 800e094 <_vfiprintf_r+0x18>
 800e090:	f7fe f884 	bl	800c19c <__sinit>
 800e094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e096:	07d9      	lsls	r1, r3, #31
 800e098:	d405      	bmi.n	800e0a6 <_vfiprintf_r+0x2a>
 800e09a:	89ab      	ldrh	r3, [r5, #12]
 800e09c:	059a      	lsls	r2, r3, #22
 800e09e:	d402      	bmi.n	800e0a6 <_vfiprintf_r+0x2a>
 800e0a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0a2:	f7fe f9e7 	bl	800c474 <__retarget_lock_acquire_recursive>
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	071b      	lsls	r3, r3, #28
 800e0aa:	d501      	bpl.n	800e0b0 <_vfiprintf_r+0x34>
 800e0ac:	692b      	ldr	r3, [r5, #16]
 800e0ae:	b99b      	cbnz	r3, 800e0d8 <_vfiprintf_r+0x5c>
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f000 f93a 	bl	800e32c <__swsetup_r>
 800e0b8:	b170      	cbz	r0, 800e0d8 <_vfiprintf_r+0x5c>
 800e0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0bc:	07dc      	lsls	r4, r3, #31
 800e0be:	d504      	bpl.n	800e0ca <_vfiprintf_r+0x4e>
 800e0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0c4:	b01d      	add	sp, #116	; 0x74
 800e0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0ca:	89ab      	ldrh	r3, [r5, #12]
 800e0cc:	0598      	lsls	r0, r3, #22
 800e0ce:	d4f7      	bmi.n	800e0c0 <_vfiprintf_r+0x44>
 800e0d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0d2:	f7fe f9d0 	bl	800c476 <__retarget_lock_release_recursive>
 800e0d6:	e7f3      	b.n	800e0c0 <_vfiprintf_r+0x44>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	9309      	str	r3, [sp, #36]	; 0x24
 800e0dc:	2320      	movs	r3, #32
 800e0de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e6:	2330      	movs	r3, #48	; 0x30
 800e0e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e29c <_vfiprintf_r+0x220>
 800e0ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0f0:	f04f 0901 	mov.w	r9, #1
 800e0f4:	4623      	mov	r3, r4
 800e0f6:	469a      	mov	sl, r3
 800e0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0fc:	b10a      	cbz	r2, 800e102 <_vfiprintf_r+0x86>
 800e0fe:	2a25      	cmp	r2, #37	; 0x25
 800e100:	d1f9      	bne.n	800e0f6 <_vfiprintf_r+0x7a>
 800e102:	ebba 0b04 	subs.w	fp, sl, r4
 800e106:	d00b      	beq.n	800e120 <_vfiprintf_r+0xa4>
 800e108:	465b      	mov	r3, fp
 800e10a:	4622      	mov	r2, r4
 800e10c:	4629      	mov	r1, r5
 800e10e:	4630      	mov	r0, r6
 800e110:	f7ff ffa2 	bl	800e058 <__sfputs_r>
 800e114:	3001      	adds	r0, #1
 800e116:	f000 80a9 	beq.w	800e26c <_vfiprintf_r+0x1f0>
 800e11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e11c:	445a      	add	r2, fp
 800e11e:	9209      	str	r2, [sp, #36]	; 0x24
 800e120:	f89a 3000 	ldrb.w	r3, [sl]
 800e124:	2b00      	cmp	r3, #0
 800e126:	f000 80a1 	beq.w	800e26c <_vfiprintf_r+0x1f0>
 800e12a:	2300      	movs	r3, #0
 800e12c:	f04f 32ff 	mov.w	r2, #4294967295
 800e130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e134:	f10a 0a01 	add.w	sl, sl, #1
 800e138:	9304      	str	r3, [sp, #16]
 800e13a:	9307      	str	r3, [sp, #28]
 800e13c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e140:	931a      	str	r3, [sp, #104]	; 0x68
 800e142:	4654      	mov	r4, sl
 800e144:	2205      	movs	r2, #5
 800e146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e14a:	4854      	ldr	r0, [pc, #336]	; (800e29c <_vfiprintf_r+0x220>)
 800e14c:	f7f2 f840 	bl	80001d0 <memchr>
 800e150:	9a04      	ldr	r2, [sp, #16]
 800e152:	b9d8      	cbnz	r0, 800e18c <_vfiprintf_r+0x110>
 800e154:	06d1      	lsls	r1, r2, #27
 800e156:	bf44      	itt	mi
 800e158:	2320      	movmi	r3, #32
 800e15a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e15e:	0713      	lsls	r3, r2, #28
 800e160:	bf44      	itt	mi
 800e162:	232b      	movmi	r3, #43	; 0x2b
 800e164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e168:	f89a 3000 	ldrb.w	r3, [sl]
 800e16c:	2b2a      	cmp	r3, #42	; 0x2a
 800e16e:	d015      	beq.n	800e19c <_vfiprintf_r+0x120>
 800e170:	9a07      	ldr	r2, [sp, #28]
 800e172:	4654      	mov	r4, sl
 800e174:	2000      	movs	r0, #0
 800e176:	f04f 0c0a 	mov.w	ip, #10
 800e17a:	4621      	mov	r1, r4
 800e17c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e180:	3b30      	subs	r3, #48	; 0x30
 800e182:	2b09      	cmp	r3, #9
 800e184:	d94d      	bls.n	800e222 <_vfiprintf_r+0x1a6>
 800e186:	b1b0      	cbz	r0, 800e1b6 <_vfiprintf_r+0x13a>
 800e188:	9207      	str	r2, [sp, #28]
 800e18a:	e014      	b.n	800e1b6 <_vfiprintf_r+0x13a>
 800e18c:	eba0 0308 	sub.w	r3, r0, r8
 800e190:	fa09 f303 	lsl.w	r3, r9, r3
 800e194:	4313      	orrs	r3, r2
 800e196:	9304      	str	r3, [sp, #16]
 800e198:	46a2      	mov	sl, r4
 800e19a:	e7d2      	b.n	800e142 <_vfiprintf_r+0xc6>
 800e19c:	9b03      	ldr	r3, [sp, #12]
 800e19e:	1d19      	adds	r1, r3, #4
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	9103      	str	r1, [sp, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	bfbb      	ittet	lt
 800e1a8:	425b      	neglt	r3, r3
 800e1aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ae:	9307      	strge	r3, [sp, #28]
 800e1b0:	9307      	strlt	r3, [sp, #28]
 800e1b2:	bfb8      	it	lt
 800e1b4:	9204      	strlt	r2, [sp, #16]
 800e1b6:	7823      	ldrb	r3, [r4, #0]
 800e1b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ba:	d10c      	bne.n	800e1d6 <_vfiprintf_r+0x15a>
 800e1bc:	7863      	ldrb	r3, [r4, #1]
 800e1be:	2b2a      	cmp	r3, #42	; 0x2a
 800e1c0:	d134      	bne.n	800e22c <_vfiprintf_r+0x1b0>
 800e1c2:	9b03      	ldr	r3, [sp, #12]
 800e1c4:	1d1a      	adds	r2, r3, #4
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	9203      	str	r2, [sp, #12]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	bfb8      	it	lt
 800e1ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1d2:	3402      	adds	r4, #2
 800e1d4:	9305      	str	r3, [sp, #20]
 800e1d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e2ac <_vfiprintf_r+0x230>
 800e1da:	7821      	ldrb	r1, [r4, #0]
 800e1dc:	2203      	movs	r2, #3
 800e1de:	4650      	mov	r0, sl
 800e1e0:	f7f1 fff6 	bl	80001d0 <memchr>
 800e1e4:	b138      	cbz	r0, 800e1f6 <_vfiprintf_r+0x17a>
 800e1e6:	9b04      	ldr	r3, [sp, #16]
 800e1e8:	eba0 000a 	sub.w	r0, r0, sl
 800e1ec:	2240      	movs	r2, #64	; 0x40
 800e1ee:	4082      	lsls	r2, r0
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	3401      	adds	r4, #1
 800e1f4:	9304      	str	r3, [sp, #16]
 800e1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1fa:	4829      	ldr	r0, [pc, #164]	; (800e2a0 <_vfiprintf_r+0x224>)
 800e1fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e200:	2206      	movs	r2, #6
 800e202:	f7f1 ffe5 	bl	80001d0 <memchr>
 800e206:	2800      	cmp	r0, #0
 800e208:	d03f      	beq.n	800e28a <_vfiprintf_r+0x20e>
 800e20a:	4b26      	ldr	r3, [pc, #152]	; (800e2a4 <_vfiprintf_r+0x228>)
 800e20c:	bb1b      	cbnz	r3, 800e256 <_vfiprintf_r+0x1da>
 800e20e:	9b03      	ldr	r3, [sp, #12]
 800e210:	3307      	adds	r3, #7
 800e212:	f023 0307 	bic.w	r3, r3, #7
 800e216:	3308      	adds	r3, #8
 800e218:	9303      	str	r3, [sp, #12]
 800e21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e21c:	443b      	add	r3, r7
 800e21e:	9309      	str	r3, [sp, #36]	; 0x24
 800e220:	e768      	b.n	800e0f4 <_vfiprintf_r+0x78>
 800e222:	fb0c 3202 	mla	r2, ip, r2, r3
 800e226:	460c      	mov	r4, r1
 800e228:	2001      	movs	r0, #1
 800e22a:	e7a6      	b.n	800e17a <_vfiprintf_r+0xfe>
 800e22c:	2300      	movs	r3, #0
 800e22e:	3401      	adds	r4, #1
 800e230:	9305      	str	r3, [sp, #20]
 800e232:	4619      	mov	r1, r3
 800e234:	f04f 0c0a 	mov.w	ip, #10
 800e238:	4620      	mov	r0, r4
 800e23a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e23e:	3a30      	subs	r2, #48	; 0x30
 800e240:	2a09      	cmp	r2, #9
 800e242:	d903      	bls.n	800e24c <_vfiprintf_r+0x1d0>
 800e244:	2b00      	cmp	r3, #0
 800e246:	d0c6      	beq.n	800e1d6 <_vfiprintf_r+0x15a>
 800e248:	9105      	str	r1, [sp, #20]
 800e24a:	e7c4      	b.n	800e1d6 <_vfiprintf_r+0x15a>
 800e24c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e250:	4604      	mov	r4, r0
 800e252:	2301      	movs	r3, #1
 800e254:	e7f0      	b.n	800e238 <_vfiprintf_r+0x1bc>
 800e256:	ab03      	add	r3, sp, #12
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	462a      	mov	r2, r5
 800e25c:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <_vfiprintf_r+0x22c>)
 800e25e:	a904      	add	r1, sp, #16
 800e260:	4630      	mov	r0, r6
 800e262:	f7fd fb5b 	bl	800b91c <_printf_float>
 800e266:	4607      	mov	r7, r0
 800e268:	1c78      	adds	r0, r7, #1
 800e26a:	d1d6      	bne.n	800e21a <_vfiprintf_r+0x19e>
 800e26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e26e:	07d9      	lsls	r1, r3, #31
 800e270:	d405      	bmi.n	800e27e <_vfiprintf_r+0x202>
 800e272:	89ab      	ldrh	r3, [r5, #12]
 800e274:	059a      	lsls	r2, r3, #22
 800e276:	d402      	bmi.n	800e27e <_vfiprintf_r+0x202>
 800e278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e27a:	f7fe f8fc 	bl	800c476 <__retarget_lock_release_recursive>
 800e27e:	89ab      	ldrh	r3, [r5, #12]
 800e280:	065b      	lsls	r3, r3, #25
 800e282:	f53f af1d 	bmi.w	800e0c0 <_vfiprintf_r+0x44>
 800e286:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e288:	e71c      	b.n	800e0c4 <_vfiprintf_r+0x48>
 800e28a:	ab03      	add	r3, sp, #12
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	462a      	mov	r2, r5
 800e290:	4b05      	ldr	r3, [pc, #20]	; (800e2a8 <_vfiprintf_r+0x22c>)
 800e292:	a904      	add	r1, sp, #16
 800e294:	4630      	mov	r0, r6
 800e296:	f7fd fde5 	bl	800be64 <_printf_i>
 800e29a:	e7e4      	b.n	800e266 <_vfiprintf_r+0x1ea>
 800e29c:	0800f3f4 	.word	0x0800f3f4
 800e2a0:	0800f3fe 	.word	0x0800f3fe
 800e2a4:	0800b91d 	.word	0x0800b91d
 800e2a8:	0800e059 	.word	0x0800e059
 800e2ac:	0800f3fa 	.word	0x0800f3fa

0800e2b0 <__swbuf_r>:
 800e2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b2:	460e      	mov	r6, r1
 800e2b4:	4614      	mov	r4, r2
 800e2b6:	4605      	mov	r5, r0
 800e2b8:	b118      	cbz	r0, 800e2c2 <__swbuf_r+0x12>
 800e2ba:	6a03      	ldr	r3, [r0, #32]
 800e2bc:	b90b      	cbnz	r3, 800e2c2 <__swbuf_r+0x12>
 800e2be:	f7fd ff6d 	bl	800c19c <__sinit>
 800e2c2:	69a3      	ldr	r3, [r4, #24]
 800e2c4:	60a3      	str	r3, [r4, #8]
 800e2c6:	89a3      	ldrh	r3, [r4, #12]
 800e2c8:	071a      	lsls	r2, r3, #28
 800e2ca:	d525      	bpl.n	800e318 <__swbuf_r+0x68>
 800e2cc:	6923      	ldr	r3, [r4, #16]
 800e2ce:	b31b      	cbz	r3, 800e318 <__swbuf_r+0x68>
 800e2d0:	6823      	ldr	r3, [r4, #0]
 800e2d2:	6922      	ldr	r2, [r4, #16]
 800e2d4:	1a98      	subs	r0, r3, r2
 800e2d6:	6963      	ldr	r3, [r4, #20]
 800e2d8:	b2f6      	uxtb	r6, r6
 800e2da:	4283      	cmp	r3, r0
 800e2dc:	4637      	mov	r7, r6
 800e2de:	dc04      	bgt.n	800e2ea <__swbuf_r+0x3a>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f7ff fdac 	bl	800de40 <_fflush_r>
 800e2e8:	b9e0      	cbnz	r0, 800e324 <__swbuf_r+0x74>
 800e2ea:	68a3      	ldr	r3, [r4, #8]
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	60a3      	str	r3, [r4, #8]
 800e2f0:	6823      	ldr	r3, [r4, #0]
 800e2f2:	1c5a      	adds	r2, r3, #1
 800e2f4:	6022      	str	r2, [r4, #0]
 800e2f6:	701e      	strb	r6, [r3, #0]
 800e2f8:	6962      	ldr	r2, [r4, #20]
 800e2fa:	1c43      	adds	r3, r0, #1
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d004      	beq.n	800e30a <__swbuf_r+0x5a>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	07db      	lsls	r3, r3, #31
 800e304:	d506      	bpl.n	800e314 <__swbuf_r+0x64>
 800e306:	2e0a      	cmp	r6, #10
 800e308:	d104      	bne.n	800e314 <__swbuf_r+0x64>
 800e30a:	4621      	mov	r1, r4
 800e30c:	4628      	mov	r0, r5
 800e30e:	f7ff fd97 	bl	800de40 <_fflush_r>
 800e312:	b938      	cbnz	r0, 800e324 <__swbuf_r+0x74>
 800e314:	4638      	mov	r0, r7
 800e316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e318:	4621      	mov	r1, r4
 800e31a:	4628      	mov	r0, r5
 800e31c:	f000 f806 	bl	800e32c <__swsetup_r>
 800e320:	2800      	cmp	r0, #0
 800e322:	d0d5      	beq.n	800e2d0 <__swbuf_r+0x20>
 800e324:	f04f 37ff 	mov.w	r7, #4294967295
 800e328:	e7f4      	b.n	800e314 <__swbuf_r+0x64>
	...

0800e32c <__swsetup_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4b2a      	ldr	r3, [pc, #168]	; (800e3d8 <__swsetup_r+0xac>)
 800e330:	4605      	mov	r5, r0
 800e332:	6818      	ldr	r0, [r3, #0]
 800e334:	460c      	mov	r4, r1
 800e336:	b118      	cbz	r0, 800e340 <__swsetup_r+0x14>
 800e338:	6a03      	ldr	r3, [r0, #32]
 800e33a:	b90b      	cbnz	r3, 800e340 <__swsetup_r+0x14>
 800e33c:	f7fd ff2e 	bl	800c19c <__sinit>
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e346:	0718      	lsls	r0, r3, #28
 800e348:	d422      	bmi.n	800e390 <__swsetup_r+0x64>
 800e34a:	06d9      	lsls	r1, r3, #27
 800e34c:	d407      	bmi.n	800e35e <__swsetup_r+0x32>
 800e34e:	2309      	movs	r3, #9
 800e350:	602b      	str	r3, [r5, #0]
 800e352:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e356:	81a3      	strh	r3, [r4, #12]
 800e358:	f04f 30ff 	mov.w	r0, #4294967295
 800e35c:	e034      	b.n	800e3c8 <__swsetup_r+0x9c>
 800e35e:	0758      	lsls	r0, r3, #29
 800e360:	d512      	bpl.n	800e388 <__swsetup_r+0x5c>
 800e362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e364:	b141      	cbz	r1, 800e378 <__swsetup_r+0x4c>
 800e366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e36a:	4299      	cmp	r1, r3
 800e36c:	d002      	beq.n	800e374 <__swsetup_r+0x48>
 800e36e:	4628      	mov	r0, r5
 800e370:	f7fe ff0c 	bl	800d18c <_free_r>
 800e374:	2300      	movs	r3, #0
 800e376:	6363      	str	r3, [r4, #52]	; 0x34
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e37e:	81a3      	strh	r3, [r4, #12]
 800e380:	2300      	movs	r3, #0
 800e382:	6063      	str	r3, [r4, #4]
 800e384:	6923      	ldr	r3, [r4, #16]
 800e386:	6023      	str	r3, [r4, #0]
 800e388:	89a3      	ldrh	r3, [r4, #12]
 800e38a:	f043 0308 	orr.w	r3, r3, #8
 800e38e:	81a3      	strh	r3, [r4, #12]
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	b94b      	cbnz	r3, 800e3a8 <__swsetup_r+0x7c>
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e39a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e39e:	d003      	beq.n	800e3a8 <__swsetup_r+0x7c>
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 f884 	bl	800e4b0 <__smakebuf_r>
 800e3a8:	89a0      	ldrh	r0, [r4, #12]
 800e3aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3ae:	f010 0301 	ands.w	r3, r0, #1
 800e3b2:	d00a      	beq.n	800e3ca <__swsetup_r+0x9e>
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	60a3      	str	r3, [r4, #8]
 800e3b8:	6963      	ldr	r3, [r4, #20]
 800e3ba:	425b      	negs	r3, r3
 800e3bc:	61a3      	str	r3, [r4, #24]
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	b943      	cbnz	r3, 800e3d4 <__swsetup_r+0xa8>
 800e3c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3c6:	d1c4      	bne.n	800e352 <__swsetup_r+0x26>
 800e3c8:	bd38      	pop	{r3, r4, r5, pc}
 800e3ca:	0781      	lsls	r1, r0, #30
 800e3cc:	bf58      	it	pl
 800e3ce:	6963      	ldrpl	r3, [r4, #20]
 800e3d0:	60a3      	str	r3, [r4, #8]
 800e3d2:	e7f4      	b.n	800e3be <__swsetup_r+0x92>
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	e7f7      	b.n	800e3c8 <__swsetup_r+0x9c>
 800e3d8:	2000006c 	.word	0x2000006c

0800e3dc <_raise_r>:
 800e3dc:	291f      	cmp	r1, #31
 800e3de:	b538      	push	{r3, r4, r5, lr}
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	460d      	mov	r5, r1
 800e3e4:	d904      	bls.n	800e3f0 <_raise_r+0x14>
 800e3e6:	2316      	movs	r3, #22
 800e3e8:	6003      	str	r3, [r0, #0]
 800e3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e3f2:	b112      	cbz	r2, 800e3fa <_raise_r+0x1e>
 800e3f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3f8:	b94b      	cbnz	r3, 800e40e <_raise_r+0x32>
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 f830 	bl	800e460 <_getpid_r>
 800e400:	462a      	mov	r2, r5
 800e402:	4601      	mov	r1, r0
 800e404:	4620      	mov	r0, r4
 800e406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e40a:	f000 b817 	b.w	800e43c <_kill_r>
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d00a      	beq.n	800e428 <_raise_r+0x4c>
 800e412:	1c59      	adds	r1, r3, #1
 800e414:	d103      	bne.n	800e41e <_raise_r+0x42>
 800e416:	2316      	movs	r3, #22
 800e418:	6003      	str	r3, [r0, #0]
 800e41a:	2001      	movs	r0, #1
 800e41c:	e7e7      	b.n	800e3ee <_raise_r+0x12>
 800e41e:	2400      	movs	r4, #0
 800e420:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e424:	4628      	mov	r0, r5
 800e426:	4798      	blx	r3
 800e428:	2000      	movs	r0, #0
 800e42a:	e7e0      	b.n	800e3ee <_raise_r+0x12>

0800e42c <raise>:
 800e42c:	4b02      	ldr	r3, [pc, #8]	; (800e438 <raise+0xc>)
 800e42e:	4601      	mov	r1, r0
 800e430:	6818      	ldr	r0, [r3, #0]
 800e432:	f7ff bfd3 	b.w	800e3dc <_raise_r>
 800e436:	bf00      	nop
 800e438:	2000006c 	.word	0x2000006c

0800e43c <_kill_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	4d07      	ldr	r5, [pc, #28]	; (800e45c <_kill_r+0x20>)
 800e440:	2300      	movs	r3, #0
 800e442:	4604      	mov	r4, r0
 800e444:	4608      	mov	r0, r1
 800e446:	4611      	mov	r1, r2
 800e448:	602b      	str	r3, [r5, #0]
 800e44a:	f7f5 fb85 	bl	8003b58 <_kill>
 800e44e:	1c43      	adds	r3, r0, #1
 800e450:	d102      	bne.n	800e458 <_kill_r+0x1c>
 800e452:	682b      	ldr	r3, [r5, #0]
 800e454:	b103      	cbz	r3, 800e458 <_kill_r+0x1c>
 800e456:	6023      	str	r3, [r4, #0]
 800e458:	bd38      	pop	{r3, r4, r5, pc}
 800e45a:	bf00      	nop
 800e45c:	200053c0 	.word	0x200053c0

0800e460 <_getpid_r>:
 800e460:	f7f5 bb72 	b.w	8003b48 <_getpid>

0800e464 <__swhatbuf_r>:
 800e464:	b570      	push	{r4, r5, r6, lr}
 800e466:	460c      	mov	r4, r1
 800e468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e46c:	2900      	cmp	r1, #0
 800e46e:	b096      	sub	sp, #88	; 0x58
 800e470:	4615      	mov	r5, r2
 800e472:	461e      	mov	r6, r3
 800e474:	da0d      	bge.n	800e492 <__swhatbuf_r+0x2e>
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e47c:	f04f 0100 	mov.w	r1, #0
 800e480:	bf0c      	ite	eq
 800e482:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e486:	2340      	movne	r3, #64	; 0x40
 800e488:	2000      	movs	r0, #0
 800e48a:	6031      	str	r1, [r6, #0]
 800e48c:	602b      	str	r3, [r5, #0]
 800e48e:	b016      	add	sp, #88	; 0x58
 800e490:	bd70      	pop	{r4, r5, r6, pc}
 800e492:	466a      	mov	r2, sp
 800e494:	f000 f848 	bl	800e528 <_fstat_r>
 800e498:	2800      	cmp	r0, #0
 800e49a:	dbec      	blt.n	800e476 <__swhatbuf_r+0x12>
 800e49c:	9901      	ldr	r1, [sp, #4]
 800e49e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e4a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e4a6:	4259      	negs	r1, r3
 800e4a8:	4159      	adcs	r1, r3
 800e4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ae:	e7eb      	b.n	800e488 <__swhatbuf_r+0x24>

0800e4b0 <__smakebuf_r>:
 800e4b0:	898b      	ldrh	r3, [r1, #12]
 800e4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4b4:	079d      	lsls	r5, r3, #30
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	460c      	mov	r4, r1
 800e4ba:	d507      	bpl.n	800e4cc <__smakebuf_r+0x1c>
 800e4bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4c0:	6023      	str	r3, [r4, #0]
 800e4c2:	6123      	str	r3, [r4, #16]
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	6163      	str	r3, [r4, #20]
 800e4c8:	b002      	add	sp, #8
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}
 800e4cc:	ab01      	add	r3, sp, #4
 800e4ce:	466a      	mov	r2, sp
 800e4d0:	f7ff ffc8 	bl	800e464 <__swhatbuf_r>
 800e4d4:	9900      	ldr	r1, [sp, #0]
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	4630      	mov	r0, r6
 800e4da:	f7fe fecb 	bl	800d274 <_malloc_r>
 800e4de:	b948      	cbnz	r0, 800e4f4 <__smakebuf_r+0x44>
 800e4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4e4:	059a      	lsls	r2, r3, #22
 800e4e6:	d4ef      	bmi.n	800e4c8 <__smakebuf_r+0x18>
 800e4e8:	f023 0303 	bic.w	r3, r3, #3
 800e4ec:	f043 0302 	orr.w	r3, r3, #2
 800e4f0:	81a3      	strh	r3, [r4, #12]
 800e4f2:	e7e3      	b.n	800e4bc <__smakebuf_r+0xc>
 800e4f4:	89a3      	ldrh	r3, [r4, #12]
 800e4f6:	6020      	str	r0, [r4, #0]
 800e4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4fc:	81a3      	strh	r3, [r4, #12]
 800e4fe:	9b00      	ldr	r3, [sp, #0]
 800e500:	6163      	str	r3, [r4, #20]
 800e502:	9b01      	ldr	r3, [sp, #4]
 800e504:	6120      	str	r0, [r4, #16]
 800e506:	b15b      	cbz	r3, 800e520 <__smakebuf_r+0x70>
 800e508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e50c:	4630      	mov	r0, r6
 800e50e:	f000 f81d 	bl	800e54c <_isatty_r>
 800e512:	b128      	cbz	r0, 800e520 <__smakebuf_r+0x70>
 800e514:	89a3      	ldrh	r3, [r4, #12]
 800e516:	f023 0303 	bic.w	r3, r3, #3
 800e51a:	f043 0301 	orr.w	r3, r3, #1
 800e51e:	81a3      	strh	r3, [r4, #12]
 800e520:	89a3      	ldrh	r3, [r4, #12]
 800e522:	431d      	orrs	r5, r3
 800e524:	81a5      	strh	r5, [r4, #12]
 800e526:	e7cf      	b.n	800e4c8 <__smakebuf_r+0x18>

0800e528 <_fstat_r>:
 800e528:	b538      	push	{r3, r4, r5, lr}
 800e52a:	4d07      	ldr	r5, [pc, #28]	; (800e548 <_fstat_r+0x20>)
 800e52c:	2300      	movs	r3, #0
 800e52e:	4604      	mov	r4, r0
 800e530:	4608      	mov	r0, r1
 800e532:	4611      	mov	r1, r2
 800e534:	602b      	str	r3, [r5, #0]
 800e536:	f7f5 fb6e 	bl	8003c16 <_fstat>
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	d102      	bne.n	800e544 <_fstat_r+0x1c>
 800e53e:	682b      	ldr	r3, [r5, #0]
 800e540:	b103      	cbz	r3, 800e544 <_fstat_r+0x1c>
 800e542:	6023      	str	r3, [r4, #0]
 800e544:	bd38      	pop	{r3, r4, r5, pc}
 800e546:	bf00      	nop
 800e548:	200053c0 	.word	0x200053c0

0800e54c <_isatty_r>:
 800e54c:	b538      	push	{r3, r4, r5, lr}
 800e54e:	4d06      	ldr	r5, [pc, #24]	; (800e568 <_isatty_r+0x1c>)
 800e550:	2300      	movs	r3, #0
 800e552:	4604      	mov	r4, r0
 800e554:	4608      	mov	r0, r1
 800e556:	602b      	str	r3, [r5, #0]
 800e558:	f7f5 fb6d 	bl	8003c36 <_isatty>
 800e55c:	1c43      	adds	r3, r0, #1
 800e55e:	d102      	bne.n	800e566 <_isatty_r+0x1a>
 800e560:	682b      	ldr	r3, [r5, #0]
 800e562:	b103      	cbz	r3, 800e566 <_isatty_r+0x1a>
 800e564:	6023      	str	r3, [r4, #0]
 800e566:	bd38      	pop	{r3, r4, r5, pc}
 800e568:	200053c0 	.word	0x200053c0

0800e56c <_init>:
 800e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56e:	bf00      	nop
 800e570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e572:	bc08      	pop	{r3}
 800e574:	469e      	mov	lr, r3
 800e576:	4770      	bx	lr

0800e578 <_fini>:
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	bf00      	nop
 800e57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e57e:	bc08      	pop	{r3}
 800e580:	469e      	mov	lr, r3
 800e582:	4770      	bx	lr
